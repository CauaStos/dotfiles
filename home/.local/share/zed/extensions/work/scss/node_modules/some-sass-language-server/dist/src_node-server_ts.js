"use strict";
exports.ids = ['src_node-server_ts'];
exports.modules = {
"../language-services/dist/configuration.js": (function (__unused_webpack_module, exports) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultConfiguration = void 0;
exports.defaultConfiguration = {
    workspace: {
        exclude: ["**/.git/**", "**/node_modules/**"],
        importAliases: {},
        loadPaths: [],
        logLevel: "info",
    },
    editor: {
        colorDecoratorsLimit: 500,
        insertSpaces: false,
        indentSize: 2,
        tabSize: 2,
    },
    css: {
        codeAction: {
            enabled: true,
        },
        completion: {
            enabled: true,
            css: true,
            includeFromCurrentDocument: true,
            completePropertyWithSemicolon: true,
            triggerPropertyValueCompletion: true,
        },
        colors: {
            enabled: true,
            includeFromCurrentDocument: true,
        },
        definition: {
            enabled: true,
        },
        diagnostics: {
            enabled: true,
            deprecation: {
                enabled: true,
            },
            lint: {
                enabled: true,
                compatibleVendorPrefixes: "ignore",
                vendorPrefix: "warning",
                duplicateProperties: "ignore",
                emptyRules: "warning",
                importStatement: "ignore",
                boxModel: "ignore",
                universalSelector: "ignore",
                zeroUnits: "ignore",
                fontFaceProperties: "warning",
                hexColorLength: "error",
                argumentsInColorFunction: "error",
                unknownProperties: "warning",
                validProperties: [],
                ieHack: "ignore",
                unknownVendorSpecificProperties: "ignore",
                propertyIgnoredDueToDisplay: "warning",
                important: "ignore",
                float: "ignore",
                idSelector: "ignore",
                unknownAtRules: "warning",
            },
        },
        documentSymbols: {
            enabled: true,
        },
        foldingRanges: {
            enabled: true,
        },
        highlights: {
            enabled: true,
        },
        hover: {
            enabled: true,
            documentation: true,
            references: true,
        },
        links: {
            enabled: true,
        },
        references: {
            enabled: true,
        },
        rename: {
            enabled: true,
        },
        selectionRanges: {
            enabled: true,
        },
        semanticTokens: {
            enabled: true,
        },
        signatureHelp: {
            enabled: true,
        },
        workspaceSymbol: {
            enabled: true,
        },
    },
    scss: {
        codeAction: {
            enabled: true,
        },
        completion: {
            enabled: true,
            css: true,
            mixinStyle: "all",
            includeFromCurrentDocument: true,
            suggestFromUseOnly: false,
            triggerPropertyValueCompletion: true,
        },
        colors: {
            enabled: true,
            includeFromCurrentDocument: true,
        },
        definition: {
            enabled: true,
        },
        diagnostics: {
            enabled: true,
            deprecation: {
                enabled: true,
            },
            lint: {
                enabled: true,
                compatibleVendorPrefixes: "ignore",
                vendorPrefix: "warning",
                duplicateProperties: "ignore",
                emptyRules: "warning",
                importStatement: "ignore",
                boxModel: "ignore",
                universalSelector: "ignore",
                zeroUnits: "ignore",
                fontFaceProperties: "warning",
                hexColorLength: "error",
                argumentsInColorFunction: "error",
                unknownProperties: "warning",
                validProperties: [],
                ieHack: "ignore",
                unknownVendorSpecificProperties: "ignore",
                propertyIgnoredDueToDisplay: "warning",
                important: "ignore",
                float: "ignore",
                idSelector: "ignore",
                unknownAtRules: "warning",
            },
        },
        documentSymbols: {
            enabled: true,
        },
        foldingRanges: {
            enabled: true,
        },
        highlights: {
            enabled: true,
        },
        hover: {
            enabled: true,
            documentation: true,
            references: true,
        },
        links: {
            enabled: true,
        },
        references: {
            enabled: true,
        },
        rename: {
            enabled: true,
        },
        selectionRanges: {
            enabled: true,
        },
        semanticTokens: {
            enabled: true,
        },
        signatureHelp: {
            enabled: true,
        },
        workspaceSymbol: {
            enabled: true,
        },
    },
    sass: {
        codeAction: {
            enabled: true,
        },
        completion: {
            enabled: true,
            css: true,
            mixinStyle: "all",
            includeFromCurrentDocument: true,
            suggestFromUseOnly: false,
            triggerPropertyValueCompletion: true,
        },
        colors: {
            enabled: true,
            includeFromCurrentDocument: true,
        },
        definition: {
            enabled: true,
        },
        diagnostics: {
            enabled: true,
            deprecation: {
                enabled: true,
            },
            lint: {
                enabled: true,
                compatibleVendorPrefixes: "ignore",
                vendorPrefix: "warning",
                duplicateProperties: "ignore",
                emptyRules: "warning",
                importStatement: "ignore",
                boxModel: "ignore",
                universalSelector: "ignore",
                zeroUnits: "ignore",
                fontFaceProperties: "warning",
                hexColorLength: "error",
                argumentsInColorFunction: "error",
                unknownProperties: "warning",
                validProperties: [],
                ieHack: "ignore",
                unknownVendorSpecificProperties: "ignore",
                propertyIgnoredDueToDisplay: "warning",
                important: "ignore",
                float: "ignore",
                idSelector: "ignore",
                unknownAtRules: "warning",
            },
        },
        documentSymbols: {
            enabled: true,
        },
        foldingRanges: {
            enabled: true,
        },
        highlights: {
            enabled: true,
        },
        hover: {
            enabled: true,
            documentation: true,
            references: true,
        },
        links: {
            enabled: true,
        },
        references: {
            enabled: true,
        },
        rename: {
            enabled: true,
        },
        selectionRanges: {
            enabled: true,
        },
        semanticTokens: {
            enabled: true,
        },
        signatureHelp: {
            enabled: true,
        },
        workspaceSymbol: {
            enabled: true,
        },
    },
};
//# sourceMappingURL=configuration.js.map

}),
"../language-services/dist/facts/sass.js": (function (__unused_webpack_module, exports) {

/**
 * Copyright (c) 2006-2018 Hampton Catlin, Natalie Weizenbaum, Chris Eppstein, and Jina Anne
 * 2022 William Killerud
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sassBuiltInModuleNames = exports.sassBuiltInModules = void 0;
exports.sassBuiltInModules = Object.freeze({
    "sass:color": {
        summary: "Generate new colors based on existing ones",
        reference: "https://sass-lang.com/documentation/modules/color",
        exports: {
            adjust: {
                description: "Increases or decreases one or more properties of `$color` by fixed amounts. All optional arguments must be numbers.\n\nIt's an error to specify an RGB property at the same time as an HSL property, or either of those at the same time as an HWB property.",
                signature: "($color, $red: null, $green: null, $blue: null, $hue: null, $saturation: null, $lightness: null, $whiteness: null, $blackness: null, $alpha: null, $space: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            alpha: {
                description: "Returns the alpha channel of `$color` as a number between **0** and **1**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            blackness: {
                description: "Returns the HWB blackness of `$color` as a number between **0%** and **100%**.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#blackness) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
            blue: {
                description: "Returns the blue channel of `$color` as a number between **0** and **255**.\n\nSee [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#blue) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
            change: {
                description: "Sets one or more properties of `$color` to new values.\n\nIt's an error to specify an RGB property at the same time as an HSL property, or either of those at the same time as an HWB property.",
                signature: "($color, $red: null, $green: null, $blue: null, $hue: null, $saturation: null, $lightness: null, $whiteness: null, $blackness: null, $alpha: null, $space: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            channel: {
                description: "Returns the value of `$channel` in `$space`, which defaults to `$color`'s space. The `$channel` must be a quoted string, and the `$space` must be an unquoted string.",
                signature: "($color, $channel, $space: null)",
                parameterSnippet: "${1:color}, ${2:channel}",
                returns: "color",
            },
            complement: {
                description: "Returns the RGB complement of `$color`",
                signature: "($color, $space: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            grayscale: {
                description: "Returns a gray color with the same lightness as `$color`.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            green: {
                description: "Returns the green channel of `$color` as a number between **0** and **255**.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#green) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
            hue: {
                description: "Returns the hue of `$color` as a number between **0deg** and **360deg**.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#hue) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                return: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
            hwb: {
                description: "Returns a color with the given hue, whiteness, and blackness and the given alpha channel.\n\nThis function is [deprecated](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#css-color-functions-in-sass) in favor of the CSS [hwb function](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb).",
                signature: "($hue, $whiteness, $blackness, $alpha: 1)",
                returns: "color",
                deprecated: "This function is deprecated in favor of the CSS hwb function.",
            },
            "ie-hex-str": {
                description: "Returns a string that represents `$color` in the #AARRGGBB format expected by `-ms-filter`.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "string",
            },
            invert: {
                description: "Returns the inverse of `$color`.",
                signature: "($color, $weight: 100, $space: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            "is-in-gamut": {
                description: "Returns whether `$color` is [in a given gamut](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#working-with-gamut-boundaries). Defaults to the space the color is defined in. The `$space` must be an unquoted string.",
                signature: "($color, $space: null)",
                parameterSnippet: "${1:color}",
                returns: "boolean",
            },
            "is-legacy": {
                description: "Returns whether `$color` is in a [legacy color space](https://sass-lang.com/documentation/values/colors#legacy-color-spaces).",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "boolean",
            },
            "is-missing": {
                description: "Returns whether `$channel` is [missing](https://sass-lang.com/documentation/values/colors/#missing-channels) in `$color`. The `$channel` must be a quoted string.",
                signature: "($color, $channel)",
                parameterSnippet: "${1:color}, ${2:channel}",
                returns: "boolean",
            },
            "is-powerless": {
                description: "Returns whether `$color`'s $channel is [powerless](https://sass-lang.com/documentation/values/colors/#powerless-channels) in the `$space`. The `$channel` must be a quoted string and the `$space` must be an unquoted string.",
                signature: "($color, $channel, $space: null)",
                parameterSnippet: "${1:color}, ${2:channel}",
                returns: "boolean",
            },
            lightness: {
                description: "Returns the HSL lightness of `$color` as a number between **0%** and **100%**.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#lightness) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
            mix: {
                description: "Returns a color that's a mixture of `$color1` and `$color2`.",
                signature: "($color1, $color2, $weight: 50%)",
                parameterSnippet: "${1:color}, ${2:color}",
                returns: "color",
            },
            red: {
                description: "Returns the red channel of `$color` as a number between **0** and **255**.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#red) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
            same: {
                description: "Returns whether `$color1` and `$color2` visually render as the same color.",
                signature: "($color1, $color2)",
                parameterSnippet: "${1:color1}, ${2:color2}",
                returns: "boolean",
            },
            saturation: {
                description: "Returns the HSL saturation of `$color` as a number between **0%** and **100%**.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#saturation) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
            scale: {
                description: "Fluidly scales one or more properties of `$color`. Each keyword argument must be a number between **-100%** and **100%**.\n\nIt's an error to specify an RGB property at the same time as an HSL property, or either of those at the same time as an HWB property.",
                signature: "($color, $red: null, $green: null, $blue: null, $saturation: null, $lightness: null, $whiteness: null, $blackness: null, $alpha: null, $space: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            space: {
                description: `Returns the name of $color's space as an unquoted string.`,
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "string",
            },
            "to-gamut": {
                description: "Returns a visually similar color to `$color` in the gamut of `$space`, which defaults to `$color`'s space. The `$space` must be an unquoted string. `$method` is mandatory until a default browser behavior is established.",
                signature: "($color, $space: null, $method: local-minde | clip)",
                parameterSnippet: "${1:color}, \\$method: ${2|local-minde,clip|}",
                returns: "color",
            },
            "to-space": {
                description: "Converts `$color` into the given `$space`, which must be an unquoted string.",
                signature: "($color, $space: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            whiteness: {
                description: "Returns the HWB whiteness of `$color` as a number between **0%** and **100%**.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#whiteness) for how to migrate.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
                deprecated: "This function is deprecated in favor of color-space-friendly functions.",
            },
        },
    },
    "sass:list": {
        summary: "Modifiy or read lists",
        reference: "https://sass-lang.com/documentation/modules/list",
        exports: {
            append: {
                description: "Returns a copy of `$list` with `$val` added to the end.",
                signature: "($list, $val, $separator: auto)",
                parameterSnippet: "${1:list}, ${2:value}",
                returns: "list",
            },
            index: {
                description: "Returns the index of `$value` in `$list`.\n\nNote that the index **1** indicates the first element of the list in Sass.",
                signature: "($list, $value)",
                parameterSnippet: "${1:list}, ${2:value}",
                returns: "number",
            },
            "is-bracketed": {
                description: "Returns whether `$list` has square brackets (`[]`).",
                signature: "($list)",
                parameterSnippet: "${1:list}",
                returns: "boolean",
            },
            join: {
                description: "Returns a new list containing the elements of `$list1` followed by the elements of `$list2`.",
                signature: "($list1, $list2, $separator: auto, $bracketed: auto)",
                parameterSnippet: "${1:list}, ${2:list}",
                returns: "list",
            },
            length: {
                description: "Returns the number of elements in `$list`. Can also return the number of pairs in a map.",
                signature: "($list, $value)",
                parameterSnippet: "${1:list}, ${2:value}",
                returns: "number",
            },
            separator: {
                description: "Returns the name of the separator used by `$list`, either **space**, **comma**, or **slash**. Returns **space** if `$list` doesn't have a separator.",
                signature: "($list)",
                parameterSnippet: "${1:list}",
                returns: "string",
            },
            nth: {
                description: "Returns the element of `$list` at index `$n`.\n\nIf `$n` is negative, it counts from the end of `$list`. Throws an error if there is no element at index `$n`.\n\nNote that the index **1** indicates the first element of the list in Sass.",
                signature: "($list, $n)",
                parameterSnippet: "${1:list}, ${2:number}",
            },
            "set-nth": {
                description: "Returns a copy of `$list` with the element at index `$n` replaced with `$value`.\n\nIf `$n` is negative, it counts from the end of `$list`. Throws an error if there is no existing element at index `$n`.\n\nNote that the index **1** indicates the first element of the list in Sass.",
                signature: "($list, $n, $value)",
                parameterSnippet: "${1:list}, ${2:number}, ${3:value}",
                returns: "list",
            },
            slash: {
                description: "Returns a slash-separated list that contains `$elements`.",
                signature: "($elements...)",
                parameterSnippet: "${1:elements}",
                returns: "list",
            },
            zip: {
                description: "Combines every list in $lists into a single list of sub-lists.\n\nEach element in the returned list contains all the elements at that position in $lists. The returned list is as long as the shortest list in $lists.\n\nThe returned list is always comma-separated and the sub-lists are always space-separated.",
                signature: "($lists...)",
                parameterSnippet: "${1:lists}",
                returns: "list",
            },
        },
    },
    "sass:map": {
        summary: "Modifiy or read maps",
        reference: "https://sass-lang.com/documentation/modules/map",
        exports: {
            "deep-merge": {
                description: "Identical to map.merge(), except that nested map values are also recursively merged.",
                signature: "($map1, $map2)",
                parameterSnippet: "${1:map}, ${2:map}",
                returns: "map",
            },
            "deep-remove": {
                description: "Returns a map without the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right.",
                signature: "($map, $key, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
                returns: "map",
            },
            get: {
                description: "Returns the value in `$map` associated with the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right. Returns `null` if there is no `$key` in `$map`.",
                signature: "($map, $key, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
            },
            "has-key": {
                description: "Returns true if `$map` has a value with the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right.",
                signature: "($map, $key, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
                returns: "boolean",
            },
            keys: {
                description: "Returns a comma-separated list of all the keys in `$map`.",
                signature: "($map)",
                parameterSnippet: "${1:map}",
                returns: "list",
            },
            merge: {
                description: "Merges the two maps at either side of the `$args` list. Between the two maps is an optional path to a nested map in `$map1` which will be merged, instead of the root map. The value from `$map2` will be used if both maps have the same key.",
                signature: "($map1, $args...)",
                parameterSnippet: "${1:map}, ${2:map}",
                returns: "map",
            },
            remove: {
                description: "Removes values in `$map` associated with any of the `$keys`.",
                signature: "($map, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
            },
            set: {
                description: "Sets `$value` in `$map` at the location of the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right. Creates nested maps at `$keys` if none exists.",
                signature: "($map, $keys..., $key, $value)",
                parameterSnippet: "${1:map}, ${2:key}, ${3:value}",
            },
            values: {
                description: "Returns a comma-separated list of all the values in `$map`.",
                signature: "($map)",
                parameterSnippet: "${1:map}",
                returns: "list",
            },
        },
    },
    "sass:math": {
        summary: "Work on numbers with functions like `calc` and `ceil`",
        reference: "https://sass-lang.com/documentation/modules/math",
        exports: {
            $e: {
                description: "The value of the mathematical constant **e**.",
            },
            $pi: {
                description: "The value of the mathematical constant **π**.",
            },
            ceil: {
                description: "Rounds up to the nearest whole number.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            clamp: {
                description: "Restricts $number to the range between `$min` and `$max`. If `$number` is less than `$min` this returns `$min`, and if it's greater than `$max` this returns `$max`.",
                signature: "($min, $number, $max)",
                parameterSnippet: "${1:min}, ${2:number}, ${3:max}",
                returns: "number",
            },
            floor: {
                description: "Rounds down to the nearest whole number.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            max: {
                description: "Returns the highest of two or more numbers.",
                signature: "($number...)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            min: {
                description: "Returns the lowest of two or more numbers.",
                signature: "($number...)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            round: {
                description: "Rounds to the nearest whole number.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            abs: {
                description: "Returns the absolute value of `$number`.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            hypot: {
                description: "Returns the length of the n-dimensional vector that has components equal to each $number. For example, for three numbers a, b, and c, this returns the square root of a² + b² + c².",
                signature: "($number...)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            log: {
                description: "Returns the logarithm of `$number` with respect to `$base`. If `$base` is `null`, the natural log is calculated.",
                signature: "($number, $base: null)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            pow: {
                description: "Raises `$base` to the power of `$exponent`. Both values must be unitless.",
                signature: "($base, $exponent)",
                parameterSnippet: "${1:base}, ${2:exponent}",
                returns: "number",
            },
            sqrt: {
                description: "Returns the square root of `$number`. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            cos: {
                description: "Returns the cosine of `$number`. `$number` must be an angle or unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            sin: {
                description: "Returns the sine of `$number`. `$number` must be an angle or unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            tan: {
                description: "Returns the tangent of `$number`. `$number` must be an angle or unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            acos: {
                description: "Returns the arccosine of `$number` in deg. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            asin: {
                description: "Returns the arcsine of `$number` in deg. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            atan: {
                description: "Returns the arctangent of `$number` in deg. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            atan2: {
                description: "Returns the 2-argument arctangent of `$y` and `$x` in deg. `$y` and `$x` must have compatible units or be unitless.",
                signature: "($y, $x)",
                parameterSnippet: "${1:y}, ${2:x}",
                returns: "number",
            },
            compatible: {
                description: "Returns whether `$number1` and `$number2` have compatible units.",
                signature: "($number1, $number2)",
                parameterSnippet: "${1:number1}, ${2:number2}",
                returns: "boolean",
            },
            "is-unitless": {
                description: "Returns true if `$number` has no units.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "boolean",
            },
            unit: {
                description: "Returns a string representation of `$number`'s units.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "string",
            },
            div: {
                description: "Divides `$number1` by `$number2`.",
                signature: "($number1, $number2)",
                parameterSnippet: "${1:number1}, ${2:number2}",
                returns: "number",
            },
            percentage: {
                description: "Converts a unitless `$number` to a percentage.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            random: {
                description: "Returns a random decimal number between **0** and **1**, or a random whole number between **1** and `$limit`.",
                signature: "($limit: null)",
                parameterSnippet: "${1:limit}",
                returns: "number",
            },
        },
    },
    "sass:meta": {
        summary: "Access to the inner workings of Sass",
        reference: "https://sass-lang.com/documentation/modules/meta",
        exports: {
            "load-css": {
                signature: "($url, $with: null)",
                parameterSnippet: "${1:url}",
                description: "Load the module at $url and include its CSS as if it were written as the contents of this mixin. The optional $with parameter configures the modules. It must be a map from variable names (without $) to the values of those variables.",
            },
            "calc-args": {
                signature: "($calc)",
                parameterSnippet: "${1:calc}",
                description: "Returns the arguments for the given calculation.",
                returns: "list",
            },
            "calc-name": {
                signature: "($calc)",
                parameterSnippet: "${1:calc}",
                description: "Returns the name of the given calculation.",
                returns: "string",
            },
            call: {
                signature: "($function, $args...)",
                parameterSnippet: "${1:function}, ${2:args}",
                description: "Invokes $function with $args and returns the result.\n\nThe $function should be a function returned by meta.get-function().",
            },
            "content-exists": {
                signature: "()",
                description: "Returns whether the current mixin was passed a @content block.\n\nThrows if called outside of a mixin.",
                returns: "boolean",
            },
            "feature-exists": {
                signature: "($feature)",
                parameterSnippet: "${1:feature}",
                description: "Returns whether the current Sass implementation supports the given feature.",
                returns: "boolean",
            },
            "function-exists": {
                signature: "($name)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a function named $name is defined, either as a built-in function or a user-defined function.",
                returns: "boolean",
            },
            "get-function": {
                signature: "($name, $css: false, $module: null)",
                parameterSnippet: "${1:name}",
                description: "Returns the function named $name.\n\nIf $module is null, this returns the function named $name without a namespace. Otherwise, $module must be a string matching the namespace of a @use rule in the current file.\n\nBy default, this throws an error if $name doesn't refer to a Sass function. However, if $css is true, it instead returns a plain CSS function.\n\nThe returned function can be called using meta.call().",
                returns: "function",
            },
            "global-variable-exists": {
                signature: "($name, $module: null)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a global variable named $name (without the $) exists.\n\nIf $module is null, this returns whether a variable named $name without a namespace exists. Otherwise, $module must be a string matching the namespace of a @use rule in the current file, in which case this returns whether that module has a variable named $name.",
                returns: "boolean",
            },
            inspect: {
                signature: "($value)",
                parameterSnippet: "${1:value}",
                description: "Returns a string representation of $value.\n\nThis function is intended for debugging.",
            },
            keywords: {
                signature: "($args)",
                parameterSnippet: "${1:args}",
                description: "Returns the keywords passed to a mixin or function that takes arbitrary arguments. The $args argument must be an argument list.\n\nThe keywords are returned as a map from argument names as unquoted strings (not including $) to the values of those arguments.",
                returns: "map",
            },
            "mixin-exists": {
                signature: "($name, $module: null)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a mixin named $name exists.\n\nIf $module is null, this returns whether a mixin named $name without a namespace exists. Otherwise, $module must be a string matching the namespace of a @use rule in the current file, in which case this returns whether that module has a mixin named $name.",
                returns: "boolean",
            },
            "module-functions": {
                signature: "($module)",
                parameterSnippet: "${1:module}",
                description: "Returns all the functions defined in a module, as a map from function names to function values.\n\nThe $module parameter must be a string matching the namespace of a @use rule in the current file.",
                returns: "map",
            },
            "module-variables": {
                signature: "($module)",
                parameterSnippet: "${1:module}",
                description: "Returns all the variables defined in a module, as a map from variable names (without $) to the values of those variables.\n\nThe $module parameter must be a string matching the namespace of a @use rule in the current file.",
                returns: "map",
            },
            "type-of": {
                signature: "($value)",
                parameterSnippet: "${1:value}",
                description: "Returns the type of $value.",
                returns: "string",
            },
            "variable-exists": {
                signature: "($name)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a variable named $name (without the $) exists in the current scope.",
                returns: "string",
            },
        },
    },
    "sass:selector": {
        summary: "Access to the Sass selector engine",
        reference: "https://sass-lang.com/documentation/modules/selector",
        exports: {
            "is-superselector": {
                description: "Returns whether the selector `$super` matches all the elements that the selector `$sub` matches.",
                signature: "($super, $sub)",
                parameterSnippet: "${1:super}, ${2:sub}",
                returns: "boolean",
            },
            append: {
                description: "Combines `$selectors` without descendant combinators — that is, without whitespace between them.\n\nIf any selector in `$selectors` is a selector list, each complex selector is combined separately.\n\nThe `$selectors` may contain placeholder selectors, but not parent selectors.",
                signature: "($selectors...)",
                parameterSnippet: "${1:selectors}",
                returns: "selector",
            },
            extend: {
                description: "Extends `$selector` as with the `@extend` rule.",
                signature: "($selector, $extendee, $extender)",
                parameterSnippet: "${1:selector}, ${2:extendee}, ${3:extender}",
                returns: "selector",
            },
            nest: {
                description: "Combines `$selectors` as though they were nested within one another in the stylesheet.",
                signature: "($selectors...)",
                parameterSnippet: "${1:selectors}",
                returns: "selector",
            },
            parse: {
                description: "Returns `$selector` in the selector value format.",
                signature: "($selector)",
                parameterSnippet: "${1:selector}",
                returns: "selector",
            },
            replace: {
                description: "Returns a copy of `$selector` with all instances of $original replaced by `$replacement`. Uses the same intelligent unification as `@extend`.",
                signature: "($selector, $original, $replacement)",
                parameterSnippet: "${1:selector}, ${2:original}, ${3:replacement}",
                returns: "selector",
            },
            unify: {
                description: "Returns a selector that matches only elements matched by both `$selector1` and `$selector2`, or `null` if there is no overlap.",
                signature: "($selector1, $selector2)",
                parameterSnippet: "${1:selector1}, ${2:selector2}",
                returns: "selector",
            },
            "simple-selectors": {
                description: "Returns a list of simple selectors in `$selector`.\n\n`$selector` must be a single string that contains a compound selector. This means it may not contain combinators (including spaces) or commas.\n\nThe returned list is comma-separated, and the simple selectors are unquoted strings.",
                signature: "($selector)",
                parameterSnippet: "${1:selector}",
                returns: "list",
            },
        },
    },
    "sass:string": {
        summary: "Combine, split and search strings",
        reference: "https://sass-lang.com/documentation/modules/string",
        exports: {
            quote: {
                description: "Returns `$string` as a quoted string.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
            index: {
                description: "Returns the first index of `$substring` in `$string`, or `null` if the substring is not found.\n\nNote that the index **1** indicates the first character of `$string` in Sass.",
                signature: "($string, $substring)",
                parameterSnippet: "${1:string}, ${2:substring}",
                returns: "number",
            },
            insert: {
                description: "Returns a copy of `$string` with `$insert` inserted at `$index`.\n\nNote that the index **1** indicates the first character of `$string` in Sass.",
                signature: "($string, $insert, $index)",
                parameterSnippet: "${1:string}, ${2:insert}, ${3:index}",
                returns: "string",
            },
            length: {
                description: "Returns the number of characters in `$string`.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "number",
            },
            slice: {
                description: "Returns the slice of `$string` starting at index `$start-at` and ending at index `$end-at` (both inclusive).\n\nNote that the index **1** indicates the first character of `$string` in Sass.",
                signature: "($string, $start-at, $end-at: -1)",
                parameterSnippet: "${1:string}, ${2:start-at}",
                returns: "string",
            },
            split: {
                description: "Returns a bracketed, comma-separated list of substrings of `$string` that are separated by `$separator`. The `$separator`s aren't included in these substrings.\n\nIf `$limit` is a number 1 or higher, this splits on at most that many `$separator`s (and so returns at most `$limit` + 1 strings). The last substring contains the rest of the string, including any remaining `$separator`s.",
                signature: "($string, $separator, $limit: null)",
                parameterSnippet: "${1:string}, ${2:separator}",
                returns: "list",
            },
            "to-upper-case": {
                description: "Returns a copy of `$string` with the ASCII letters converted to upper case.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
            "to-lower-case": {
                description: "Returns a copy of `$string` with the ASCII letters converted to lower case.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
            "unique-id": {
                description: "Returns a randomly-generated unquoted string that's guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation.",
                signature: "()",
                returns: "string",
            },
            unquote: {
                description: "Returns `$string` as an unquoted string. This can produce strings that are _not_ valid CSS, so use with caution.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
        },
    },
});
exports.sassBuiltInModuleNames = new Set(Object.keys(exports.sassBuiltInModules));
//# sourceMappingURL=sass.js.map

}),
"../language-services/dist/facts/sassdoc.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sassDocAnnotations = void 0;
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
exports.sassDocAnnotations = [
    {
        annotation: "@access",
        insertText: "@access ${1|public,private|}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@alias",
        insertText: "@alias ${1:of-other-item}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@author",
        insertText: "@author ${1:name}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@content",
        insertText: "@content ${1:description}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@deprecated",
    },
    {
        annotation: "@example",
    },
    {
        annotation: "@group",
        insertText: "@group ${1:name}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@ignore",
        insertText: "@ignore ${1:message}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@link",
        insertText: "@link ${1:url}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@name",
        insertText: "@name ${1:custom-name}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@output",
        insertText: "@output ${1:description}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@param",
        insertText: "@param ",
        insertTextFormat: language_services_types_1.InsertTextFormat.PlainText,
        aliases: ["@arg", "@argument", "@parameter"],
    },
    {
        annotation: "@property",
        aliases: ["@prop"],
        insertText: "@property ",
        insertTextFormat: language_services_types_1.InsertTextFormat.PlainText,
    },
    {
        annotation: "@require",
        insertText: "@require ",
        insertTextFormat: language_services_types_1.InsertTextFormat.PlainText,
    },
    {
        annotation: "@return",
        insertText: "@return ${1:description}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@see",
        insertText: "@see ${1:other-item}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@since",
        insertText: "@since ${1:version} ${2:description}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@throw",
        insertText: "@throw ${1:description}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@todo",
        insertText: "@todo ${1:description}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
    {
        annotation: "@type",
        insertText: "@type ${1:type}",
        insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
    },
];
//# sourceMappingURL=sassdoc.js.map

}),
"../language-services/dist/features/code-actions.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeActions = void 0;
exports.getEOL = getEOL;
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
class CodeActions extends language_feature_1.LanguageFeature {
    async getCodeActions(document, range, context = { diagnostics: [] }) {
        if (!this.hasSelection(range)) {
            return [];
        }
        let upstream = [];
        const stylesheet = this.ls.parseStylesheet(document);
        upstream = this.getUpstreamLanguageServer(document).doCodeActions2(document, range, context, stylesheet);
        return [
            this.getExtractVariableAction(document, range),
            this.getExtractMixinAction(document, range),
            this.getExtractFunctionAction(document, range),
            ...upstream,
        ];
    }
    hasSelection(range) {
        const lineDiff = range.start.line - range.end.line;
        const charDiff = range.start.character - range.end.character;
        return lineDiff !== 0 || charDiff !== 0;
    }
    getExtractFunctionAction(document, range) {
        const selectedText = document.getText(range);
        const preceedingOnLine = document.getText(language_services_types_1.Range.create(language_services_types_1.Position.create(range.start.line, 0), language_services_types_1.Position.create(range.start.line, range.start.character)));
        const preceeding = preceedingOnLine.trimStart();
        const lastIndent = preceedingOnLine.length - preceeding.length;
        const indent = preceedingOnLine.substring(0, lastIndent);
        const lines = getLinesFromText(selectedText);
        const eol = lines.length > 1 ? getEOL(selectedText) : getEOL(document.getText());
        let newLines;
        if (document.languageId === "sass") {
            newLines = [
                `${indent}@function _function()`,
                `${indent}${indentText(`@return ${lines
                    .map((line, index) => index === 0 ? line : indentText(line, this.configuration))
                    .join(eol)}`, this.configuration)}`,
                `${indent}${preceeding}_function()`,
            ].join(eol);
        }
        else {
            const semi = selectedText.endsWith(";");
            newLines = [
                `${indent}@function _function() {`,
                `${indent}${indentText(`@return ${lines
                    .map((line, index) => index === 0 ? line : indentText(line, this.configuration))
                    .join(eol)}`, this.configuration)}${semi ? "" : ";"}`,
                `${indent}}`,
                `${indent}${preceeding}_function()${semi ? ";" : ""}`,
            ].join(eol);
        }
        const workspaceEdit = {
            documentChanges: [
                language_services_types_1.TextDocumentEdit.create(language_services_types_1.VersionedTextDocumentIdentifier.create(document.uri, document.version), [
                    language_services_types_1.TextEdit.replace(language_services_types_1.Range.create(language_services_types_1.Position.create(range.start.line, 0), language_services_types_1.Position.create(range.end.line, range.end.character)), newLines),
                ]),
            ],
        };
        const action = language_services_types_1.CodeAction.create("Extract function", workspaceEdit, language_services_types_1.CodeActionKind.RefactorExtract + ".function");
        return action;
    }
    getExtractMixinAction(document, range) {
        const selectedText = document.getText(range);
        const preceedingOnLine = document.getText(language_services_types_1.Range.create(language_services_types_1.Position.create(range.start.line, 0), language_services_types_1.Position.create(range.start.line, range.start.character)));
        const onlyNonWhitespace = preceedingOnLine.trimStart();
        const lastIndent = preceedingOnLine.length - onlyNonWhitespace.length;
        const indent = preceedingOnLine.substring(0, lastIndent);
        const lines = getLinesFromText(selectedText);
        const eol = lines.length > 1 ? getEOL(selectedText) : getEOL(document.getText());
        let newLines;
        if (document.languageId === "sass") {
            newLines = [
                "@mixin _mixin",
                ...lines.map((line, index) => line
                    ? indentText(index === 0 ? `${indent}${line}` : line, this.configuration)
                    : line),
                `${indent}@include _mixin`,
            ].join(eol);
        }
        else {
            newLines = [
                "@mixin _mixin {",
                ...lines.map((line, index) => line
                    ? indentText(index === 0 ? `${indent}${line}` : line, this.configuration)
                    : line),
                `${indent}}`,
                `${indent}@include _mixin;`,
            ].join(eol);
        }
        const workspaceEdit = {
            documentChanges: [
                language_services_types_1.TextDocumentEdit.create(language_services_types_1.VersionedTextDocumentIdentifier.create(document.uri, document.version), [language_services_types_1.TextEdit.replace(range, newLines)]),
            ],
        };
        const action = language_services_types_1.CodeAction.create("Extract mixin", workspaceEdit, language_services_types_1.CodeActionKind.RefactorExtract);
        return action;
    }
    getExtractVariableAction(document, range) {
        const selected = document.getText(range);
        const preceedingOnLine = document.getText(language_services_types_1.Range.create(language_services_types_1.Position.create(range.start.line, 0), language_services_types_1.Position.create(range.start.line, range.start.character)));
        const preceeding = preceedingOnLine.trimStart();
        const lastIndent = preceedingOnLine.length - preceeding.length;
        const indent = preceedingOnLine.substring(0, lastIndent);
        const eol = getEOL(document.getText());
        let newLines;
        if (document.languageId === "sass") {
            newLines = `${indent}$_variable: ${selected}${eol}${indent}${preceeding}$_variable`;
        }
        else {
            const semi = selected.endsWith(";");
            newLines = `${indent}$_variable: ${selected}${semi ? "" : ";"}${eol}${indent}${preceeding}$_variable${semi ? ";" : ""}`;
        }
        const workspaceEdit = {
            documentChanges: [
                language_services_types_1.TextDocumentEdit.create(language_services_types_1.VersionedTextDocumentIdentifier.create(document.uri, document.version), [
                    language_services_types_1.TextEdit.replace(language_services_types_1.Range.create(language_services_types_1.Position.create(range.start.line, 0), language_services_types_1.Position.create(range.end.line, range.end.character)), newLines),
                ]),
            ],
        };
        const action = language_services_types_1.CodeAction.create("Extract variable", workspaceEdit, language_services_types_1.CodeActionKind.RefactorExtract + ".constant");
        return action;
    }
}
exports.CodeActions = CodeActions;
const reNewline = /\r\n|\r|\n/;
function getLinesFromText(text) {
    return text.split(reNewline);
}
const space = " ";
const tab = "	";
function indentText(text, settings) {
    if (settings.editor?.insertSpaces) {
        const numberOfSpaces = typeof settings.editor?.indentSize === "number"
            ? settings.editor?.indentSize
            : typeof settings.editor?.tabSize === "number"
                ? settings.editor?.tabSize
                : 2;
        return `${space.repeat(numberOfSpaces)}${text}`;
    }
    return `${tab}${text}`;
}
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * MIT License
 */
function getEOL(text) {
    for (let i = 0; i < text.length; i++) {
        const ch = text.charAt(i);
        if (ch === "\r") {
            if (i + 1 < text.length && text.charAt(i + 1) === "\n") {
                return "\r\n";
            }
            return "\r";
        }
        else if (ch === "\n") {
            return "\n";
        }
    }
    return "\n";
}
//# sourceMappingURL=code-actions.js.map

}),
"../language-services/dist/features/do-complete.js": (function (__unused_webpack_module, exports, __webpack_require__) {

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DoComplete = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const colorjs_io_1 = __importDefault(__webpack_require__(/*! colorjs.io */ "../../node_modules/colorjs.io/dist/color.js"));
const sass_1 = __webpack_require__(/*! ../facts/sass */ "../language-services/dist/facts/sass.js");
const sassdoc_1 = __webpack_require__(/*! ../facts/sassdoc */ "../language-services/dist/facts/sassdoc.js");
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
const sass_2 = __webpack_require__(/*! ../utils/sass */ "../language-services/dist/utils/sass.js");
const sassdoc_2 = __webpack_require__(/*! ../utils/sassdoc */ "../language-services/dist/utils/sassdoc.js");
const reNewSassdocBlock = /\/\/\/\s?$/;
const reSassdocLine = /\/\/\/\s/;
const reSassDotExt = /\.s(a|c)ss$/;
const rePrivate = /^\$?[-_].*$/;
const reReturn = /^.*@return/;
const reEach = /^.*@each .+ in /;
const reFor = /^.*@for .+ from /;
const reIf = /^.*@if /;
const reElseIf = /^.*@else if /;
const reWhile = /^.*@while /;
const reDebug = /^.*@debug /;
const reWarn = /^.*@warn /;
const reError = /^.*@error /;
const rePropertyValue = /.*:\s*/;
const reEmptyPropertyValue = /.*:\s*$/;
const reQuotedValueInString = /["'](?:[^"'\\]|\\.)*["']/g;
const reMixinReference = /.*@include\s+(.*)/;
const reIndentedMixinReference = /.*(@include\s+|\+)(.*)/;
const reCompletedMixinWithParametersReference = /.*@include\s+(.*)\(/;
const reCompletedIndentedMixinWithParametersReference = /.*(@include\s+|\+)(.*)\(/;
const reComment = /^(.*\/\/|.*\/\*|\s*\*)/;
const reSassDoc = /^[\\s]*\/{3}.*$/;
const reQuotes = /["']/;
const rePlaceholder = /@extend\s+/;
const rePlaceholderDeclaration = /^\s*%/;
const rePartialModuleAtRule = /@(?:use|forward|import) ["']/;
class DoComplete extends language_feature_1.LanguageFeature {
    async doComplete(document, position) {
        const result = language_services_types_1.CompletionList.create([]);
        const upstreamLs = this.getUpstreamLanguageServer(document);
        const context = this.createCompletionContext(document, position);
        const stylesheet = this.ls.parseStylesheet(document);
        const offset = document.offsetAt(position);
        let node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, offset);
        // In a handful of cases we don't get a node because our offset lands on a whitespace of
        // an incomplete declaration, for instance "@include ". Try to look back at offset - 1 and
        // see if we get a node there.
        if (!node && offset > 0) {
            node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, offset - 1);
        }
        if (context.isSassdocContext) {
            const scanner = this.getScanner(document);
            let token = scanner.scan();
            let prevToken = null;
            while (token.type !== language_services_types_1.TokenType.EOF) {
                // Lookback is needed to figure out if we should do Sassdoc block completion.
                // It should happen if we hit a function or mixin declaration with `///`
                // (and an optional space) as the previous token. If we overshoot offset
                // and that has not happened we don't really care about the rest of the
                // document and break out of the loop.
                if (prevToken && prevToken.offset + prevToken.len > offset) {
                    break;
                }
                // Don't start processing the token until we've reached the token under the cursor
                if (token.offset + token.len < offset) {
                    prevToken = token;
                    token = scanner.scan();
                    continue;
                }
                if (token.type === language_services_types_1.TokenType.AtKeyword) {
                    const keyword = token.text.toLowerCase();
                    const isFunction = keyword === "@function";
                    const isMixin = keyword === "@mixin";
                    if (isFunction || isMixin) {
                        if (prevToken && prevToken.text.match(reNewSassdocBlock)) {
                            // This makes heavy use of the snippet syntax
                            if (this.clientCapabilities.textDocument?.completion?.completionItem
                                ?.snippetSupport) {
                                const node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, token.offset);
                                if (node &&
                                    (node instanceof language_services_types_1.MixinDeclaration ||
                                        node instanceof language_services_types_1.FunctionDeclaration)) {
                                    const item = this.doSassdocBlockCompletion(document, node);
                                    result.items.push(item);
                                }
                            }
                        }
                    }
                }
                if (token.type === language_services_types_1.TokenType.Comment &&
                    token.text.match(reSassdocLine)) {
                    const beforeCursor = token.text.substring(0, offset - token.offset);
                    const items = this.doSassdocAnnotationCompletion(beforeCursor);
                    result.items.push(...items);
                }
                if (token.type !== language_services_types_1.TokenType.Newline) {
                    // ignore newlines in the logic
                    prevToken = token;
                }
                token = scanner.scan();
            }
            if (result.items.length > 0) {
                return result;
            }
        }
        if (context.isCommentContext) {
            return result;
        }
        if (context.isImportContext) {
            // Upstream includes thing like suggestions based on relative paths
            // and imports of built-in sass modules like sass:color and sass:math
            const upstreamResult = await upstreamLs.doComplete2(document, position, stylesheet, this.getDocumentContext());
            if (upstreamResult.items.length > 0) {
                result.items.push(...upstreamResult.items);
            }
            if (node &&
                node.parent &&
                (node.parent instanceof language_services_types_1.Use || node.parent instanceof language_services_types_1.Forward)) {
                const items = await this.doModuleImportCompletion(document, node);
                if (items.length > 0) {
                    result.items.push(...items);
                }
            }
            return result;
        }
        if (context.isPlaceholderDeclarationContext) {
            const items = await this.doPlaceholderDeclarationCompletion(context);
            if (items.length > 0) {
                result.items.push(...items);
            }
            return result;
        }
        if (context.isPlaceholderContext) {
            const items = await this.doPlaceholderUsageCompletion(document, context);
            if (items.length > 0) {
                result.items.push(...items);
            }
            return result;
        }
        /* Completions for variables, functions and mixins */
        // At this point we're at `@for ` and will declare a variable.
        // We don't need suggestions here.
        const forDeclaration = node instanceof language_services_types_1.ForStatement && !node.hasChildren();
        if (forDeclaration) {
            return result;
        }
        // At this point we're at `@each ` and will declare a variable.
        // We don't need suggestions here.
        const eachDeclaration = node instanceof language_services_types_1.EachStatement && !node.variables?.hasChildren();
        if (eachDeclaration) {
            return result;
        }
        const links = await this.ls.findDocumentLinks(document);
        if (context.namespace) {
            const items = await this.doNamespaceCompletion(document, context);
            if (items.length > 0) {
                result.items.push(...items);
                return result;
            }
        }
        // else {
        // 	// give suggestions for all @use in case the user is typing one of those
        //  // unfortunately in VS Code at time of writing this breaks suggestions when
        //  // manually typing out the namespace. Where without this you get suggestions
        //  // after typing the dot (ex `module.`), this somehow interferes.
        //  // Adding result.isIncomplete = true has no effect.  While I'd like to include
        //  // suggestions for available namespaces, the existing behavior has to work.
        // 	for (const link of links) {
        // 		if (link.namespace) {
        // 			let insertText = `${link.namespace}.`;
        // 			result.items.push({
        // 				label: link.namespace,
        // 				kind: CompletionItemKind.Module,
        // 				insertText,
        // 				command: {
        // 					title: "Suggest",
        // 					command: "editor.action.triggerSuggest",
        // 				},
        // 			});
        // 		}
        // 	}
        // }
        // We might be looking at a wildcard alias (@use "./foo" as *), so check the links and see if we need to go looking
        const wildcards = [];
        for (const link of links) {
            if (link.as === "*") {
                wildcards.push(link);
            }
        }
        if (wildcards.length > 0) {
            const items = await this.doWildcardCompletion(document, wildcards, {
                ...context,
                namespace: "*",
            });
            if (items.length > 0) {
                result.items.push(...items);
            }
        }
        const config = this.languageConfiguration(document);
        // Legacy @import style suggestions
        if (!config.completion.suggestFromUseOnly) {
            const documents = this.cache.documents();
            for (const currentDocument of documents) {
                if (!config.completion.includeFromCurrentDocument &&
                    currentDocument.uri === document.uri) {
                    continue;
                }
                const symbols = this.ls.findDocumentSymbols(currentDocument);
                for (const symbol of symbols) {
                    const isPrivate = Boolean(symbol.name.match(rePrivate));
                    if (isPrivate && currentDocument.uri !== document.uri) {
                        continue;
                    }
                    switch (symbol.kind) {
                        case language_services_types_1.SymbolKind.Variable: {
                            if (!context.isVariableContext)
                                break;
                            const items = await this.doVariableCompletion(currentDocument, context, symbol, isPrivate);
                            if (items.length > 0) {
                                result.items.push(...items);
                            }
                            break;
                        }
                        case language_services_types_1.SymbolKind.Method: {
                            if (!context.isMixinContext)
                                break;
                            const items = await this.doMixinCompletion(document, currentDocument, context, symbol, isPrivate);
                            if (items.length > 0) {
                                result.items.push(...items);
                            }
                            break;
                        }
                        case language_services_types_1.SymbolKind.Function: {
                            if (!context.isFunctionContext)
                                break;
                            const items = await this.doFunctionCompletion(currentDocument, context, symbol, isPrivate);
                            if (items.length > 0) {
                                result.items.push(...items);
                            }
                            break;
                        }
                    }
                }
            }
        }
        if (config.completion.css) {
            const cssResults = await upstreamLs.doComplete2(document, position, stylesheet, this.getDocumentContext());
            if (cssResults.items.length > 0) {
                result.items.push(...cssResults.items);
            }
        }
        return result;
    }
    createCompletionContext(document, position) {
        const text = document.getText();
        const offset = document.offsetAt(position);
        let i = offset - 1;
        while (!"\n\r".includes(text.charAt(i))) {
            i--;
        }
        const lineBeforePosition = text.substring(i + 1, offset);
        i = offset - 1;
        while (i >= 0 && !' \t\n\r":[()]}/,'.includes(text.charAt(i))) {
            i--;
        }
        const currentWord = text.substring(i + 1, offset);
        const context = {
            position,
            currentWord,
            lineBeforePosition,
        };
        if (rePartialModuleAtRule.test(lineBeforePosition)) {
            context.isImportContext = true;
            return context;
        }
        if (reSassDoc.test(lineBeforePosition)) {
            context.isSassdocContext = true;
            return context;
        }
        if (reComment.test(lineBeforePosition)) {
            context.isCommentContext = true;
            return context;
        }
        if (rePlaceholder.test(lineBeforePosition)) {
            context.isPlaceholderContext = true;
            return context;
        }
        if (rePlaceholderDeclaration.test(lineBeforePosition)) {
            context.isPlaceholderDeclarationContext = true;
            return context;
        }
        const isInterpolation = currentWord.includes("#{") || lineBeforePosition.includes("#{");
        if (isInterpolation) {
            context.isFunctionContext = true;
            context.isVariableContext = true;
        }
        // Is namespace, e.g. `namespace.$var` or `@include namespace.mixin` or `namespace.func()`
        context.namespace =
            currentWord.length === 0 || !currentWord.includes(".")
                ? undefined
                : currentWord.substring(
                // Skip #{ if this is interpolation
                isInterpolation ? currentWord.indexOf("{") + 1 : 0, currentWord.indexOf(".", currentWord.indexOf("{") + 1));
        const isPropertyValue = rePropertyValue.test(lineBeforePosition);
        const isEmptyValue = reEmptyPropertyValue.test(lineBeforePosition);
        const isQuotes = reQuotes.test(lineBeforePosition.replace(reQuotedValueInString, ""));
        const isControlFlow = reReturn.test(lineBeforePosition) ||
            reIf.test(lineBeforePosition) ||
            reElseIf.test(lineBeforePosition) ||
            reEach.test(lineBeforePosition) ||
            reFor.test(lineBeforePosition) ||
            reWhile.test(lineBeforePosition) ||
            reDebug.test(lineBeforePosition) ||
            reError.test(lineBeforePosition) ||
            reWarn.test(lineBeforePosition);
        if (isControlFlow) {
            context.isVariableContext = true;
            context.isFunctionContext = true;
            return context;
        }
        if (reMixinReference.test(lineBeforePosition)) {
            context.isMixinContext = true;
            if (reCompletedMixinWithParametersReference.test(lineBeforePosition)) {
                context.isMixinContext = false;
                context.isVariableContext = true;
                context.isFunctionContext = true;
            }
            return context;
        }
        else if (document.languageId === "sass") {
            // do the same test for the shorthand + to include mixins in this syntax
            if (!isPropertyValue &&
                reIndentedMixinReference.test(lineBeforePosition)) {
                context.isMixinContext = true;
                if (reCompletedIndentedMixinWithParametersReference.test(lineBeforePosition)) {
                    context.isMixinContext = false;
                    context.isVariableContext = true;
                    context.isFunctionContext = true;
                }
            }
        }
        if (isPropertyValue && !isEmptyValue && !isQuotes) {
            if (context.namespace) {
                context.isFunctionContext = true;
                context.isVariableContext = true;
            }
            else {
                context.isVariableContext = currentWord.includes("$");
                const lastChar = lineBeforePosition.charAt(lineBeforePosition.length - 1);
                const functionTriggers = " (+-*%";
                if (functionTriggers) {
                    context.isFunctionContext = functionTriggers.includes(lastChar);
                }
            }
        }
        else if (isQuotes) {
            context.isVariableContext = isInterpolation;
            context.isFunctionContext = isInterpolation;
        }
        else {
            context.isVariableContext =
                currentWord.startsWith("$") || isInterpolation || isEmptyValue;
            context.isFunctionContext = isPropertyValue && isEmptyValue;
        }
        return context;
    }
    async doPlaceholderUsageCompletion(initialDocument, context) {
        const visited = new Set();
        const items = [];
        const result = await this.findInWorkspace((document) => {
            // keep track of visited to avoid duplicates
            // if suggestFromUseOnly is false
            visited.add(document.uri);
            const symbols = this.ls.findDocumentSymbols(document);
            const items = [];
            for (const symbol of symbols) {
                if (symbol.kind === language_services_types_1.SymbolKind.Class && symbol.name.startsWith("%")) {
                    const item = this.toPlaceholderCompletionItem(document, context, symbol);
                    items.push(item);
                }
            }
            return items;
        }, initialDocument);
        if (result.length > 0) {
            items.push(...result);
        }
        const config = this.languageConfiguration(initialDocument);
        if (!config.completion.suggestFromUseOnly) {
            const documents = this.cache.documents();
            for (const current of documents) {
                if (visited.has(current.uri)) {
                    continue;
                }
                const symbols = this.ls.findDocumentSymbols(current);
                for (const symbol of symbols) {
                    if (symbol.kind === language_services_types_1.SymbolKind.Class && symbol.name.startsWith("%")) {
                        const item = this.toPlaceholderCompletionItem(current, context, symbol);
                        items.push(item);
                    }
                }
            }
        }
        return items;
    }
    toPlaceholderCompletionItem(document, context, symbol) {
        let documentation = symbol.name;
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            documentation += `\n____\n${sassdoc}`;
        }
        const detail = `Placeholder declared in ${this.getFileName(document.uri)}`;
        const filterText = symbol.name.substring(1);
        const item = {
            detail,
            documentation,
            filterText,
            textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), symbol.name),
            kind: language_services_types_1.CompletionItemKind.Class,
            insertTextFormat: language_services_types_1.InsertTextFormat.PlainText,
            label: symbol.name,
            tags: symbol.sassdoc?.deprecated
                ? [language_services_types_1.CompletionItemTag.Deprecated]
                : undefined,
        };
        return item;
    }
    /**
     * Make completion items for each `%placeholder` used in an `@extend` statement.
     * This is useful for workflows where the selectors often change, but the semantics
     * are stable.
     *
     * @see https://github.com/wkillerud/some-sass/issues/49
     */
    async doPlaceholderDeclarationCompletion(context) {
        const items = [];
        const documents = this.cache.documents();
        for (const currentDocument of documents) {
            const symbols = this.ls.findDocumentSymbols(currentDocument);
            for (const symbol of symbols) {
                if (symbol.kind === language_services_types_1.SymbolKind.Class) {
                    if (!symbol.children)
                        continue;
                    // cssNavigation should only add these placeholder symbols as children
                    // if the node parent is an @extend reference, meaning a placeholder usage.
                    for (const child of symbol.children) {
                        if (child.kind === language_services_types_1.SymbolKind.Class && child.name.startsWith("%")) {
                            const filterText = child.name.substring(1);
                            const item = {
                                textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), child.name),
                                filterText,
                                insertTextFormat: language_services_types_1.InsertTextFormat.PlainText,
                                kind: language_services_types_1.CompletionItemKind.Class,
                                label: child.name,
                            };
                            items.push(item);
                        }
                    }
                }
            }
        }
        return items;
    }
    async doNamespaceCompletion(document, context) {
        const items = [];
        const namespace = context.namespace;
        if (!namespace) {
            return items;
        }
        const links = await this.ls.findDocumentLinks(document);
        let start = undefined;
        for (const link of links) {
            if (link.target &&
                link.type === language_services_types_1.NodeType.Use &&
                link.namespace === namespace) {
                if (link.target.includes("sass:")) {
                    // Look for matches in built-in namespaces, which do not appear in storage
                    for (const [builtIn, docs] of Object.entries(sass_1.sassBuiltInModules)) {
                        if (builtIn === link.target) {
                            const items = this.doSassBuiltInCompletion(document, context, docs);
                            return items;
                        }
                    }
                }
                else {
                    start = this.cache.getDocument(link.target);
                }
                break;
            }
        }
        if (!start) {
            return items;
        }
        const result = await this.findCompletionsInWorkspace(document, context, start);
        return result;
    }
    async doWildcardCompletion(document, wildcards, context) {
        const items = [];
        for (const link of wildcards) {
            const start = this.cache.getDocument(link.target);
            if (!start)
                continue;
            const result = await this.findCompletionsInWorkspace(document, context, start);
            if (result.length > 0) {
                items.push(...result);
            }
        }
        return items;
    }
    async findCompletionsInWorkspace(document, context, start) {
        const result = await this.findInWorkspace(async (currentDocument, prefix, hide, show) => {
            const items = [];
            const symbols = this.ls.findDocumentSymbols(currentDocument);
            for (const symbol of symbols) {
                if (show.length > 0 && !show.includes(symbol.name)) {
                    continue;
                }
                if (hide.includes(symbol.name)) {
                    continue;
                }
                const isPrivate = Boolean(symbol.name.match(rePrivate));
                if (isPrivate && currentDocument.uri !== document.uri) {
                    continue;
                }
                switch (symbol.kind) {
                    case language_services_types_1.SymbolKind.Variable: {
                        if (!context.isVariableContext)
                            break;
                        const vars = await this.doVariableCompletion(currentDocument, context, symbol, isPrivate, prefix);
                        if (vars.length > 0) {
                            items.push(...vars);
                        }
                        break;
                    }
                    case language_services_types_1.SymbolKind.Method: {
                        if (!context.isMixinContext)
                            break;
                        const mixs = await this.doMixinCompletion(document, currentDocument, context, symbol, isPrivate, prefix);
                        if (mixs.length > 0) {
                            items.push(...mixs);
                        }
                        break;
                    }
                    case language_services_types_1.SymbolKind.Function: {
                        if (!context.isFunctionContext)
                            break;
                        const funcs = await this.doFunctionCompletion(currentDocument, context, symbol, isPrivate, prefix);
                        if (funcs.length > 0) {
                            items.push(...funcs);
                        }
                        break;
                    }
                }
            }
            // check if the document @forwards a sass built-in
            // since they aren't documents that are visited by findInWorkspace
            const links = await this.ls.findDocumentLinks(currentDocument);
            for (let link of links) {
                if (link.type === language_services_types_1.NodeType.Forward &&
                    link.target &&
                    link.target.includes("sass:")) {
                    // Look for matches in built-in namespaces, which do not appear in storage
                    for (const [builtIn, docs] of Object.entries(sass_1.sassBuiltInModules)) {
                        if (builtIn === link.target) {
                            const suggestions = this.doSassBuiltInCompletion(document, context, docs, link.as ? prefix + link.as : "");
                            items.push(...suggestions);
                        }
                    }
                }
            }
            return items;
        }, start, { lazy: false, depth: 1 });
        return result;
    }
    async doVariableCompletion(document, context, symbol, isPrivate, prefix = "") {
        const rawValue = this.getVariableValue(document, symbol);
        let value = await this.findValue(document, symbol.selectionRange.start);
        value = value || rawValue;
        const color = value ? getColorValue(value) : null;
        const completionKind = color
            ? language_services_types_1.CompletionItemKind.Color
            : language_services_types_1.CompletionItemKind.Variable;
        // Avoid ending up with namespace.prefix-$variable
        const label = `$${prefix}${(0, sass_2.asDollarlessVariable)(symbol.name)}`;
        let documentation = color ||
            [
                "```scss",
                `${label}: ${value};${value !== rawValue ? ` // via ${rawValue}` : ""}`,
                "```",
            ].join("\n") ||
            "";
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            documentation += `\n____\n${sassdoc}`;
        }
        documentation += `\n____\nVariable declared in ${this.getFileName(document.uri)}`;
        const sortText = isPrivate ? label.replace(/^$[_]/, "") : undefined;
        const item = {
            commitCharacters: [";", ","],
            documentation: completionKind === language_services_types_1.CompletionItemKind.Color
                ? documentation
                : {
                    kind: language_services_types_1.MarkupKind.Markdown,
                    value: documentation,
                },
            kind: completionKind,
            label,
            sortText,
            tags: symbol.sassdoc?.deprecated ? [language_services_types_1.CompletionItemTag.Deprecated] : [],
        };
        let insertText = label;
        if (context.namespace && context.namespace !== "*") {
            insertText = `${context.namespace}.${label}`;
            item.filterText = `${context.namespace}.${label}`;
        }
        const range = this.getReplaceRange(context);
        item.textEdit = vscode_css_languageservice_1.TextEdit.replace(range, insertText);
        return [item];
    }
    getReplaceRange(context) {
        const { position, currentWord } = context;
        const start = language_services_types_1.Position.create(position.line, position.character - currentWord.length);
        const end = language_services_types_1.Position.create(position.line, start.character + currentWord.length);
        const interpolation = currentWord.indexOf("#{");
        if (interpolation !== -1) {
            // don't replace the interpolation syntax (or what may be before it)
            start.character = start.character + interpolation + 2;
        }
        return vscode_css_languageservice_1.Range.create(start, end);
    }
    isEmbedded(initialDocument) {
        const dotExt = initialDocument.uri.slice(Math.max(0, initialDocument.uri.lastIndexOf(".")));
        const isEmbedded = !dotExt.match(reSassDotExt);
        return isEmbedded;
    }
    async doMixinCompletion(initialDocument, document, context, symbol, isPrivate, prefix = "") {
        const items = [];
        const snippetSupport = this.clientCapabilities.textDocument?.completion?.completionItem
            ?.snippetSupport;
        let label = `${prefix}${symbol.name}`;
        const { namespace } = context;
        const filterText = namespace
            ? namespace !== "*"
                ? `${namespace}.${prefix}${symbol.name}`
                : `${prefix}${symbol.name}`
            : symbol.name;
        const sortText = isPrivate ? label.replace(/^$[_]/, "") : undefined;
        const documentation = {
            kind: language_services_types_1.MarkupKind.Markdown,
            value: `\`\`\`scss\n@mixin ${symbol.name}${symbol.detail || "()"}\n\`\`\``,
        };
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            documentation.value += `\n____\n${sassdoc}`;
        }
        documentation.value += `\n____\nMixin declared in ${this.getFileName(document.uri)}`;
        const base = {
            label,
            documentation,
            filterText,
            sortText,
            kind: language_services_types_1.CompletionItemKind.Method,
            insertTextFormat: snippetSupport
                ? language_services_types_1.InsertTextFormat.Snippet
                : language_services_types_1.InsertTextFormat.PlainText,
            tags: symbol.sassdoc?.deprecated ? [language_services_types_1.CompletionItemTag.Deprecated] : [],
        };
        let insert = label;
        if (context.namespace && context.namespace !== "*") {
            insert = `${context.namespace}.${label}`;
            base.filterText = `${context.namespace}.${label}`;
        }
        const config = this.languageConfiguration(initialDocument);
        const makeCompletionVariants = (insert, detail) => {
            // Not all mixins have @content, but when they do, be smart about adding brackets
            // and move the cursor to be ready to add said contents.
            // Include as separate suggestion since content may not always be needed or wanted.
            if (config.completion.mixinStyle !== "bracket") {
                items.push({
                    ...base,
                    labelDetails: detail ? { detail: `(${detail})` } : undefined,
                    textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), insert),
                });
            }
            if (snippetSupport &&
                config.completion.mixinStyle !== "nobracket" &&
                document.languageId === "scss") {
                const insertSnippet = `${insert} {\n\t$0\n}`;
                items.push({
                    ...base,
                    labelDetails: { detail: detail ? `(${detail}) { }` : " { }" },
                    textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), insertSnippet),
                });
            }
        };
        // In the case of no required parameters, skip details.
        if (symbol.detail && snippetSupport) {
            const parameters = getParametersFromDetail(symbol.detail);
            const requiredParameters = parameters.filter((p) => !p.defaultValue);
            // If there are required parameters, add a suggestion with only them.
            if (requiredParameters.length > 0) {
                const parametersSnippet = requiredParameters
                    .map((p, i) => mapParameterSnippet(p, i, symbol.sassdoc))
                    .join(", ");
                const detail = requiredParameters
                    .map((p) => mapParameterSignature(p))
                    .join(", ");
                makeCompletionVariants(`${insert}(${parametersSnippet})`, detail);
            }
            // If there are optional parameters, add a suggestion with all parameters.
            if (requiredParameters.length !== parameters.length) {
                const parametersSnippet = parameters
                    .map((p, i) => mapParameterSnippet(p, i, symbol.sassdoc))
                    .join(", ");
                const detail = parameters
                    .map((p) => mapParameterSignature(p))
                    .join(", ");
                makeCompletionVariants(`${insert}(${parametersSnippet})`, detail);
            }
        }
        else {
            makeCompletionVariants(insert);
        }
        return items;
    }
    async doFunctionCompletion(document, context, symbol, isPrivate, prefix = "") {
        const items = [];
        const snippetSupport = this.clientCapabilities.textDocument?.completion?.completionItem
            ?.snippetSupport;
        const label = `${prefix}${symbol.name}`;
        const { namespace } = context;
        let filterText = symbol.name;
        if (namespace) {
            if (namespace === "*") {
                filterText = `${prefix}${symbol.name}`;
            }
            else {
                filterText = `${namespace}.${prefix}${symbol.name}`;
            }
        }
        const sortText = isPrivate ? label.replace(/^$[_]/, "") : undefined;
        const documentation = {
            kind: language_services_types_1.MarkupKind.Markdown,
            value: `\`\`\`scss\n@function ${symbol.name}${symbol.detail || "()"}\n\`\`\``,
        };
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            documentation.value += `\n____\n${sassdoc}`;
        }
        documentation.value += `\n____\nFunction declared in ${this.getFileName(document.uri)}`;
        // If there are required parameters, add a suggestion with only them.
        // If there are optional parameters, add a suggestion with all parameters.
        const parameters = getParametersFromDetail(symbol.detail);
        const requiredParameters = parameters.filter((p) => !p.defaultValue);
        const parametersSnippet = requiredParameters
            .map((p, i) => mapParameterSnippet(p, i, symbol.sassdoc))
            .join(", ");
        const detail = requiredParameters
            .map((p) => mapParameterSignature(p))
            .join(", ");
        const base = {
            documentation,
            filterText,
            label,
            labelDetails: { detail: `(${detail})` },
            sortText,
            insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
            kind: language_services_types_1.CompletionItemKind.Function,
            tags: symbol.sassdoc?.deprecated ? [language_services_types_1.CompletionItemTag.Deprecated] : [],
        };
        let insert = label;
        if (context.namespace && context.namespace !== "*") {
            insert = `${context.namespace}.${label}`;
            base.filterText = `${context.namespace}.${label}`;
        }
        if (!snippetSupport) {
            const insertText = `${insert}()`;
            const item = {
                ...base,
                textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), insertText),
                insertTextFormat: language_services_types_1.InsertTextFormat.PlainText,
            };
            items.push(item);
        }
        else {
            const insertText = `${insert}(${parametersSnippet})`;
            const item = {
                ...base,
                textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), insertText),
            };
            items.push(item);
            if (requiredParameters.length !== parameters.length) {
                const parametersSnippet = parameters
                    .map((p, i) => mapParameterSnippet(p, i, symbol.sassdoc))
                    .join(", ");
                const detail = parameters
                    .map((p) => mapParameterSignature(p))
                    .join(", ");
                const insertText = `${insert}(${parametersSnippet})`;
                const item = {
                    ...base,
                    labelDetails: { detail: `(${detail})` },
                    textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), insertText),
                };
                items.push(item);
            }
        }
        return items;
    }
    doSassBuiltInCompletion(document, context, moduleDocs, prefix = "") {
        const items = [];
        const snippetSupport = this.clientCapabilities.textDocument?.completion?.completionItem
            ?.snippetSupport;
        for (const [name, docs] of Object.entries(moduleDocs.exports)) {
            const { description, signature, parameterSnippet, returns, deprecated } = docs;
            const kind = signature
                ? language_services_types_1.CompletionItemKind.Function
                : language_services_types_1.CompletionItemKind.Variable;
            let label = name;
            if (kind === language_services_types_1.CompletionItemKind.Variable) {
                // Avoid ending up with namespace.prefix-$variable
                label = `$${prefix}${(0, sass_2.asDollarlessVariable)(name)}`;
            }
            else {
                label = `${prefix}${name}`;
            }
            // Client needs the namespace as part of the text that is matched,
            const filterText = `${context.namespace}.${label}`;
            const base = {
                documentation: {
                    kind: language_services_types_1.MarkupKind.Markdown,
                    value: `${description}\n\n[Sass documentation](${moduleDocs.reference}#${name})`,
                },
                filterText,
                insertTextFormat: parameterSnippet && snippetSupport
                    ? language_services_types_1.InsertTextFormat.Snippet
                    : language_services_types_1.InsertTextFormat.PlainText,
                kind: signature
                    ? language_services_types_1.CompletionItemKind.Function
                    : language_services_types_1.CompletionItemKind.Variable,
                label,
                labelDetails: {
                    detail: signature && returns ? `${signature} => ${returns}` : signature,
                },
                tags: deprecated ? [language_services_types_1.CompletionItemTag.Deprecated] : undefined,
            };
            const insert = `${context.namespace}.${label}${signature ? `(${snippetSupport ? parameterSnippet : ""})` : ""}`;
            items.push({
                ...base,
                textEdit: vscode_css_languageservice_1.TextEdit.replace(this.getReplaceRange(context), insert),
            });
        }
        return items;
    }
    async doModuleImportCompletion(document, node) {
        const items = [];
        const url = node.getText().replace(/["']/g, "");
        const moduleName = getModuleNameFromPath(url);
        const rootFolderUri = this.configuration.workspace.workspaceRoot
            ? language_services_types_1.Utils.joinPath(this.configuration.workspace.workspaceRoot, "/").toString(true)
            : "";
        const documentFolderUri = language_services_types_1.Utils.dirname(language_services_types_1.URI.parse(document.uri)).toString(true);
        if (moduleName && moduleName !== "." && moduleName !== "..") {
            const modulePath = await this.resolvePathToModule(moduleName, documentFolderUri, rootFolderUri);
            if (modulePath) {
                const pathWithinModule = url.substring(moduleName.length + 1);
                const pathInsideModule = language_services_types_1.Utils.joinPath(language_services_types_1.URI.parse(modulePath), pathWithinModule);
                const filesInModulePath = await this.options.fileSystemProvider.readDirectory(pathInsideModule);
                for (const [name, fileType] of filesInModulePath) {
                    const file = name;
                    if (fileType === language_services_types_1.FileType.File && file.match(reSassDotExt)) {
                        const filename = file.startsWith("/") ? file.slice(1) : file;
                        // Prefer to insert without file extension
                        let insertText = filename.slice(0, -5);
                        if (insertText.startsWith("/")) {
                            insertText = insertText.slice(1);
                        }
                        if (insertText.startsWith("_")) {
                            insertText = insertText.slice(1);
                        }
                        items.push({
                            label: escapePath(filename),
                            insertText: escapePath(insertText),
                            kind: language_services_types_1.CompletionItemKind.File,
                        });
                    }
                    else if (fileType === language_services_types_1.FileType.Directory) {
                        let insertText = escapePath(file);
                        if (insertText.startsWith("/")) {
                            insertText = insertText.slice(1);
                        }
                        insertText = `${insertText}/`;
                        items.push({
                            label: insertText,
                            kind: language_services_types_1.CompletionItemKind.Folder,
                            insertText,
                            command: {
                                title: "Suggest",
                                command: "editor.action.triggerSuggest",
                            },
                        });
                    }
                }
            }
        }
        if (!moduleName && url === "pkg:") {
            // Find the way to the nearest node_modules and list entries.
            // This won't cover all scenarios (like workspaces) or package managers, but
            // is better than nothing.
            const nodeModules = await this.resolvePathToNodeModules(documentFolderUri, rootFolderUri);
            if (nodeModules) {
                const folders = await this.options.fileSystemProvider.readDirectory(nodeModules);
                for (const [name, fileType] of folders) {
                    if (name.startsWith("."))
                        continue;
                    if (fileType === language_services_types_1.FileType.Directory) {
                        let insertText = escapePath(name);
                        if (insertText.startsWith("/")) {
                            insertText = insertText.slice(1);
                        }
                        insertText = `${insertText}`;
                        items.push({
                            label: insertText,
                            kind: language_services_types_1.CompletionItemKind.Folder,
                            insertText,
                            command: {
                                title: "Suggest",
                                command: "editor.action.triggerSuggest",
                            },
                        });
                    }
                }
            }
        }
        return items;
    }
    async resolvePathToModule(_moduleName, documentFolderUri, rootFolderUri) {
        // resolve the module relative to the document. We can't use `require` here as the code is webpacked.
        const packPath = language_services_types_1.Utils.joinPath(language_services_types_1.URI.parse(documentFolderUri), "node_modules", _moduleName, "package.json");
        if (await this.options.fileSystemProvider.exists(packPath)) {
            return language_services_types_1.Utils.dirname(packPath).toString(true);
        }
        else if (rootFolderUri &&
            documentFolderUri.startsWith(rootFolderUri) &&
            documentFolderUri.length !== rootFolderUri.length) {
            return this.resolvePathToModule(_moduleName, language_services_types_1.Utils.dirname(language_services_types_1.URI.parse(documentFolderUri)).toString(true), rootFolderUri);
        }
        return undefined;
    }
    async resolvePathToNodeModules(documentFolderUri, rootFolderUri) {
        // resolve the module relative to the document. We can't use `require` here as the code is webpacked.
        const dirPath = language_services_types_1.Utils.joinPath(language_services_types_1.URI.parse(documentFolderUri), "node_modules");
        if (await this.options.fileSystemProvider.exists(dirPath)) {
            return dirPath;
        }
        else if (rootFolderUri &&
            documentFolderUri.startsWith(rootFolderUri) &&
            documentFolderUri.length !== rootFolderUri.length) {
            return this.resolvePathToNodeModules(language_services_types_1.Utils.dirname(language_services_types_1.URI.parse(documentFolderUri)).toString(true), rootFolderUri);
        }
        return undefined;
    }
    doSassdocAnnotationCompletion(beforeCursor) {
        if (beforeCursor.includes("@example")) {
            return [
                {
                    label: "scss",
                    sortText: "-", // Give highest priority
                    kind: language_services_types_1.CompletionItemKind.Value,
                },
                {
                    label: "css",
                    kind: language_services_types_1.CompletionItemKind.Value,
                },
                {
                    label: "markup",
                    kind: language_services_types_1.CompletionItemKind.Value,
                },
                {
                    label: "javascript",
                    sortText: "y", // Give lowest priority
                    kind: language_services_types_1.CompletionItemKind.Value,
                },
            ];
        }
        const items = [];
        for (const { annotation, aliases, insertText, insertTextFormat, } of sassdoc_1.sassDocAnnotations) {
            const item = {
                label: annotation,
                kind: language_services_types_1.CompletionItemKind.Keyword,
                insertText,
                insertTextFormat,
                sortText: "-", // Give highest priority
            };
            items.push(item);
            if (aliases) {
                for (const alias of aliases) {
                    items.push({
                        ...item,
                        label: alias,
                        insertText: insertText
                            ? insertText.replace(annotation, alias)
                            : insertText,
                    });
                }
            }
        }
        return items;
    }
    /**
     * Generates a suggestion for a Sassdoc block above a mixin or function that includes its parameters.
     */
    doSassdocBlockCompletion(document, node) {
        const isMixin = node.type === language_services_types_1.NodeType.MixinDeclaration;
        // Incremented when used, starting at position zero below.
        // This ensures each snippet gets a unique tab position, ending at
        // position 0 which is the description for the block itself.
        let position = 0;
        let snippet = ` \${${position++}}`; // " ${0}"
        const parameters = node
            .getParameters()
            .getChildren();
        for (const parameter of parameters) {
            const name = parameter.getName();
            const defaultValue = parameter.getDefaultValue()?.getText();
            let typeSnippet = "type";
            let defaultValueSnippet = "";
            if (defaultValue) {
                defaultValueSnippet = ` [${defaultValue}]`;
                // Try to give a sensible default type if we can
                if (defaultValue === "true" || defaultValue === "false") {
                    typeSnippet = "Boolean";
                }
                else if (/^["']/.exec(defaultValue)) {
                    typeSnippet = "String";
                }
                else if (defaultValue.startsWith("#") ||
                    defaultValue.startsWith("rgb") ||
                    defaultValue.startsWith("hsl")) {
                    typeSnippet = "Color";
                }
                else {
                    const maybeNumber = Number.parseFloat(defaultValue);
                    if (!Number.isNaN(maybeNumber)) {
                        typeSnippet = "Number";
                    }
                }
            }
            // A parameter snippet such as the one below. The escape sequence "\\${name}" is needed to get the $ of variable names as part of the snippet output.
            // "/// @param {$1:Number} \$start [0] ${2:-}"
            snippet += `\n/// @param {\${${position++}:${typeSnippet}}} \\${name}${defaultValueSnippet} \${${position++}:-}`;
        }
        if (isMixin) {
            const text = node.getText();
            const hasContentAtKeyword = text.includes("@content");
            if (hasContentAtKeyword) {
                snippet += `\n/// @content \${${position++}}`;
            }
            snippet += `\n/// @output \${${position++}}`;
        }
        else {
            snippet += `\n/// @return {\${${position++}:type}} \${${position++}:-}`;
        }
        return {
            label: "SassDoc Block",
            insertText: snippet,
            insertTextFormat: language_services_types_1.InsertTextFormat.Snippet,
            sortText: "-", // Give highest priority
        };
    }
    getModuleNode(document, node) {
        if (!node)
            return null;
        switch (node.type) {
            case language_services_types_1.NodeType.MixinReference: {
                const identifier = node.getIdentifier();
                if (identifier &&
                    identifier.parent &&
                    identifier.parent.type === language_services_types_1.NodeType.Module) {
                    return identifier.parent;
                }
                return null;
            }
            case language_services_types_1.NodeType.Module: {
                return node;
            }
            case language_services_types_1.NodeType.Identifier: {
                if (node.parent && node.parent.type === language_services_types_1.NodeType.Module) {
                    return node.parent;
                }
                return null;
            }
            default: {
                const text = node.getText();
                const interpolationStart = text.indexOf("#{");
                if (interpolationStart !== -1) {
                    const dotDelim = text.indexOf(".", interpolationStart + 2);
                    if (dotDelim !== -1) {
                        const maybeNamespace = text.substring(interpolationStart + 2, dotDelim + 1);
                        const module = new language_services_types_1.Module(node.offset + interpolationStart + 2, maybeNamespace.length, language_services_types_1.NodeType.Module);
                        const identifier = new language_services_types_1.Identifier(node.offset + interpolationStart + 2, maybeNamespace.length - 1);
                        module.setIdentifier(identifier);
                        module.parent = node; // to get access to textProvider
                        return module;
                    }
                }
                else if (this.isEmbedded(document)) {
                    const dotIndex = text.indexOf(".");
                    if (dotIndex !== -1) {
                        let startOffset = dotIndex;
                        const endOffset = dotIndex;
                        while (startOffset > 0) {
                            const char = text.charAt(startOffset - 1);
                            if (char.match(/\s/)) {
                                break;
                            }
                            startOffset -= 1;
                        }
                        const module = new language_services_types_1.Module(node.offset + startOffset, endOffset - startOffset, language_services_types_1.NodeType.Module);
                        const identifier = new language_services_types_1.Identifier(node.offset + startOffset, endOffset - startOffset);
                        module.setIdentifier(identifier);
                        module.parent = node; // to get access to textProvider
                        return module;
                    }
                }
                return null;
            }
        }
    }
}
exports.DoComplete = DoComplete;
function getModuleNameFromPath(modulePath) {
    let path = modulePath;
    // Slice away deprecated tilde import
    if (path.startsWith("~")) {
        path = path.slice(1);
    }
    const firstSlash = path.indexOf("/");
    if (firstSlash === -1) {
        return "";
    }
    // If a scoped module (starts with @) then get up until second instance of '/', or to the end of the string for root-level imports.
    if (path[0] === "@") {
        const secondSlash = path.indexOf("/", firstSlash + 1);
        if (secondSlash === -1) {
            return path;
        }
        return path.substring(0, secondSlash);
    }
    // Otherwise get until first instance of '/'
    return path.substring(0, firstSlash);
}
// Escape https://www.w3.org/TR/CSS1/#url
function escapePath(p) {
    return p.replace(/(\s|\(|\)|,|"|')/g, "\\$1");
}
function getColorValue(from) {
    try {
        colorjs_io_1.default.parse(from);
        return from;
    }
    catch {
        return null;
    }
}
function getParametersFromDetail(detail) {
    const result = [];
    if (!detail) {
        return result;
    }
    const parameters = detail.replace(/[()]/g, "").split(",");
    for (const param of parameters) {
        let name = param;
        let defaultValue = undefined;
        const defaultValueStart = param.indexOf(":");
        if (defaultValueStart !== -1) {
            name = param.substring(0, defaultValueStart);
            defaultValue = param.substring(defaultValueStart + 1);
        }
        const parameter = {
            name: name.trim(),
            defaultValue: defaultValue?.trim(),
        };
        result.push(parameter);
    }
    return result;
}
/**
 * Use the SnippetString syntax to provide smart completions of parameter names.
 */
function mapParameterSnippet(p, index, sassdoc) {
    const dollarlessVariable = (0, sass_2.asDollarlessVariable)(p.name);
    const parameterDocs = sassdoc && sassdoc.parameter
        ? sassdoc.parameter.find((p) => p.name === dollarlessVariable)
        : undefined;
    if (parameterDocs?.type?.length) {
        const choices = parseStringLiteralChoices(parameterDocs.type);
        if (choices.length > 0) {
            return `\${${index + 1}|${choices.join(",")}|}`;
        }
    }
    return `\${${index + 1}:${dollarlessVariable}}`;
}
function mapParameterSignature(p) {
    return p.defaultValue ? `${p.name}: ${p.defaultValue}` : p.name;
}
const reStringLiteral = /^["'].+["']$/; // Yes, this will match 'foo", but let the parser deal with yelling about that.
/**
 * @param docstring A TypeScript-like string of accepted string literal values, for example `"standard" | "entrance" | "exit"`.
 */
function parseStringLiteralChoices(docstring) {
    const docstrings = typeof docstring === "string" ? [docstring] : docstring;
    const result = [];
    for (const doc of docstrings) {
        const parts = doc.split("|");
        if (parts.length === 1) {
            // This may be a docstring to indicate only a single valid string literal option.
            const trimmed = doc.trim();
            if (reStringLiteral.test(trimmed)) {
                result.push(trimmed);
            }
        }
        else {
            for (const part of parts) {
                const trimmed = part.trim();
                if (reStringLiteral.test(trimmed)) {
                    result.push(trimmed);
                }
            }
        }
    }
    return result;
}
//# sourceMappingURL=do-complete.js.map

}),
"../language-services/dist/features/do-diagnostics.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DoDiagnostics = void 0;
const sass_1 = __webpack_require__(/*! ../facts/sass */ "../language-services/dist/facts/sass.js");
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
const TAB = "	";
const SPACE = " ";
class DoDiagnostics extends language_feature_1.LanguageFeature {
    async doDiagnostics(document) {
        return Promise.all([
            this.doDeprecationDiagnostics(document),
            this.doUpstreamDiagnostics(document),
            this.doConsistentIndentationDiagnostics(document),
        ]).then((diagnostics) => diagnostics.flatMap((diagnostic) => diagnostic));
    }
    async doConsistentIndentationDiagnostics(document) {
        if (document.languageId !== "sass") {
            return [];
        }
        const lines = document.getText().split("\n");
        let firstIndentation;
        const diagnostics = [];
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (!firstIndentation) {
                if (line.startsWith(TAB)) {
                    firstIndentation = TAB;
                }
                else if (line.startsWith(SPACE)) {
                    firstIndentation = SPACE;
                }
            }
            if (firstIndentation === TAB && line.startsWith(SPACE)) {
                diagnostics.push({
                    message: "Got space for indentation when tab was expected",
                    range: language_services_types_1.Range.create(language_services_types_1.Position.create(i, 0), language_services_types_1.Position.create(i, 1)),
                    source: "Some Sass",
                    severity: language_services_types_1.DiagnosticSeverity.Error,
                });
            }
            else if (firstIndentation === SPACE && line.startsWith(TAB)) {
                diagnostics.push({
                    message: "Got tab for indentation when space was expected",
                    range: language_services_types_1.Range.create(language_services_types_1.Position.create(i, 0), language_services_types_1.Position.create(i, 1)),
                    source: "Some Sass",
                    severity: language_services_types_1.DiagnosticSeverity.Error,
                });
            }
        }
        return diagnostics;
    }
    async doUpstreamDiagnostics(document) {
        if (document.uri.endsWith(".vue") ||
            document.uri.endsWith(".astro") ||
            document.uri.endsWith(".svelte")) {
            return [];
        }
        const config = this.languageConfiguration(document);
        const stylesheet = this.ls.parseStylesheet(document);
        const diagnostics = this.getUpstreamLanguageServer(document).doValidation(document, stylesheet, {
            validate: config.diagnostics.enabled,
            lint: config.diagnostics.lint.enabled ? config.diagnostics.lint : false,
        });
        return diagnostics;
    }
    async doDeprecationDiagnostics(document) {
        const config = this.languageConfiguration(document);
        if (config.diagnostics.deprecation.enabled === false) {
            return [];
        }
        const references = this.getReferences(document);
        const diagnostics = [];
        for (const node of references) {
            const definition = await this.ls.findDefinition(document, document.positionAt(node.offset));
            if (!definition) {
                let name;
                switch (node.type) {
                    case language_services_types_1.NodeType.VariableName: {
                        const parent = node?.getParent();
                        if (parent &&
                            parent.type !== language_services_types_1.NodeType.VariableDeclaration &&
                            parent.type !== language_services_types_1.NodeType.FunctionParameter) {
                            name = node.getName();
                        }
                        break;
                    }
                    case language_services_types_1.NodeType.Function: {
                        name = node.getName();
                        break;
                    }
                }
                if (name) {
                    // Look to see if this is a built-in with a deprecation notice
                    for (const { exports } of Object.values(sass_1.sassBuiltInModules)) {
                        for (const [builtinName, { deprecated }] of Object.entries(exports)) {
                            if (deprecated && builtinName === name) {
                                let range = null;
                                if (node.type === language_services_types_1.NodeType.Function) {
                                    const ident = node.getIdentifier();
                                    if (ident) {
                                        range = language_services_types_1.Range.create(document.positionAt(ident.offset), document.positionAt(ident.end));
                                    }
                                }
                                diagnostics.push({
                                    message: deprecated,
                                    range: range ||
                                        language_services_types_1.Range.create(document.positionAt(node.offset), document.positionAt(node.end)),
                                    source: "Some Sass",
                                    tags: [language_services_types_1.DiagnosticTag.Deprecated],
                                    severity: language_services_types_1.DiagnosticSeverity.Hint,
                                });
                            }
                        }
                    }
                }
                continue;
            }
            const name = node.type === language_services_types_1.NodeType.SelectorPlaceholder
                ? node.getText()
                : node.getName();
            const symbol = await this.findDefinitionSymbol(definition, name);
            if (!symbol)
                continue;
            if (typeof symbol.sassdoc?.deprecated === "undefined")
                continue;
            let range = null;
            if (node.type === language_services_types_1.NodeType.MixinReference ||
                node.type === language_services_types_1.NodeType.Function) {
                const ident = node.getIdentifier();
                if (ident) {
                    range = language_services_types_1.Range.create(document.positionAt(ident.offset), document.positionAt(ident.end));
                }
            }
            diagnostics.push({
                message: symbol.sassdoc.deprecated || `${symbol.name} is deprecated`,
                range: range ||
                    language_services_types_1.Range.create(document.positionAt(node.offset), document.positionAt(node.end)),
                source: "Some Sass",
                tags: [language_services_types_1.DiagnosticTag.Deprecated],
                severity: language_services_types_1.DiagnosticSeverity.Hint,
            });
        }
        return diagnostics;
    }
    getReferences(document) {
        const references = [];
        const stylesheet = this.ls.parseStylesheet(document);
        stylesheet.accept((node) => {
            switch (node.type) {
                case language_services_types_1.NodeType.VariableName: {
                    if (node.parent &&
                        node.parent.type !== language_services_types_1.NodeType.FunctionParameter &&
                        node.parent.type !== language_services_types_1.NodeType.VariableDeclaration) {
                        references.push(node);
                    }
                    break;
                }
                case language_services_types_1.NodeType.MixinReference:
                case language_services_types_1.NodeType.Function: {
                    references.push(node);
                    break;
                }
                case language_services_types_1.NodeType.SelectorPlaceholder: {
                    const nodeList = node.parent;
                    if (!nodeList)
                        break;
                    const atExtend = nodeList.parent;
                    if (atExtend && atExtend.type === language_services_types_1.NodeType.ExtendsReference) {
                        references.push(node);
                    }
                    break;
                }
            }
            return true;
        });
        return references;
    }
}
exports.DoDiagnostics = DoDiagnostics;
//# sourceMappingURL=do-diagnostics.js.map

}),
"../language-services/dist/features/do-hover.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DoHover = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const sass_1 = __webpack_require__(/*! ../facts/sass */ "../language-services/dist/facts/sass.js");
const sassdoc_1 = __webpack_require__(/*! ../facts/sassdoc */ "../language-services/dist/facts/sassdoc.js");
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
const sass_2 = __webpack_require__(/*! ../utils/sass */ "../language-services/dist/utils/sass.js");
const sassdoc_2 = __webpack_require__(/*! ../utils/sassdoc */ "../language-services/dist/utils/sassdoc.js");
class DoHover extends language_feature_1.LanguageFeature {
    async doHover(document, position) {
        const config = this.languageConfiguration(document);
        const stylesheet = this.ls.parseStylesheet(document);
        const offset = document.offsetAt(position);
        let nodeType;
        const hoverNode = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, offset);
        if (hoverNode) {
            nodeType = hoverNode.type;
        }
        else {
            // If the document begins with a SassDoc comment the Stylesheet node does not begin at offset 0,
            // instead starting where the SassDoc block ends. To ensure we get down to the switch below to
            // look for Sassdoc annotations, set nodeType to Stylesheet here.
            nodeType = language_services_types_1.NodeType.Stylesheet;
        }
        let kind;
        let name;
        let range = undefined;
        switch (nodeType) {
            case language_services_types_1.NodeType.VariableName: {
                const parent = hoverNode?.getParent();
                if (parent &&
                    parent.type !== language_services_types_1.NodeType.VariableDeclaration &&
                    parent.type !== language_services_types_1.NodeType.FunctionParameter) {
                    name = hoverNode.getName();
                    kind = language_services_types_1.SymbolKind.Variable;
                }
                break;
            }
            case language_services_types_1.NodeType.Identifier: {
                let node;
                let type = null;
                const parent = hoverNode?.getParent();
                if (parent && parent.type === language_services_types_1.NodeType.Function) {
                    node = parent;
                    type = language_services_types_1.SymbolKind.Function;
                }
                else if (parent && parent.type === language_services_types_1.NodeType.MixinReference) {
                    node = parent;
                    type = language_services_types_1.SymbolKind.Method;
                }
                if (type === null) {
                    if (config.hover.documentation) {
                        // We are probably hovering over a CSS identifier.
                        // In VS Code, by default we defer this to vscode-css-languageservice's hover handler.
                        return this.getUpstreamLanguageServer(document).doHover(document, position, stylesheet);
                    }
                    return null;
                }
                if (node) {
                    name = node.getName();
                    kind = type;
                }
                break;
            }
            case language_services_types_1.NodeType.MixinReference: {
                name = hoverNode?.getName();
                kind = language_services_types_1.SymbolKind.Method;
                break;
            }
            case language_services_types_1.NodeType.Stylesheet: {
                // Hover information for SassDoc.
                // SassDoc is considered a comment, which are skipped by the regular parser (so we hit the Stylesheet node).
                // Use the base scanner to retokenize the document including comments,
                // and look a comment token at the hover position.
                const scanner = this.getScanner(document);
                let token = scanner.scan();
                while (token.type !== language_services_types_1.TokenType.EOF) {
                    if (token.offset + token.len < offset) {
                        token = scanner.scan();
                        continue;
                    }
                    if (token.type === language_services_types_1.TokenType.Comment) {
                        const commentText = token.text;
                        const candidate = sassdoc_1.sassDocAnnotations.find(({ annotation, aliases }) => {
                            return (commentText.includes(annotation) ||
                                aliases?.some((alias) => commentText.includes(alias)));
                        });
                        if (!candidate) {
                            // No Sassdoc annotations in the comment
                            break;
                        }
                        const annotationStart = token.offset + commentText.indexOf(candidate.annotation) - 1;
                        const annotationEnd = annotationStart + candidate.annotation.length + 1;
                        const hoveringAboveAnnotation = annotationEnd > offset && offset > annotationStart;
                        if (!hoveringAboveAnnotation) {
                            break;
                        }
                        return {
                            contents: {
                                kind: language_services_types_1.MarkupKind.Markdown,
                                value: [
                                    candidate.annotation,
                                    config.hover.references
                                        ? `\n[SassDoc reference](http://sassdoc.com/annotations/#${candidate.annotation.slice(1)})`
                                        : "",
                                ]
                                    .join("\n")
                                    .trim(),
                            },
                        };
                    }
                    token = scanner.scan();
                }
                break;
            }
            case language_services_types_1.NodeType.SelectorPlaceholder: {
                name = hoverNode?.getText();
                kind = language_services_types_1.SymbolKind.Class;
                break;
            }
        }
        if (hoverNode && name && kind) {
            range = language_services_types_1.Range.create(document.positionAt(hoverNode.offset), document.positionAt(hoverNode.offset + name.length));
            // Traverse the workspace looking for a symbol of kinds.includes(symbol.kind) && name === symbol.name
            const result = await this.findInWorkspace((document, prefix) => {
                const symbols = this.ls.findDocumentSymbols(document);
                for (const symbol of symbols) {
                    if (symbol.kind === kind) {
                        const prefixedSymbol = `${prefix}${(0, sass_2.asDollarlessVariable)(symbol.name)}`;
                        const prefixedName = (0, sass_2.asDollarlessVariable)(name);
                        if (prefixedSymbol === prefixedName) {
                            return [[document, symbol]];
                        }
                    }
                }
            }, document, { lazy: true });
            let symbolDocument = null;
            let symbol = null;
            if (result.length !== 0) {
                [symbolDocument, symbol] = result[0];
            }
            else {
                // Fall back to looking through all the things, assuming folks use @import
                const documents = this.cache.documents();
                for (const document of documents) {
                    const symbols = this.ls.findDocumentSymbols(document);
                    for (const sym of symbols) {
                        if (sym.kind === kind && sym.name === name) {
                            symbolDocument = document;
                            symbol = sym;
                            break;
                        }
                    }
                }
            }
            if (symbol && symbolDocument) {
                switch (symbol.kind) {
                    case language_services_types_1.SymbolKind.Variable: {
                        const hover = await this.getVariableHoverContent(symbolDocument, symbol, name);
                        hover.range = range;
                        return hover;
                    }
                    case language_services_types_1.SymbolKind.Method: {
                        const hover = this.getMixinHoverContent(symbolDocument, symbol, name);
                        hover.range = range;
                        return hover;
                    }
                    case language_services_types_1.SymbolKind.Function: {
                        const hover = this.getFunctionHoverContent(symbolDocument, symbol, name);
                        hover.range = range;
                        return hover;
                    }
                    case language_services_types_1.SymbolKind.Class: {
                        const hover = this.getPlaceholderHoverContent(symbolDocument, symbol);
                        hover.range = range;
                        return hover;
                    }
                }
            }
        }
        if (hoverNode) {
            // Look to see if this is a built-in, but only if we have no other content.
            // Folks may use the same names as built-ins in their modules.
            for (const { reference, exports } of Object.values(sass_1.sassBuiltInModules)) {
                for (const [builtinName, { description }] of Object.entries(exports)) {
                    if (builtinName === name) {
                        // Make sure we're not just hovering over a CSS function.
                        // Confirm we are looking at something that is the child of a module.
                        const isModule = hoverNode.getParent()?.type === language_services_types_1.NodeType.Module ||
                            hoverNode.getParent()?.getParent()?.type === language_services_types_1.NodeType.Module;
                        if (isModule) {
                            return {
                                contents: {
                                    kind: language_services_types_1.MarkupKind.Markdown,
                                    value: [
                                        description,
                                        config.hover.references
                                            ? `\n[Sass reference](${reference}#${builtinName})`
                                            : "",
                                    ]
                                        .join("\n")
                                        .trim(),
                                },
                            };
                        }
                    }
                }
            }
        }
        // Lastly, fall back to CSS hover information
        return this.getUpstreamLanguageServer(document).doHover(document, position, stylesheet);
    }
    getFunctionHoverContent(document, symbol, maybePrefixedName) {
        const result = {
            kind: language_services_types_1.MarkupKind.Markdown,
            value: [
                document.languageId === "sass" ? "```sass" : "```scss",
                `@function ${maybePrefixedName}${symbol.detail || "()"}`,
                "```",
            ].join("\n"),
        };
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            result.value += `\n____\n${sassdoc}`;
        }
        const prefixInfo = maybePrefixedName !== symbol.name ? ` as ${symbol.name}` : "";
        result.value += `\n____\nFunction declared${prefixInfo} in ${this.getFileName(document.uri)}`;
        return {
            contents: result,
        };
    }
    getMixinHoverContent(document, symbol, maybePrefixedName) {
        const result = {
            kind: language_services_types_1.MarkupKind.Markdown,
            value: [
                document.languageId === "sass" ? "```sass" : "```scss",
                `@mixin ${maybePrefixedName}${symbol.detail || "()"}`,
                "```",
            ].join("\n"),
        };
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            result.value += `\n____\n${sassdoc}`;
        }
        const prefixInfo = maybePrefixedName !== symbol.name ? ` as ${symbol.name}` : "";
        result.value += `\n____\nMixin declared${prefixInfo} in ${this.getFileName(document.uri)}`;
        return {
            contents: result,
        };
    }
    getPlaceholderHoverContent(document, symbol) {
        const result = {
            kind: language_services_types_1.MarkupKind.Markdown,
            value: [
                document.languageId === "sass" ? "```sass" : "```scss",
                symbol.name,
                "```",
            ].join("\n"),
        };
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            result.value += `\n____\n${sassdoc}`;
        }
        result.value += `\n____\nPlaceholder declared in ${this.getFileName(document.uri)}`;
        return {
            contents: result,
        };
    }
    async getVariableHoverContent(document, symbol, maybePrefixedName) {
        const rawValue = this.getVariableValue(document, symbol) || "";
        let value = await this.findValue(document, symbol.selectionRange.start);
        value = value || rawValue;
        const result = {
            kind: language_services_types_1.MarkupKind.Markdown,
            value: [
                document.languageId === "sass" ? "```sass" : "```scss",
                `${maybePrefixedName}: ${value}${document.languageId === "sass" ? "" : ";"}${value !== rawValue ? ` // via ${rawValue}` : ""}`,
                "```",
            ].join("\n"),
        };
        const sassdoc = (0, sassdoc_2.applySassDoc)(symbol);
        if (sassdoc) {
            result.value += `\n____\n${sassdoc}`;
        }
        const prefixInfo = maybePrefixedName !== symbol.name ? ` as ${symbol.name}` : "";
        result.value += `\n____\nVariable declared${prefixInfo} in ${this.getFileName(document.uri)}`;
        return {
            contents: result,
        };
    }
}
exports.DoHover = DoHover;
//# sourceMappingURL=do-hover.js.map

}),
"../language-services/dist/features/do-rename.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DoRename = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
const find_references_1 = __webpack_require__(/*! ./find-references */ "../language-services/dist/features/find-references.js");
const defaultBehavior = { defaultBehavior: true };
class DoRename extends find_references_1.FindReferences {
    async prepareRename(document, position) {
        const stylesheet = this.ls.parseStylesheet(document);
        const node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, document.offsetAt(position));
        if (!node)
            return defaultBehavior;
        const references = await this.internalFindReferences(document, position, {
            includeDeclaration: true,
        });
        if (!references.references.length) {
            if (node.type === language_services_types_1.NodeType.Import ||
                node.type === language_services_types_1.NodeType.Forward ||
                node.type === language_services_types_1.NodeType.Use) {
                // No renaming prefixes since we can't find all the symbols
                return null;
            }
            return defaultBehavior;
        }
        // Keep existing behavior for built-ins,
        // which is to rename each usage in the current document.
        if (references.references[0].defaultBehavior) {
            return defaultBehavior;
        }
        const renameRange = language_services_types_1.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
        // Exclude the $ of the variable and % of the placeholder,
        // since they're required.
        if (references.references[0].kind === language_services_types_1.SymbolKind.Variable ||
            references.references[0].kind === language_services_types_1.SymbolKind.Class) {
            renameRange.start.character += 1;
        }
        // Exclude any forward-prefixes from the renaming.
        if (references.declaration) {
            const renamingName = node.getText();
            const definitionName = references.declaration.symbol.name;
            if (renamingName !== definitionName) {
                const diff = renamingName.length - definitionName.length;
                renameRange.start.character += diff;
            }
        }
        return {
            range: renameRange,
            placeholder: document.getText(renameRange),
        };
    }
    async doRename(document, position, newName) {
        const references = await this.internalFindReferences(document, position, {
            includeDeclaration: true,
        });
        if (!references.references.length) {
            return null;
        }
        const edits = {
            changes: {},
        };
        for (const { location, kind, name } of references.references) {
            if (!edits.changes[location.uri]) {
                edits.changes[location.uri] = [];
            }
            const range = location.range;
            // Exclude the $ of the variable and % of the placeholder,
            // since they're required.
            if (kind === language_services_types_1.SymbolKind.Variable || kind === language_services_types_1.SymbolKind.Class) {
                range.start.character = range.start.character + 1;
            }
            // Exclude any forward-prefixes from the renaming.
            if (references.declaration) {
                const definitionName = references.declaration.symbol.name;
                if (name !== definitionName) {
                    const diff = name.length - definitionName.length;
                    range.start.character += diff;
                }
            }
            edits.changes[location.uri].push(language_services_types_1.TextEdit.replace(range, newName));
        }
        return edits;
    }
}
exports.DoRename = DoRename;
//# sourceMappingURL=do-rename.js.map

}),
"../language-services/dist/features/do-signature-help.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DoSignatureHelp = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const sass_1 = __webpack_require__(/*! ../facts/sass */ "../language-services/dist/facts/sass.js");
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
const sass_2 = __webpack_require__(/*! ../utils/sass */ "../language-services/dist/utils/sass.js");
const sassdoc_1 = __webpack_require__(/*! ../utils/sassdoc */ "../language-services/dist/utils/sassdoc.js");
class DoSignatureHelp extends language_feature_1.LanguageFeature {
    async doSignatureHelp(document, position) {
        const stylesheet = this.ls.parseStylesheet(document);
        let node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, document.offsetAt(position));
        if (!node) {
            return null;
        }
        if (node.type !== language_services_types_1.NodeType.Function &&
            node.type !== language_services_types_1.NodeType.MixinReference) {
            const parent = node.findAParent(language_services_types_1.NodeType.Function, language_services_types_1.NodeType.MixinReference);
            if (!parent) {
                return null;
            }
            node = parent;
        }
        const result = {
            activeSignature: 0,
            activeParameter: 0,
            signatures: [],
        };
        const identifier = node.getIdentifier().getText();
        const parameters = node.getArguments().getChildren();
        if (parameters.length) {
            result.activeParameter = parameters.length - 1;
            // Figure out how to se if we have a , after the last parameter. If so, add one to result.activeParameter.
            const lastParamEndOffset = parameters[parameters.length - 1].end;
            const lastParamEndPosition = document.positionAt(lastParamEndOffset);
            const characterAfterLastParam = document.getText(vscode_css_languageservice_1.Range.create(lastParamEndPosition, {
                line: lastParamEndPosition.line,
                character: lastParamEndPosition.character + 1,
            }));
            if (characterAfterLastParam === ",") {
                result.activeParameter = result.activeParameter + 1;
            }
        }
        const definition = await this.ls.findDefinition(document, document.positionAt(node.offset + identifier.length));
        if (definition) {
            const symbol = await this.findDefinitionSymbol(definition, identifier);
            if (!symbol)
                return result;
            const allParameters = getParametersFromDetail(symbol.detail);
            // activeParameter is 0 index
            if (allParameters.length === 0 ||
                allParameters.length > result.activeParameter) {
                const signatureInfo = language_services_types_1.SignatureInformation.create(`${identifier}${symbol.detail || "()"}`);
                const sassdoc = (0, sassdoc_1.applySassDoc)(symbol);
                signatureInfo.documentation = {
                    kind: language_services_types_1.MarkupKind.Markdown,
                    value: sassdoc,
                };
                if (symbol.detail) {
                    signatureInfo.parameters = [];
                    const parameters = getParametersFromDetail(symbol.detail);
                    for (const { name } of parameters) {
                        let documentation;
                        if (symbol.sassdoc) {
                            const dollarless = (0, sass_2.asDollarlessVariable)(name);
                            const paramDoc = symbol.sassdoc.parameter?.find((pdoc) => pdoc.name === dollarless);
                            if (paramDoc) {
                                documentation = paramDoc.description;
                            }
                        }
                        signatureInfo.parameters.push({
                            label: name.trim(),
                            documentation,
                        });
                    }
                }
                result.signatures.push(signatureInfo);
            }
        }
        else if (result.signatures.length === 0) {
            // if no suggestion, look for built-in
            for (const { reference, exports } of Object.values(sass_1.sassBuiltInModules)) {
                for (const [name, { signature, description }] of Object.entries(exports)) {
                    if (name === identifier) {
                        // Make sure we don't accidentaly match with CSS functions by checking
                        // for hints of a module name before the entry. Essentially look for ".".
                        // We could look for the module names, but that may be aliased away.
                        // Do an includes-check in case signature har more than one parameter.
                        const isNamespaced = node.parent?.type === language_services_types_1.NodeType.Module;
                        if (!isNamespaced) {
                            continue;
                        }
                        const signatureInfo = language_services_types_1.SignatureInformation.create(`${name}${signature}`);
                        signatureInfo.documentation = {
                            kind: language_services_types_1.MarkupKind.Markdown,
                            value: `${description}\n\n[Sass reference](${reference}#${name})`,
                        };
                        if (signature) {
                            const params = signature
                                .replace(/:.+?(?=[,)])/g, "") // Remove default values in a non-greedy way
                                .replace(/[().]/g, "") // Remove parentheses and ... list indicator
                                .split(",");
                            signatureInfo.parameters = params.map((p) => ({
                                label: p.trim(),
                            }));
                        }
                        result.signatures.push(signatureInfo);
                        break;
                    }
                }
            }
        }
        return result;
    }
}
exports.DoSignatureHelp = DoSignatureHelp;
function getParametersFromDetail(detail) {
    const result = [];
    if (!detail) {
        return result;
    }
    const parameters = detail.replace(/[()]/g, "").split(",");
    for (const param of parameters) {
        let name = param;
        let defaultValue = undefined;
        const defaultValueStart = param.indexOf(":");
        if (defaultValueStart !== -1) {
            name = param.substring(0, defaultValueStart);
            defaultValue = param.substring(defaultValueStart + 1);
        }
        const parameter = {
            name: name.trim(),
            defaultValue: defaultValue?.trim(),
        };
        result.push(parameter);
    }
    return result;
}
//# sourceMappingURL=do-signature-help.js.map

}),
"../language-services/dist/features/find-colors.js": (function (__unused_webpack_module, exports, __webpack_require__) {

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FindColors = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const colorjs_io_1 = __importDefault(__webpack_require__(/*! colorjs.io */ "../../node_modules/colorjs.io/dist/color.js"));
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
class FindColors extends language_feature_1.LanguageFeature {
    async findColors(document) {
        const config = this.languageConfiguration(document);
        const variables = [];
        const stylesheet = this.ls.parseStylesheet(document);
        stylesheet.accept((node) => {
            if (node.type !== language_services_types_1.NodeType.VariableName) {
                return true;
            }
            const parent = node.getParent();
            if (parent &&
                parent.type !== language_services_types_1.NodeType.VariableDeclaration &&
                parent.type !== language_services_types_1.NodeType.FunctionParameter) {
                variables.push(node);
            }
            return true;
        });
        if (variables.length > this.configuration.editor.colorDecoratorsLimit) {
            // skip color decorators for large documents, it freezes up other features
            return [];
        }
        const result = await Promise.all(variables.map(async (variable) => {
            const value = await this.findValue(document, document.positionAt(variable.offset));
            if (value) {
                try {
                    const color = colorjs_io_1.default.parse(value);
                    const srgba = colorjs_io_1.default.to(color, "srgb");
                    const colorInformation = {
                        color: {
                            alpha: srgba.alpha || 1,
                            red: srgba.coords[0],
                            green: srgba.coords[1],
                            blue: srgba.coords[2],
                        },
                        range: {
                            start: document.positionAt(variable.offset),
                            end: document.positionAt(variable.offset + variable.getName().length),
                        },
                    };
                    return colorInformation;
                }
                catch {
                    // do nothing
                }
            }
            return null;
        }));
        if (config.colors.includeFromCurrentDocument) {
            const upstream = this.getUpstreamLanguageServer(document).findDocumentColors(document, stylesheet);
            result.push(...upstream);
        }
        return result.filter((c) => c !== null);
    }
    getColorPresentations(document, color, range) {
        const stylesheet = this.ls.parseStylesheet(document);
        const node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, document.offsetAt(range.start));
        // Only suggest alternate presentations for the declaration
        // so we don't suggest replacing ex. color: $variable; with color: #ffffff;
        if (node && node.type === language_services_types_1.NodeType.VariableName) {
            const parent = node.getParent();
            if (parent && parent.type === language_services_types_1.NodeType.VariableDeclaration) {
                return this.getUpstreamLanguageServer(document).getColorPresentations(document, stylesheet, color, range);
            }
            else {
                return [];
            }
        }
        return this.getUpstreamLanguageServer(document).getColorPresentations(document, stylesheet, color, range);
    }
}
exports.FindColors = FindColors;
//# sourceMappingURL=find-colors.js.map

}),
"../language-services/dist/features/find-definition.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FindDefinition = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
const sass_1 = __webpack_require__(/*! ../utils/sass */ "../language-services/dist/utils/sass.js");
class FindDefinition extends language_feature_1.LanguageFeature {
    async findDefinition(document, position) {
        const stylesheet = this.ls.parseStylesheet(document);
        const offset = document.offsetAt(position);
        const node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, offset);
        if (!node) {
            return this.getUpstreamLanguageServer(document).findDefinition(document, position, stylesheet);
        }
        // Sometimes we can't tell at position whether an identifier is a Method or a Function
        // so we'll need to look for more than one SymbolKind.
        let kinds;
        let name;
        switch (node.type) {
            case language_services_types_1.NodeType.VariableName: {
                const parent = node.getParent();
                if (parent) {
                    if (!(parent instanceof language_services_types_1.FunctionParameter) &&
                        !(parent instanceof language_services_types_1.VariableDeclaration)) {
                        name = node.getName();
                        kinds = [language_services_types_1.SymbolKind.Variable];
                    }
                }
                break;
            }
            case language_services_types_1.NodeType.SelectorPlaceholder: {
                name = node.getText();
                kinds = [language_services_types_1.SymbolKind.Class];
                break;
            }
            case language_services_types_1.NodeType.Function: {
                const identifier = node.getIdentifier();
                if (!identifier)
                    break;
                name = identifier.getText();
                kinds = [language_services_types_1.SymbolKind.Function];
                break;
            }
            case language_services_types_1.NodeType.MixinReference: {
                const identifier = node.getIdentifier();
                if (!identifier)
                    break;
                name = identifier.getText();
                kinds = [language_services_types_1.SymbolKind.Method];
                break;
            }
            case language_services_types_1.NodeType.Identifier: {
                const parent = node.getParent();
                if (parent && parent.type === language_services_types_1.NodeType.ForwardVisibility) {
                    name = node.getText();
                    // At this point the identifier can be both a function and a mixin.
                    kinds = [language_services_types_1.SymbolKind.Method, language_services_types_1.SymbolKind.Function];
                }
                else {
                    let i = 0;
                    let n = node;
                    let isMixin = false;
                    let isFunction = false;
                    while (n && !isMixin && !isFunction && i !== 2) {
                        n = n.getParent();
                        if (n) {
                            isMixin = n.type === language_services_types_1.NodeType.MixinReference;
                            isFunction = n.type === language_services_types_1.NodeType.Function;
                        }
                        i++;
                    }
                    if (n && (isMixin || isFunction)) {
                        let kind = language_services_types_1.SymbolKind.Method;
                        if (isFunction) {
                            kind = language_services_types_1.SymbolKind.Function;
                        }
                        name = n.getName();
                        kinds = [kind];
                    }
                }
                break;
            }
        }
        if (!name || !kinds) {
            return this.getUpstreamLanguageServer(document).findDefinition(document, position, stylesheet);
        }
        // Traverse the workspace looking for a symbol of kinds.includes(symbol.kind) && name === symbol.name
        const result = await this.findInWorkspace((document, prefix) => {
            const symbols = this.ls.findDocumentSymbols(document);
            for (const symbol of symbols) {
                if (symbol.kind === language_services_types_1.SymbolKind.Class) {
                    // Placeholders are not prefixed the same way other symbols are
                    if (kinds.includes(symbol.kind) && symbol.name === name) {
                        return language_services_types_1.Location.create(document.uri, symbol.selectionRange);
                    }
                }
                const prefixedSymbol = `${prefix}${(0, sass_1.asDollarlessVariable)(symbol.name)}`;
                const prefixedName = (0, sass_1.asDollarlessVariable)(name);
                if (kinds.includes(symbol.kind) && prefixedSymbol === prefixedName) {
                    return language_services_types_1.Location.create(document.uri, symbol.selectionRange);
                }
            }
        }, document, { lazy: true });
        if (result.length !== 0) {
            return result[0];
        }
        // If not found, go through the old fashioned way and assume everything is in scope via @import
        const documents = this.cache.documents();
        for (const document of documents) {
            const symbols = this.ls.findDocumentSymbols(document);
            for (const symbol of symbols) {
                if (symbol.name !== name) {
                    continue;
                }
                if (kinds.includes(symbol.kind)) {
                    return language_services_types_1.Location.create(document.uri, symbol.selectionRange);
                }
            }
        }
        return this.getUpstreamLanguageServer(document).findDefinition(document, position, stylesheet);
    }
}
exports.FindDefinition = FindDefinition;
//# sourceMappingURL=find-definition.js.map

}),
"../language-services/dist/features/find-document-highlights.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FindDocumentHighlights = void 0;
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
class FindDocumentHighlights extends language_feature_1.LanguageFeature {
    findDocumentHighlights(document, position) {
        const stylesheet = this.ls.parseStylesheet(document);
        return this.getUpstreamLanguageServer(document).findDocumentHighlights(document, position, stylesheet);
    }
}
exports.FindDocumentHighlights = FindDocumentHighlights;
//# sourceMappingURL=find-document-highlights.js.map

}),
"../language-services/dist/features/find-document-links.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FindDocumentLinks = void 0;
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
class FindDocumentLinks extends language_feature_1.LanguageFeature {
    async findDocumentLinks(document) {
        const cached = this.cache.getResolvedLinks(document);
        if (cached)
            return cached;
        const stylesheet = this.ls.parseStylesheet(document);
        const links = await this.getUpstreamLanguageServer(document).findDocumentLinks2(document, stylesheet, this.getDocumentContext());
        for (const link of links) {
            if (link.target && !link.target.includes("sass:")) {
                // For monorepos, resolve the real path behind a symlink, since multiple links in `node_modules/` can point to the same file.
                // Take this initial performance hit to maximise cache hits and provide better results for projects using symlinks.
                const realpath = await this.options.fileSystemProvider.realPath(language_services_types_1.URI.parse(link.target));
                link.target = realpath.toString();
            }
        }
        this.cache.putResolvedLinks(document, links);
        return links;
    }
}
exports.FindDocumentLinks = FindDocumentLinks;
//# sourceMappingURL=find-document-links.js.map

}),
"../language-services/dist/features/find-references.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FindReferences = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const sass_1 = __webpack_require__(/*! ../facts/sass */ "../language-services/dist/facts/sass.js");
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
const sass_2 = __webpack_require__(/*! ../utils/sass */ "../language-services/dist/utils/sass.js");
class FindReferences extends language_feature_1.LanguageFeature {
    async findReferences(document, position, context = { includeDeclaration: true }) {
        const references = await this.internalFindReferences(document, position, context);
        return references.references.map((r) => r.location);
    }
    async internalFindReferences(document, position, context) {
        const references = {
            declaration: null,
            references: [],
        };
        const { declaration, name } = await this.getDeclaration(document, position, context);
        references.declaration = declaration;
        let builtin = null;
        if (!references.declaration) {
            // If we don't have a declaration anywhere we might be dealing with a built-in.
            // Check to see if that's the case.
            for (const [module, { exports }] of Object.entries(sass_1.sassBuiltInModules)) {
                for (const [builtinName] of Object.entries(exports)) {
                    if (builtinName === name) {
                        builtin = [module.split(":")[1], builtinName];
                    }
                }
            }
        }
        // If we have neither a declaration nor a built-in, return an empty result
        if (!references.declaration && !builtin) {
            return references;
        }
        const declarationName = (0, sass_2.asDollarlessVariable)(builtin ? builtin[1] : references.declaration.symbol.name);
        const documents = this.cache.documents();
        for (const doc of documents) {
            const stylesheet = this.ls.parseStylesheet(doc);
            const candidates = [];
            stylesheet.accept((node) => {
                switch (node.type) {
                    case language_services_types_1.NodeType.VariableName: {
                        const parent = node?.getParent();
                        if (!parent)
                            break;
                        if ((parent.type !== language_services_types_1.NodeType.VariableDeclaration ||
                            context.includeDeclaration) &&
                            parent.type !== language_services_types_1.NodeType.FunctionParameter) {
                            const candidateName = node.getName();
                            if (!candidateName.includes(declarationName))
                                break;
                            candidates.push({
                                location: {
                                    uri: doc.uri,
                                    range: language_services_types_1.Range.create(doc.positionAt(node.offset), doc.positionAt(node.end)),
                                },
                                name: candidateName,
                                kind: language_services_types_1.SymbolKind.Variable,
                                defaultBehavior: false,
                            });
                        }
                        break;
                    }
                    case language_services_types_1.NodeType.Function: {
                        const identifier = node.getIdentifier();
                        if (!identifier)
                            break;
                        // To avoid collisions with CSS functions, only support built-ins in the module system
                        if (builtin && node.parent?.type !== language_services_types_1.NodeType.Module)
                            break;
                        const candidateName = identifier.getText();
                        if (!candidateName.includes(declarationName))
                            break;
                        candidates.push({
                            location: {
                                uri: doc.uri,
                                range: language_services_types_1.Range.create(doc.positionAt(identifier.offset), doc.positionAt(identifier.end)),
                            },
                            name: candidateName,
                            kind: language_services_types_1.SymbolKind.Function,
                            defaultBehavior: false,
                        });
                        break;
                    }
                    case language_services_types_1.NodeType.FunctionDeclaration: {
                        if (!context.includeDeclaration)
                            break;
                        const identifier = node.getIdentifier();
                        if (!identifier)
                            break;
                        const candidateName = identifier.getText();
                        if (!candidateName.includes(declarationName))
                            break;
                        candidates.push({
                            location: {
                                uri: doc.uri,
                                range: language_services_types_1.Range.create(doc.positionAt(identifier.offset), doc.positionAt(identifier.end)),
                            },
                            name: candidateName,
                            kind: language_services_types_1.SymbolKind.Function,
                            defaultBehavior: false,
                        });
                        break;
                    }
                    case language_services_types_1.NodeType.MixinReference: {
                        const identifier = node.getIdentifier();
                        if (!identifier)
                            break;
                        const candidateName = identifier.getText();
                        if (!candidateName.includes(declarationName))
                            break;
                        candidates.push({
                            location: {
                                uri: doc.uri,
                                range: language_services_types_1.Range.create(doc.positionAt(identifier.offset), doc.positionAt(identifier.end)),
                            },
                            name: candidateName,
                            kind: language_services_types_1.SymbolKind.Method,
                            defaultBehavior: false,
                        });
                        break;
                    }
                    case language_services_types_1.NodeType.MixinDeclaration: {
                        if (!context.includeDeclaration)
                            break;
                        const identifier = node.getIdentifier();
                        if (!identifier)
                            break;
                        const candidateName = identifier.getText();
                        if (!candidateName.includes(declarationName))
                            break;
                        candidates.push({
                            location: {
                                uri: doc.uri,
                                range: language_services_types_1.Range.create(doc.positionAt(identifier.offset), doc.positionAt(identifier.end)),
                            },
                            name: candidateName,
                            kind: language_services_types_1.SymbolKind.Method,
                            defaultBehavior: false,
                        });
                        break;
                    }
                    case language_services_types_1.NodeType.SelectorPlaceholder: {
                        const candidateName = node.getText();
                        if (!candidateName.includes(declarationName))
                            break;
                        candidates.push({
                            location: {
                                uri: doc.uri,
                                range: language_services_types_1.Range.create(doc.positionAt(node.offset), doc.positionAt(node.end)),
                            },
                            name: candidateName,
                            kind: language_services_types_1.SymbolKind.Class,
                            defaultBehavior: false,
                        });
                        break;
                    }
                    case language_services_types_1.NodeType.Identifier: {
                        const parent = node?.getParent();
                        if (!parent)
                            break;
                        if (parent.type === language_services_types_1.NodeType.ForwardVisibility) {
                            const candidateName = node.getText();
                            if (!candidateName.includes(declarationName))
                                break;
                            // if parent is ForwardVisibility, we can't tell between functions or mixins, so look for both.
                            const candidateKinds = [language_services_types_1.SymbolKind.Function, language_services_types_1.SymbolKind.Method];
                            for (const kind of candidateKinds) {
                                candidates.push({
                                    location: {
                                        uri: doc.uri,
                                        range: language_services_types_1.Range.create(doc.positionAt(node.offset), doc.positionAt(node.end)),
                                    },
                                    name: candidateName,
                                    kind,
                                    defaultBehavior: false,
                                });
                            }
                        }
                        break;
                    }
                }
                return true;
            });
            for (const candidate of candidates) {
                if (references.declaration) {
                    if (candidate.kind !== references.declaration.symbol.kind)
                        continue;
                    const candidateIsDeclaration = candidate.name === references.declaration.symbol.name &&
                        candidate.kind === references.declaration.symbol.kind &&
                        candidate.location.uri === references.declaration.document.uri &&
                        // Only check the start position here, since
                        // a VariableDeclaration's range is larger than
                        // a Variable reference's range (which doesn't include the value).
                        this.isSamePosition(candidate.location.range.start, references.declaration.symbol.selectionRange.start);
                    if (!context.includeDeclaration && candidateIsDeclaration) {
                        continue;
                    }
                    else if (candidateIsDeclaration) {
                        references.references.push(candidate);
                        continue;
                    }
                    const candidateDeclaration = await this.ls.findDefinition(doc, candidate.location.range.start);
                    if (candidateDeclaration != null) {
                        const isSameFile = await this.isSameRealPath(candidateDeclaration.uri, references.declaration.document.uri);
                        // Only check the start position here, since
                        // a VariableDeclaration's range is larger than
                        // a Variable reference's range (which doesn't include the value).
                        const isSamePosition = this.isSamePosition(candidateDeclaration.range.start, references.declaration.symbol.selectionRange.start);
                        if (isSameFile && isSamePosition) {
                            references.references.push(candidate);
                            continue;
                        }
                    }
                }
                // If we don't have a reference.definition or candidateDefinition, we might be dealing with a built-in.
                // If that's the case, add the reference even without the definition.
                if (builtin) {
                    const builtinName = builtin[1];
                    if (builtinName.includes(candidate.name)) {
                        references.references.push({
                            ...candidate,
                            defaultBehavior: true,
                        });
                    }
                }
            }
        }
        return references;
    }
    async getDeclaration(document, position, context) {
        const result = {
            name: null,
            kind: null,
            declaration: null,
        };
        const stylesheet = this.ls.parseStylesheet(document);
        const refNode = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, document.offsetAt(position));
        if (!refNode)
            return result;
        switch (refNode.type) {
            case language_services_types_1.NodeType.VariableName: {
                const parent = refNode?.getParent();
                if (parent &&
                    (parent.type !== language_services_types_1.NodeType.VariableDeclaration ||
                        context.includeDeclaration) &&
                    parent.type !== language_services_types_1.NodeType.FunctionParameter) {
                    result.name = refNode.getName();
                    result.kind = language_services_types_1.SymbolKind.Variable;
                }
                break;
            }
            case language_services_types_1.NodeType.Function: {
                result.name = refNode.getName();
                result.kind = language_services_types_1.SymbolKind.Function;
                break;
            }
            case language_services_types_1.NodeType.FunctionDeclaration: {
                if (!context.includeDeclaration)
                    break;
                result.name = refNode.getName();
                result.kind = language_services_types_1.SymbolKind.Function;
                break;
            }
            case language_services_types_1.NodeType.MixinReference: {
                result.name = refNode?.getName();
                result.kind = language_services_types_1.SymbolKind.Method;
                break;
            }
            case language_services_types_1.NodeType.MixinDeclaration: {
                if (!context.includeDeclaration)
                    break;
                result.name = refNode.getName();
                result.kind = language_services_types_1.SymbolKind.Method;
                break;
            }
            case language_services_types_1.NodeType.SelectorPlaceholder: {
                result.name = refNode?.getText();
                result.kind = language_services_types_1.SymbolKind.Class;
                break;
            }
            case language_services_types_1.NodeType.Identifier: {
                let node;
                let type = null;
                let parent = refNode?.getParent();
                // For modules, the identifier and function/mixin are sibling nodes.
                if (parent && parent.type === language_services_types_1.NodeType.Module) {
                    parent =
                        parent
                            .getChildren()
                            .find((c) => c.type === language_services_types_1.NodeType.Function ||
                            c.type === language_services_types_1.NodeType.MixinReference) || null;
                    if (parent) {
                        node = parent.getIdentifier();
                    }
                }
                if (parent && parent.type === language_services_types_1.NodeType.ForwardVisibility) {
                    // At this point the identifier can be both a function and a mixin.
                    // To figure it out we need to look for the original definition.
                    const definition = await this.ls.findDefinition(document, position);
                    if (!definition)
                        break;
                    result.name = refNode.getText();
                    const definitionSymbol = await this.findDefinitionSymbol(definition, result.name);
                    if (!definitionSymbol)
                        break;
                    result.kind = definitionSymbol.kind;
                    break;
                }
                if (parent &&
                    (parent.type === language_services_types_1.NodeType.Function ||
                        (parent.type === language_services_types_1.NodeType.FunctionDeclaration &&
                            context.includeDeclaration))) {
                    node = parent;
                    type = language_services_types_1.SymbolKind.Function;
                }
                else if (parent &&
                    (parent.type === language_services_types_1.NodeType.MixinReference ||
                        (parent.type === language_services_types_1.NodeType.MixinDeclaration &&
                            context.includeDeclaration))) {
                    node = parent;
                    type = language_services_types_1.SymbolKind.Method;
                }
                if (type === null)
                    break;
                if (node) {
                    result.name = node.getName();
                    result.kind = type;
                }
                break;
            }
        }
        if (!result.name || !result.kind)
            return result;
        // Check to see if we have a symbol of name and kind in the current document
        const symbols = this.ls.findDocumentSymbols(document);
        const definition = symbols.find((symbol) => symbol.name === result.name && symbol.kind === result.kind);
        if (definition) {
            result.declaration = {
                symbol: definition,
                document,
            };
        }
        else {
            // If not, get the definition for the current position
            const definition = await this.ls.findDefinition(document, position);
            if (definition) {
                const document = this.cache.getDocument(definition.uri);
                if (document) {
                    const dollarlessName = (0, sass_2.asDollarlessVariable)(result.name);
                    const symbols = this.ls.findDocumentSymbols(document);
                    const definitionSymbol = symbols.find((symbol) => 
                    // use includes because of @forward prefixing
                    dollarlessName.includes((0, sass_2.asDollarlessVariable)(symbol.name)) &&
                        symbol.kind === result.kind);
                    if (definitionSymbol) {
                        result.declaration = {
                            symbol: definitionSymbol,
                            document,
                        };
                    }
                    else {
                        // fallback for scoped symbols not included in findDocumentSymbols
                        result.declaration = {
                            symbol: {
                                kind: result.kind,
                                name: result.name,
                                range: definition.range,
                                selectionRange: definition.range,
                            },
                            document,
                        };
                    }
                }
            }
        }
        return result;
    }
    async isSameRealPath(candidate, definition) {
        // Checking the file system is expensive, so do the optimistic thing first.
        // If the URIs match, we're good.
        if (candidate === definition) {
            return true;
        }
        if (candidate.includes(this.getFileName(definition))) {
            try {
                const candidateDocument = this.cache.getDocument(candidate);
                if (!candidateDocument) {
                    return false;
                }
                const realCandidate = await this.options.fileSystemProvider.realPath(language_services_types_1.URI.parse(candidate));
                if (!realCandidate) {
                    return false;
                }
                const realDefinition = await this.options.fileSystemProvider.realPath(language_services_types_1.URI.parse(definition));
                if (!realDefinition) {
                    return false;
                }
                if (realCandidate === realDefinition) {
                    return true;
                }
            }
            catch {
                // Guess it really doesn't exist
            }
        }
        return false;
    }
}
exports.FindReferences = FindReferences;
//# sourceMappingURL=find-references.js.map

}),
"../language-services/dist/features/find-symbols.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FindSymbols = void 0;
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
class FindSymbols extends language_feature_1.LanguageFeature {
    findDocumentSymbols(document) {
        // While not IO-costly like findDocumentLinks, findDocumentSymbols is such a
        // hot path that the CPU time it takes to call findDocumentSymbols2 adds up.
        const cachedSymbols = this.cache.getCachedSymbols(document);
        if (cachedSymbols)
            return cachedSymbols;
        const stylesheet = this.ls.parseStylesheet(document);
        const symbols = this.getUpstreamLanguageServer(document).findDocumentSymbols2(document, stylesheet);
        const sassdoc = this.cache.getSassdoc(document);
        for (const doc of sassdoc) {
            switch (doc.context.type) {
                case "variable": {
                    const symbol = symbols.find((s) => s.kind === language_services_types_1.SymbolKind.Variable &&
                        s.name.replace("$", "") === doc.context.name);
                    if (symbol)
                        symbol.sassdoc = doc;
                    break;
                }
                case "mixin": {
                    const symbol = symbols.find((s) => s.kind === language_services_types_1.SymbolKind.Method && s.name === doc.context.name);
                    if (symbol)
                        symbol.sassdoc = doc;
                    break;
                }
                case "function": {
                    const symbol = symbols.find((s) => s.kind === language_services_types_1.SymbolKind.Function && s.name === doc.context.name);
                    if (symbol)
                        symbol.sassdoc = doc;
                    break;
                }
                case "placeholder": {
                    const symbol = symbols.find((s) => s.kind === language_services_types_1.SymbolKind.Class &&
                        s.name.startsWith("%") &&
                        s.name.substring(1) === doc.context.name);
                    if (symbol)
                        symbol.sassdoc = doc;
                    break;
                }
            }
        }
        this.cache.putCachedSymbols(document, symbols);
        return symbols;
    }
    findWorkspaceSymbols(query) {
        const documents = this.cache.documents();
        const result = [];
        for (const document of documents) {
            // This is the exception to the rule that this enabled check
            // should happen at the server edge. It's only at this point
            // we know if the document should be included or not.
            const config = this.languageConfiguration(document);
            if (config.workspaceSymbol.enabled) {
                const symbols = this.findDocumentSymbols(document);
                for (const symbol of symbols) {
                    if (query && !symbol.name.includes(query)) {
                        continue;
                    }
                    result.push({
                        name: symbol.name,
                        kind: symbol.kind,
                        location: language_services_types_1.Location.create(document.uri, symbol.selectionRange),
                    });
                }
            }
        }
        return result;
    }
}
exports.FindSymbols = FindSymbols;
//# sourceMappingURL=find-symbols.js.map

}),
"../language-services/dist/features/folding-ranges.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRanges = void 0;
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
class FoldingRanges extends language_feature_1.LanguageFeature {
    async getFoldingRanges(document, context) {
        const result = this.getUpstreamLanguageServer(document).getFoldingRanges(document, context);
        return result;
    }
}
exports.FoldingRanges = FoldingRanges;
//# sourceMappingURL=folding-ranges.js.map

}),
"../language-services/dist/features/selection-ranges.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRanges = void 0;
const language_feature_1 = __webpack_require__(/*! ../language-feature */ "../language-services/dist/language-feature.js");
class SelectionRanges extends language_feature_1.LanguageFeature {
    async getSelectionRanges(document, positions) {
        const stylesheet = this.ls.parseStylesheet(document);
        const result = this.getUpstreamLanguageServer(document).getSelectionRanges(document, positions, stylesheet);
        return result;
    }
}
exports.SelectionRanges = SelectionRanges;
//# sourceMappingURL=selection-ranges.js.map

}),
"../language-services/dist/language-feature.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LanguageFeature = void 0;
const url_1 = __webpack_require__(/*! url */ "url");
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const language_services_types_1 = __webpack_require__(/*! ./language-services-types */ "../language-services/dist/language-services-types.js");
const sass_1 = __webpack_require__(/*! ./utils/sass */ "../language-services/dist/utils/sass.js");
/**
 * Base class for features. Provides helpers to do the navigation
 * between modules.
 */
class LanguageFeature {
    get cache() {
        return this.ls.cache;
    }
    get configuration() {
        return this.ls.configuration;
    }
    get clientCapabilities() {
        return this.ls.clientCapabilities;
    }
    constructor(ls, options, _internal) {
        this.ls = ls;
        this.options = options;
        this._internal = _internal;
    }
    languageConfiguration(document) {
        switch (document.languageId) {
            case "css": {
                return this.ls.configuration.css;
            }
            case "sass": {
                return this.ls.configuration.sass;
            }
            case "scss": {
                return this.ls.configuration.scss;
            }
        }
        throw new Error(`Unsupported language ${document.languageId}`);
    }
    getUpstreamLanguageServer(document) {
        if (document.languageId === "scss") {
            return this._internal.scssLs;
        }
        if (document.languageId === "css") {
            return this._internal.cssLs;
        }
        return this._internal.sassLs;
    }
    getDocumentContext() {
        return {
            /**
             * @param ref Resolve this path from the context of the document
             * @returns The resolved path
             */
            resolveReference: (ref, base) => {
                if (ref.startsWith("/") &&
                    this.ls.configuration.workspace.workspaceRoot) {
                    return language_services_types_1.Utils.joinPath(this.ls.configuration.workspace.workspaceRoot, ref).toString(true);
                }
                try {
                    return (0, url_1.resolve)(base, ref);
                }
                catch {
                    return undefined;
                }
            },
        };
    }
    /**
     * Get the scanner implementation for the document's syntax.
     * @param document This document's text will be set as the scanner source
     * @param range Optional range passed to {@link TextDocument.getText}
     */
    getScanner(document, range) {
        const scanner = new vscode_css_languageservice_1.SassScanner({
            syntax: document.languageId === "sass" ? "indented" : "scss",
        });
        scanner.ignoreComment = false;
        scanner.setSource(document.getText(range));
        return scanner;
    }
    /**
     * Helper to do some kind of lookup for the import tree of a document.
     * Usually used to find the declaration of a symbol in the currently open document, but the callback can do whatever it likes.
     *
     * @param callback Gets called for each node in the import tree (may happen more than once for the same document). Return undefined if the callback should not add to the results.
     * @param initialDocument The starting point, typically the document that gets passed to the language feature function.
     * @returns The aggregated results of {@link callback}
     */
    async findInWorkspace(callback, initialDocument, options = { lazy: false, depth: 0 }) {
        return this.internalFindInWorkspace(callback, initialDocument, options);
    }
    async internalFindInWorkspace(callback, initialDocument, options, currentDocument = initialDocument, accumulatedPrefix = "", hide = [], show = [], visited = new Set(), depth = options.depth || 0) {
        if (visited.has(currentDocument.uri))
            return [];
        const callbackResult = await callback(currentDocument, accumulatedPrefix, hide, show);
        visited.add(currentDocument.uri);
        if (options.lazy && callbackResult)
            return Array.isArray(callbackResult) ? callbackResult : [callbackResult];
        const allLinks = await this.ls.findDocumentLinks(currentDocument);
        // Filter out links we want to follow
        const links = allLinks.filter((link) => {
            if (link.type === language_services_types_1.NodeType.Use) {
                // Don't follow uses beyond the first, since symbols from those aren't available to us anyway
                return depth === 0;
            }
            if (link.type === language_services_types_1.NodeType.Import) {
                // Don't follow imports, since the whole point here is to use the new module system
                return false;
            }
            return true;
        });
        if (links.length === 0) {
            if (typeof callbackResult === "undefined") {
                return [];
            }
            return Array.isArray(callbackResult) ? callbackResult : [callbackResult];
        }
        let result = [];
        // gather the results from the initial document if any
        if (Array.isArray(callbackResult)) {
            result.push(...callbackResult);
        }
        else if (callbackResult) {
            result.push(callbackResult);
        }
        for (const link of links) {
            if (!link.target || link.target === currentDocument.uri) {
                continue;
            }
            let next = this.cache.getDocument(link.target);
            if (!next) {
                try {
                    // If the linked document hasn't been parsed yet, create a TextDocument
                    const content = await this.options.fileSystemProvider.readFile(language_services_types_1.URI.parse(link.target));
                    const originalExt = link.target.slice(Math.max(0, link.target.lastIndexOf(".") + 1));
                    next = language_services_types_1.TextDocument.create(link.target, originalExt, 1, content);
                    this.ls.parseStylesheet(next); // add it to the cache
                }
                catch {
                    continue;
                }
            }
            let prefix = accumulatedPrefix;
            if (link.type === language_services_types_1.NodeType.Forward) {
                if (link.as) {
                    prefix += link.as;
                }
                if (link.hide) {
                    hide.push(...link.hide);
                }
                if (link.show) {
                    show.push(...link.show);
                }
            }
            const linkResult = await this.internalFindInWorkspace(callback, initialDocument, options, next, prefix, hide, show, visited, depth + 1);
            result.push(...linkResult);
        }
        return result;
    }
    getVariableValue(document, variable) {
        const offset = document.offsetAt(variable.selectionRange.start);
        const stylesheet = this.ls.parseStylesheet(document);
        const node = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, offset);
        if (node === null) {
            return null;
        }
        const parent = node.getParent();
        if (!parent) {
            return null;
        }
        if (parent instanceof language_services_types_1.VariableDeclaration) {
            return parent.getValue()?.getText() || null;
        }
        return null;
    }
    isSamePosition(a, b) {
        return a.line === b.line && a.character === b.character;
    }
    async findDefinitionSymbol(definition, name) {
        const definitionDocument = this.cache.getDocument(definition.uri);
        if (definitionDocument) {
            const dollarlessName = (0, sass_1.asDollarlessVariable)(name);
            const symbols = this.ls.findDocumentSymbols(definitionDocument);
            for (const symbol of symbols) {
                if (dollarlessName.includes((0, sass_1.asDollarlessVariable)(symbol.name)) &&
                    this.isSamePosition(definition.range.start, symbol.selectionRange.start)) {
                    return symbol;
                }
            }
        }
        return null;
    }
    getFileName(uri) {
        const lastSlash = uri.lastIndexOf("/");
        return lastSlash === -1 ? uri : uri.slice(Math.max(0, lastSlash + 1));
    }
    /**
     * Looks at {@link position} for a {@link VariableDeclaration} and returns its value as a string (or null if no value was found).
     * If the value is a reference to another variable this method will find that variable's definition and look for the value there instead.
     *
     * If the value is not found in 10 lookups, assumes a circular reference and returns null.
     */
    async findValue(document, position) {
        return this.internalFindValue(document, position);
    }
    async internalFindValue(document, position, depth = 0) {
        const MAX_VARIABLE_REFERENCE_LOOKUPS = 10;
        if (depth > MAX_VARIABLE_REFERENCE_LOOKUPS) {
            return null;
        }
        const stylesheet = this.ls.parseStylesheet(document);
        const offset = document.offsetAt(position);
        const variable = (0, vscode_css_languageservice_1.getNodeAtOffset)(stylesheet, offset);
        if (!(variable instanceof language_services_types_1.Variable)) {
            return null;
        }
        const parent = variable.getParent();
        if (parent instanceof language_services_types_1.VariableDeclaration) {
            const value = parent.getValue();
            if (!value) {
                return null;
            }
            if (value.getText().includes("$")) {
                return await this.internalFindValue(document, document.positionAt(value.offset), depth + 1);
            }
            return value.getText();
        }
        const valueString = variable.getText();
        const dollarIndex = valueString.indexOf("$"); // is this always true in indented?
        if (dollarIndex !== -1) {
            // If the variable at position references another variable,
            // find that variable's definition and look for the real value
            // there instead.
            const definition = await this.ls.findDefinition(document, position);
            if (definition) {
                const newDocument = this.cache.getDocument(definition.uri);
                if (!newDocument) {
                    return null;
                }
                if (newDocument.uri === document.uri) {
                    const definitionOffset = document.offsetAt(definition.range.start);
                    if (definitionOffset === variable.offset) {
                        // break early if we're looking up ourselves
                        return null;
                    }
                }
                return await this.internalFindValue(newDocument, definition.range.start, depth + 1);
            }
            else {
                return null;
            }
        }
        else {
            return valueString;
        }
    }
}
exports.LanguageFeature = LanguageFeature;
//# sourceMappingURL=language-feature.js.map

}),
"../language-services/dist/language-model-cache.js": (function (__unused_webpack_module, exports, __webpack_require__) {

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LanguageModelCache_languageModels, _LanguageModelCache_nModels, _LanguageModelCache_options, _LanguageModelCache_cleanupInterval, _LanguageModelCache_sassdocParser;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LanguageModelCache = void 0;
const sassdoc_parser_1 = __webpack_require__(/*! sassdoc-parser */ "../../node_modules/sassdoc-parser/dist/cjs/index.js");
const defaultCacheEvictInterval = 0; // default off to not leave an interval running in case of unit tests
class LanguageModelCache {
    constructor(options) {
        _LanguageModelCache_languageModels.set(this, {});
        _LanguageModelCache_nModels.set(this, 0);
        _LanguageModelCache_options.set(this, void 0);
        _LanguageModelCache_cleanupInterval.set(this, undefined);
        _LanguageModelCache_sassdocParser.set(this, new sassdoc_parser_1.Parser());
        __classPrivateFieldSet(this, _LanguageModelCache_options, {
            maxEntries: 10000,
            cleanupIntervalTimeInSeconds: defaultCacheEvictInterval,
            ...options,
        }, "f");
        const intervalTime = typeof __classPrivateFieldGet(this, _LanguageModelCache_options, "f").cleanupIntervalTimeInSeconds === "undefined"
            ? defaultCacheEvictInterval
            : __classPrivateFieldGet(this, _LanguageModelCache_options, "f").cleanupIntervalTimeInSeconds;
        if (intervalTime > 0) {
            __classPrivateFieldSet(this, _LanguageModelCache_cleanupInterval, setInterval(() => {
                var _a;
                const cutoffTime = Date.now() - intervalTime * 1000;
                const uris = Object.keys(__classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f"));
                for (const uri of uris) {
                    const languageModelInfo = __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[uri];
                    if (languageModelInfo.cTime < cutoffTime) {
                        delete __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[uri];
                        __classPrivateFieldSet(this, _LanguageModelCache_nModels, (_a = __classPrivateFieldGet(this, _LanguageModelCache_nModels, "f"), _a--, _a), "f");
                    }
                }
            }, intervalTime * 1000), "f");
        }
    }
    get(document) {
        var _a, _b;
        const version = document.version;
        const languageId = document.languageId;
        const languageModelInfo = __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri];
        if (languageModelInfo &&
            languageModelInfo.version === version &&
            languageModelInfo.languageId === languageId) {
            languageModelInfo.cTime = Date.now();
            return languageModelInfo.languageModel;
        }
        const languageModel = __classPrivateFieldGet(this, _LanguageModelCache_options, "f").sassLs.parseStylesheet(document);
        let sassdoc = [];
        try {
            const text = document.getText();
            sassdoc = __classPrivateFieldGet(this, _LanguageModelCache_sassdocParser, "f").parseStringSync(text);
        }
        catch {
            // do nothing
        }
        __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri] = {
            languageModel,
            version,
            languageId,
            cTime: Date.now(),
            document,
            sassdoc,
            links: undefined,
        };
        if (!languageModelInfo) {
            __classPrivateFieldSet(this, _LanguageModelCache_nModels, (_a = __classPrivateFieldGet(this, _LanguageModelCache_nModels, "f"), _a++, _a), "f");
        }
        if (__classPrivateFieldGet(this, _LanguageModelCache_nModels, "f") === __classPrivateFieldGet(this, _LanguageModelCache_options, "f").maxEntries) {
            let oldestTime = Number.MAX_VALUE;
            let oldestUri = null;
            for (const uri in __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")) {
                const languageModelInfo = __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[uri];
                if (languageModelInfo.cTime < oldestTime) {
                    oldestUri = uri;
                    oldestTime = languageModelInfo.cTime;
                }
            }
            if (oldestUri) {
                delete __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[oldestUri];
                __classPrivateFieldSet(this, _LanguageModelCache_nModels, (_b = __classPrivateFieldGet(this, _LanguageModelCache_nModels, "f"), _b--, _b), "f");
            }
        }
        return languageModel;
    }
    getDocument(uri) {
        return __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[uri]?.document;
    }
    getSassdoc(document) {
        return __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri]?.sassdoc || [];
    }
    documents() {
        return Object.values(__classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")).map((cached) => cached.document);
    }
    has(uri) {
        return typeof __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[uri] !== "undefined";
    }
    putResolvedLinks(document, links) {
        if (this.has(document.uri)) {
            __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri].links = links;
        }
    }
    getResolvedLinks(document) {
        if (this.has(document.uri)) {
            return __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri].links;
        }
    }
    putCachedSymbols(document, symbols) {
        if (this.has(document.uri)) {
            __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri].symbols = symbols;
        }
    }
    getCachedSymbols(document) {
        if (this.has(document.uri)) {
            return __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri].symbols;
        }
    }
    onDocumentChanged(document) {
        const version = document.version;
        const languageId = document.languageId;
        const languageModel = __classPrivateFieldGet(this, _LanguageModelCache_options, "f").sassLs.parseStylesheet(document);
        let sassdoc = [];
        try {
            const text = document.getText();
            sassdoc = __classPrivateFieldGet(this, _LanguageModelCache_sassdocParser, "f").parseStringSync(text);
        }
        catch {
            // do nothing
        }
        __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[document.uri] = {
            languageModel,
            version,
            languageId,
            cTime: Date.now(),
            document,
            sassdoc,
            symbols: undefined,
            links: undefined,
        };
    }
    onDocumentRemoved(document) {
        var _a;
        // @ts-expect-error That's what I'm counting on
        const uri = document.uri || document;
        if (__classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[uri]) {
            delete __classPrivateFieldGet(this, _LanguageModelCache_languageModels, "f")[uri];
            __classPrivateFieldSet(this, _LanguageModelCache_nModels, (_a = __classPrivateFieldGet(this, _LanguageModelCache_nModels, "f"), _a--, _a), "f");
        }
    }
    clearCache() {
        if (typeof __classPrivateFieldGet(this, _LanguageModelCache_cleanupInterval, "f") !== "undefined") {
            clearInterval(__classPrivateFieldGet(this, _LanguageModelCache_cleanupInterval, "f"));
            __classPrivateFieldSet(this, _LanguageModelCache_cleanupInterval, undefined, "f");
        }
        __classPrivateFieldSet(this, _LanguageModelCache_languageModels, {}, "f");
        __classPrivateFieldSet(this, _LanguageModelCache_nModels, 0, "f");
    }
}
exports.LanguageModelCache = LanguageModelCache;
_LanguageModelCache_languageModels = new WeakMap(), _LanguageModelCache_nModels = new WeakMap(), _LanguageModelCache_options = new WeakMap(), _LanguageModelCache_cleanupInterval = new WeakMap(), _LanguageModelCache_sassdocParser = new WeakMap();
//# sourceMappingURL=language-model-cache.js.map

}),
"../language-services/dist/language-services-types.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SignatureInformation = exports.ForwardVisibility = exports.Forward = exports.Use = exports.Import = exports.EachStatement = exports.ForStatement = exports.Declaration = exports.Identifier = exports.Variable = exports.MixinDeclaration = exports.MixinReference = exports.Function = exports.FunctionParameter = exports.FunctionDeclaration = exports.VariableDeclaration = exports.NodeType = exports.Node = exports.VersionedTextDocumentIdentifier = exports.TextDocumentEdit = exports.CodeActionKind = exports.TextEdit = exports.WorkspaceEdit = exports.DocumentLink = exports.DocumentHighlight = exports.CodeAction = exports.CodeActionContext = exports.Hover = exports.Location = exports.DocumentSymbol = exports.SymbolKind = exports.SymbolInformation = exports.InsertTextFormat = exports.CompletionItemTag = exports.CompletionList = exports.CompletionItemKind = exports.CompletionItem = exports.DiagnosticSeverity = exports.DiagnosticTag = exports.Diagnostic = exports.ColorPresentation = exports.ColorInformation = exports.Color = exports.MarkupKind = exports.Position = exports.Range = exports.TextDocument = exports.Utils = exports.URI = exports.FileType = void 0;
exports.SelectionRange = exports.FoldingRangeKind = exports.FoldingRange = exports.Marker = exports.Module = exports.TokenType = exports.ExtendsReference = void 0;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
Object.defineProperty(exports, "Node", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Node; } }));
Object.defineProperty(exports, "NodeType", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.NodeType; } }));
Object.defineProperty(exports, "FunctionDeclaration", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.FunctionDeclaration; } }));
Object.defineProperty(exports, "Function", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Function; } }));
Object.defineProperty(exports, "FunctionParameter", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.FunctionParameter; } }));
Object.defineProperty(exports, "MixinReference", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.MixinReference; } }));
Object.defineProperty(exports, "MixinDeclaration", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.MixinDeclaration; } }));
Object.defineProperty(exports, "Variable", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Variable; } }));
Object.defineProperty(exports, "VariableDeclaration", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.VariableDeclaration; } }));
Object.defineProperty(exports, "Identifier", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Identifier; } }));
Object.defineProperty(exports, "Declaration", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Declaration; } }));
Object.defineProperty(exports, "ForStatement", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.ForStatement; } }));
Object.defineProperty(exports, "EachStatement", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.EachStatement; } }));
Object.defineProperty(exports, "Import", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Import; } }));
Object.defineProperty(exports, "Use", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Use; } }));
Object.defineProperty(exports, "Forward", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Forward; } }));
Object.defineProperty(exports, "ForwardVisibility", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.ForwardVisibility; } }));
Object.defineProperty(exports, "ExtendsReference", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.ExtendsReference; } }));
Object.defineProperty(exports, "Module", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Module; } }));
Object.defineProperty(exports, "TokenType", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.TokenType; } }));
Object.defineProperty(exports, "Marker", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.Marker; } }));
Object.defineProperty(exports, "FoldingRange", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.FoldingRange; } }));
Object.defineProperty(exports, "FoldingRangeKind", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.FoldingRangeKind; } }));
Object.defineProperty(exports, "SelectionRange", ({ enumerable: true, get: function () { return vscode_css_languageservice_1.SelectionRange; } }));
const vscode_languageserver_textdocument_1 = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
Object.defineProperty(exports, "TextDocument", ({ enumerable: true, get: function () { return vscode_languageserver_textdocument_1.TextDocument; } }));
const vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
Object.defineProperty(exports, "Range", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.Range; } }));
Object.defineProperty(exports, "Position", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.Position; } }));
Object.defineProperty(exports, "MarkupKind", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.MarkupKind; } }));
Object.defineProperty(exports, "Color", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.Color; } }));
Object.defineProperty(exports, "ColorInformation", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.ColorInformation; } }));
Object.defineProperty(exports, "ColorPresentation", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.ColorPresentation; } }));
Object.defineProperty(exports, "SignatureInformation", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.SignatureInformation; } }));
Object.defineProperty(exports, "Diagnostic", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.Diagnostic; } }));
Object.defineProperty(exports, "DiagnosticTag", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.DiagnosticTag; } }));
Object.defineProperty(exports, "DiagnosticSeverity", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.DiagnosticSeverity; } }));
Object.defineProperty(exports, "CompletionItem", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.CompletionItem; } }));
Object.defineProperty(exports, "CompletionItemKind", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.CompletionItemKind; } }));
Object.defineProperty(exports, "CompletionList", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.CompletionList; } }));
Object.defineProperty(exports, "CompletionItemTag", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.CompletionItemTag; } }));
Object.defineProperty(exports, "InsertTextFormat", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.InsertTextFormat; } }));
Object.defineProperty(exports, "SymbolInformation", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.SymbolInformation; } }));
Object.defineProperty(exports, "SymbolKind", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.SymbolKind; } }));
Object.defineProperty(exports, "DocumentSymbol", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.DocumentSymbol; } }));
Object.defineProperty(exports, "Location", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.Location; } }));
Object.defineProperty(exports, "Hover", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.Hover; } }));
Object.defineProperty(exports, "CodeActionContext", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.CodeActionContext; } }));
Object.defineProperty(exports, "CodeAction", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.CodeAction; } }));
Object.defineProperty(exports, "DocumentHighlight", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.DocumentHighlight; } }));
Object.defineProperty(exports, "DocumentLink", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.DocumentLink; } }));
Object.defineProperty(exports, "WorkspaceEdit", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.WorkspaceEdit; } }));
Object.defineProperty(exports, "TextEdit", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.TextEdit; } }));
Object.defineProperty(exports, "CodeActionKind", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.CodeActionKind; } }));
Object.defineProperty(exports, "TextDocumentEdit", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.TextDocumentEdit; } }));
Object.defineProperty(exports, "VersionedTextDocumentIdentifier", ({ enumerable: true, get: function () { return vscode_languageserver_types_1.VersionedTextDocumentIdentifier; } }));
const vscode_uri_1 = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
Object.defineProperty(exports, "URI", ({ enumerable: true, get: function () { return vscode_uri_1.URI; } }));
Object.defineProperty(exports, "Utils", ({ enumerable: true, get: function () { return vscode_uri_1.Utils; } }));
var FileType;
(function (FileType) {
    FileType[FileType["Unknown"] = 0] = "Unknown";
    FileType[FileType["File"] = 1] = "File";
    FileType[FileType["Directory"] = 2] = "Directory";
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType || (exports.FileType = FileType = {}));
//# sourceMappingURL=language-services-types.js.map

}),
"../language-services/dist/language-services.js": (function (__unused_webpack_module, exports, __webpack_require__) {

var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _LanguageServiceImpl_codeActions, _LanguageServiceImpl_doComplete, _LanguageServiceImpl_doDiagnostics, _LanguageServiceImpl_doHover, _LanguageServiceImpl_doRename, _LanguageServiceImpl_doSignatureHelp, _LanguageServiceImpl_findColors, _LanguageServiceImpl_findDefinition, _LanguageServiceImpl_findDocumentHighlights, _LanguageServiceImpl_findDocumentLinks, _LanguageServiceImpl_findReferences, _LanguageServiceImpl_findSymbols, _LanguageServiceImpl_foldingRanges, _LanguageServiceImpl_selectionRanges, _LanguageServiceImpl_configuration, _LanguageServiceImpl_cache, _LanguageServiceImpl_clientCapabilities, _LanguageServiceImpl_fs, _LanguageServiceImpl_cssLs, _LanguageServiceImpl_sassLs, _LanguageServiceImpl_scssLs;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileType = exports.defaultConfiguration = void 0;
exports.getLanguageService = getLanguageService;
const vscode_css_languageservice_1 = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");
const lodash_merge_1 = __importDefault(__webpack_require__(/*! lodash.merge */ "../../node_modules/lodash.merge/index.js"));
const configuration_1 = __webpack_require__(/*! ./configuration */ "../language-services/dist/configuration.js");
Object.defineProperty(exports, "defaultConfiguration", ({ enumerable: true, get: function () { return configuration_1.defaultConfiguration; } }));
const code_actions_1 = __webpack_require__(/*! ./features/code-actions */ "../language-services/dist/features/code-actions.js");
const do_complete_1 = __webpack_require__(/*! ./features/do-complete */ "../language-services/dist/features/do-complete.js");
const do_diagnostics_1 = __webpack_require__(/*! ./features/do-diagnostics */ "../language-services/dist/features/do-diagnostics.js");
const do_hover_1 = __webpack_require__(/*! ./features/do-hover */ "../language-services/dist/features/do-hover.js");
const do_rename_1 = __webpack_require__(/*! ./features/do-rename */ "../language-services/dist/features/do-rename.js");
const do_signature_help_1 = __webpack_require__(/*! ./features/do-signature-help */ "../language-services/dist/features/do-signature-help.js");
const find_colors_1 = __webpack_require__(/*! ./features/find-colors */ "../language-services/dist/features/find-colors.js");
const find_definition_1 = __webpack_require__(/*! ./features/find-definition */ "../language-services/dist/features/find-definition.js");
const find_document_highlights_1 = __webpack_require__(/*! ./features/find-document-highlights */ "../language-services/dist/features/find-document-highlights.js");
const find_document_links_1 = __webpack_require__(/*! ./features/find-document-links */ "../language-services/dist/features/find-document-links.js");
const find_references_1 = __webpack_require__(/*! ./features/find-references */ "../language-services/dist/features/find-references.js");
const find_symbols_1 = __webpack_require__(/*! ./features/find-symbols */ "../language-services/dist/features/find-symbols.js");
const folding_ranges_1 = __webpack_require__(/*! ./features/folding-ranges */ "../language-services/dist/features/folding-ranges.js");
const selection_ranges_1 = __webpack_require__(/*! ./features/selection-ranges */ "../language-services/dist/features/selection-ranges.js");
const language_model_cache_1 = __webpack_require__(/*! ./language-model-cache */ "../language-services/dist/language-model-cache.js");
const language_services_types_1 = __webpack_require__(/*! ./language-services-types */ "../language-services/dist/language-services-types.js");
Object.defineProperty(exports, "FileType", ({ enumerable: true, get: function () { return language_services_types_1.FileType; } }));
const fs_provider_1 = __webpack_require__(/*! ./utils/fs-provider */ "../language-services/dist/utils/fs-provider.js");
function getLanguageService(options) {
    return new LanguageServiceImpl(options);
}
class LanguageServiceImpl {
    get configuration() {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_configuration, "f");
    }
    get cache() {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_cache, "f");
    }
    get clientCapabilities() {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_clientCapabilities, "f");
    }
    get fs() {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_fs, "f");
    }
    constructor(options) {
        _LanguageServiceImpl_codeActions.set(this, void 0);
        _LanguageServiceImpl_doComplete.set(this, void 0);
        _LanguageServiceImpl_doDiagnostics.set(this, void 0);
        _LanguageServiceImpl_doHover.set(this, void 0);
        _LanguageServiceImpl_doRename.set(this, void 0);
        _LanguageServiceImpl_doSignatureHelp.set(this, void 0);
        _LanguageServiceImpl_findColors.set(this, void 0);
        _LanguageServiceImpl_findDefinition.set(this, void 0);
        _LanguageServiceImpl_findDocumentHighlights.set(this, void 0);
        _LanguageServiceImpl_findDocumentLinks.set(this, void 0);
        _LanguageServiceImpl_findReferences.set(this, void 0);
        _LanguageServiceImpl_findSymbols.set(this, void 0);
        _LanguageServiceImpl_foldingRanges.set(this, void 0);
        _LanguageServiceImpl_selectionRanges.set(this, void 0);
        _LanguageServiceImpl_configuration.set(this, configuration_1.defaultConfiguration);
        _LanguageServiceImpl_cache.set(this, void 0);
        _LanguageServiceImpl_clientCapabilities.set(this, void 0);
        _LanguageServiceImpl_fs.set(this, void 0);
        _LanguageServiceImpl_cssLs.set(this, void 0);
        _LanguageServiceImpl_sassLs.set(this, void 0);
        _LanguageServiceImpl_scssLs.set(this, void 0);
        __classPrivateFieldSet(this, _LanguageServiceImpl_clientCapabilities, options.clientCapabilities, "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_fs, options.fileSystemProvider, "f");
        const vscodeLsOptions = {
            clientCapabilities: this.clientCapabilities,
            fileSystemProvider: (0, fs_provider_1.mapFsProviders)(options.fileSystemProvider),
        };
        __classPrivateFieldSet(this, _LanguageServiceImpl_cssLs, (0, vscode_css_languageservice_1.getCSSLanguageService)(vscodeLsOptions), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_sassLs, (0, vscode_css_languageservice_1.getSassLanguageService)(vscodeLsOptions), "f");
        // The server code is the same as sassLs, but separate on syntax in case the user has different settings
        __classPrivateFieldSet(this, _LanguageServiceImpl_scssLs, (0, vscode_css_languageservice_1.getSassLanguageService)(vscodeLsOptions), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_cache, new language_model_cache_1.LanguageModelCache({
            sassLs: __classPrivateFieldGet(this, _LanguageServiceImpl_sassLs, "f"),
            ...options.languageModelCache,
        }), "f");
        const internal = {
            cssLs: __classPrivateFieldGet(this, _LanguageServiceImpl_cssLs, "f"),
            sassLs: __classPrivateFieldGet(this, _LanguageServiceImpl_sassLs, "f"),
            scssLs: __classPrivateFieldGet(this, _LanguageServiceImpl_scssLs, "f"),
        };
        __classPrivateFieldSet(this, _LanguageServiceImpl_codeActions, new code_actions_1.CodeActions(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_doComplete, new do_complete_1.DoComplete(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_doDiagnostics, new do_diagnostics_1.DoDiagnostics(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_doHover, new do_hover_1.DoHover(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_doRename, new do_rename_1.DoRename(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_doSignatureHelp, new do_signature_help_1.DoSignatureHelp(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_findColors, new find_colors_1.FindColors(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_findDefinition, new find_definition_1.FindDefinition(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_findDocumentHighlights, new find_document_highlights_1.FindDocumentHighlights(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_findDocumentLinks, new find_document_links_1.FindDocumentLinks(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_findReferences, new find_references_1.FindReferences(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_findSymbols, new find_symbols_1.FindSymbols(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_foldingRanges, new folding_ranges_1.FoldingRanges(this, options, internal), "f");
        __classPrivateFieldSet(this, _LanguageServiceImpl_selectionRanges, new selection_ranges_1.SelectionRanges(this, options, internal), "f");
    }
    configure(configuration) {
        __classPrivateFieldSet(this, _LanguageServiceImpl_configuration, (0, lodash_merge_1.default)(configuration_1.defaultConfiguration, configuration), "f");
        __classPrivateFieldGet(this, _LanguageServiceImpl_sassLs, "f").configure({
            validate: this.configuration.sass.diagnostics.enabled,
            lint: this.configuration.sass.diagnostics.lint,
            completion: this.configuration.sass.completion,
            hover: this.configuration.sass.hover,
            importAliases: this.configuration.workspace.importAliases,
            loadPaths: this.configuration.workspace.loadPaths,
        });
        __classPrivateFieldGet(this, _LanguageServiceImpl_scssLs, "f").configure({
            validate: this.configuration.scss.diagnostics.enabled,
            lint: this.configuration.scss.diagnostics.lint,
            completion: this.configuration.scss.completion,
            hover: this.configuration.scss.hover,
            importAliases: this.configuration.workspace.importAliases,
            loadPaths: this.configuration.workspace.loadPaths,
        });
        __classPrivateFieldGet(this, _LanguageServiceImpl_cssLs, "f").configure({
            validate: this.configuration.css.diagnostics.enabled,
            lint: this.configuration.css.diagnostics.lint,
            completion: this.configuration.css.completion,
            hover: this.configuration.css.hover,
            importAliases: this.configuration.workspace.importAliases,
            loadPaths: this.configuration.workspace.loadPaths,
        });
    }
    setDataProviders(providers, options = { useDefaultProviders: true }) {
        __classPrivateFieldGet(this, _LanguageServiceImpl_cssLs, "f").setDataProviders(options.useDefaultProviders, providers);
        __classPrivateFieldGet(this, _LanguageServiceImpl_sassLs, "f").setDataProviders(options.useDefaultProviders, providers);
        __classPrivateFieldGet(this, _LanguageServiceImpl_scssLs, "f").setDataProviders(options.useDefaultProviders, providers);
    }
    parseStylesheet(document) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_cache, "f").get(document);
    }
    doComplete(document, position) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_doComplete, "f").doComplete(document, position);
    }
    doDiagnostics(document) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_doDiagnostics, "f").doDiagnostics(document);
    }
    doHover(document, position) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_doHover, "f").doHover(document, position);
    }
    doRename(document, position, newName) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_doRename, "f").doRename(document, position, newName);
    }
    doSignatureHelp(document, position) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_doSignatureHelp, "f").doSignatureHelp(document, position);
    }
    findColors(document) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findColors, "f").findColors(document);
    }
    findDefinition(document, position) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findDefinition, "f").findDefinition(document, position);
    }
    findDocumentHighlights(document, position) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findDocumentHighlights, "f").findDocumentHighlights(document, position);
    }
    async findDocumentLinks(document) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findDocumentLinks, "f").findDocumentLinks(document);
    }
    findDocumentSymbols(document) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findSymbols, "f").findDocumentSymbols(document);
    }
    async findReferences(document, position, context) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findReferences, "f").findReferences(document, position, context);
    }
    findWorkspaceSymbols(query) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findSymbols, "f").findWorkspaceSymbols(query);
    }
    getCachedTextDocument(uri) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_cache, "f").getDocument(uri.toString());
    }
    getColorPresentations(document, color, range) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_findColors, "f").getColorPresentations(document, color, range);
    }
    getCodeActions(document, range, context) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_codeActions, "f").getCodeActions(document, range, context);
    }
    getFoldingRanges(document, context) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_foldingRanges, "f").getFoldingRanges(document, context);
    }
    getSelectionRanges(document, positions) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_selectionRanges, "f").getSelectionRanges(document, positions);
    }
    onDocumentChanged(document) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_cache, "f").onDocumentChanged(document);
    }
    onDocumentRemoved(document) {
        __classPrivateFieldGet(this, _LanguageServiceImpl_cache, "f").onDocumentRemoved(document);
    }
    prepareRename(document, position) {
        return __classPrivateFieldGet(this, _LanguageServiceImpl_doRename, "f").prepareRename(document, position);
    }
    clearCache() {
        __classPrivateFieldGet(this, _LanguageServiceImpl_cache, "f").clearCache();
    }
}
_LanguageServiceImpl_codeActions = new WeakMap(), _LanguageServiceImpl_doComplete = new WeakMap(), _LanguageServiceImpl_doDiagnostics = new WeakMap(), _LanguageServiceImpl_doHover = new WeakMap(), _LanguageServiceImpl_doRename = new WeakMap(), _LanguageServiceImpl_doSignatureHelp = new WeakMap(), _LanguageServiceImpl_findColors = new WeakMap(), _LanguageServiceImpl_findDefinition = new WeakMap(), _LanguageServiceImpl_findDocumentHighlights = new WeakMap(), _LanguageServiceImpl_findDocumentLinks = new WeakMap(), _LanguageServiceImpl_findReferences = new WeakMap(), _LanguageServiceImpl_findSymbols = new WeakMap(), _LanguageServiceImpl_foldingRanges = new WeakMap(), _LanguageServiceImpl_selectionRanges = new WeakMap(), _LanguageServiceImpl_configuration = new WeakMap(), _LanguageServiceImpl_cache = new WeakMap(), _LanguageServiceImpl_clientCapabilities = new WeakMap(), _LanguageServiceImpl_fs = new WeakMap(), _LanguageServiceImpl_cssLs = new WeakMap(), _LanguageServiceImpl_sassLs = new WeakMap(), _LanguageServiceImpl_scssLs = new WeakMap();
//# sourceMappingURL=language-services.js.map

}),
"../language-services/dist/utils/fs-provider.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapFsProviders = mapFsProviders;
const language_services_types_1 = __webpack_require__(/*! ../language-services-types */ "../language-services/dist/language-services-types.js");
function mapFsProviders(ours) {
    const theirs = {
        async stat(uri) {
            try {
                const result = await ours.stat(language_services_types_1.URI.parse(uri));
                return result;
            }
            catch (error) {
                if (error.code !== "ENOENT") {
                    throw error;
                }
                return {
                    type: language_services_types_1.FileType.Unknown,
                    ctime: -1,
                    mtime: -1,
                    size: -1,
                };
            }
        },
        async readDirectory(uri) {
            const dir = await ours.readDirectory(language_services_types_1.URI.parse(uri));
            const result = dir.map(([uri, info]) => [
                uri,
                info,
            ]);
            return result;
        },
        getContent(uri, encoding) {
            return ours.readFile(language_services_types_1.URI.parse(uri), encoding);
        },
    };
    return theirs;
}
//# sourceMappingURL=fs-provider.js.map

}),
"../language-services/dist/utils/sass.js": (function (__unused_webpack_module, exports) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.asDollarlessVariable = asDollarlessVariable;
/** Strips the dollar prefix off a variable name */
function asDollarlessVariable(variable) {
    return variable.replace(/^\$/, "");
}
//# sourceMappingURL=sass.js.map

}),
"../language-services/dist/utils/sassdoc.js": (function (__unused_webpack_module, exports) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applySassDoc = applySassDoc;
function applySassDoc(symbol) {
    if (!symbol.sassdoc) {
        return "";
    }
    let description = "";
    const doc = symbol.sassdoc;
    if (doc.description) {
        description += doc.description.trimStart();
    }
    // Make it visible early on if something is marked as deprecated
    if (doc.deprecated) {
        description += `\n\n@deprecated ${doc.deprecated}`;
    }
    if (doc.name && doc.name !== symbol.name) {
        description += `\n\n@name ${doc.name}`;
    }
    // Function and mixin parameters, listed one per line like JSDoc
    if (doc.parameter) {
        for (const parameter of doc.parameter) {
            description += "\n\n@param";
            if (parameter.type) {
                description += ` ${parameter.type}`;
            }
            description += `\`${parameter.name}\``;
            if (parameter.default) {
                description += ` [${parameter.default}]`;
            }
            if (parameter.description) {
                description += ` - ${parameter.description}`;
            }
        }
    }
    // Type is for standalone variable annotation
    // Type and Parameters is likely mutually exclusive
    if (doc.type) {
        description += `\n\n@type ${doc.type}`;
    }
    // Documents the properties of a map
    if (doc.property) {
        for (const prop of doc.property) {
            description += "\n\n@prop";
            if (prop.type) {
                description += ` {${prop.type}}`;
            }
            description += `\`${prop.path}\``;
            if (prop.default) {
                description += ` [${prop.default}]`;
            }
            if (prop.description) {
                description += ` - ${prop.description}`;
            }
        }
    }
    // For mixins that take @content
    if (doc.content) {
        description += `\n\n@content ${doc.content}`;
    }
    // Describes mixin output
    if (doc.output) {
        description += `\n\n@output ${doc.output}`;
    }
    // Describes function return values with a type and optional description
    if (doc.return) {
        description += `\n\n@return ${doc.return.type}${doc.return.description ? ` - ${doc.return.description}` : ""}`;
    }
    if (doc.throws) {
        for (const thrown of doc.throws) {
            description += `\n\n@throw ${thrown}`;
        }
    }
    if (doc.require && doc.require.length > 0) {
        for (const requirement of doc.require) {
            description += "\n\n@require";
            if (requirement.type) {
                description += ` {${requirement.type}}`;
            }
            description += `\`${requirement.name}\``;
            if (requirement.description) {
                description += ` - ${requirement.description}`;
            }
            if (requirement.url) {
                description += ` ${requirement.url}`;
            }
        }
    }
    if (doc.alias) {
        const aliases = typeof doc.alias === "string" ? [doc.alias] : doc.alias;
        for (const alias of aliases) {
            description += `\n\n@alias \`${alias}\``;
        }
    }
    // Hint to related variables, functions, or mixins
    if (doc.see) {
        for (const see of doc.see) {
            description += `\n\n@see \`${see.name}\``;
        }
    }
    if (doc.since) {
        for (const since of doc.since) {
            description += `\n\n@since ${since.version}`;
            if (since.description) {
                description += ` - ${since.description}`;
            }
        }
    }
    // Show credit to authors
    if (doc.author) {
        for (const author of doc.author) {
            description += `\n\n@author ${author}`;
        }
    }
    if (doc.link) {
        for (const link of doc.link) {
            description += link.caption
                ? `\n\n[${link.caption}](${link.url})`
                : `\n\n${link.url}`;
        }
    }
    if (doc.example) {
        for (const example of doc.example) {
            description += "\n\n@example";
            if (example.description) {
                description += ` ${example.description}`;
            }
            description += [
                "\n",
                `\`\`\`${example.type || "scss"}`,
                example.code,
                "```",
            ].join("\n");
        }
    }
    if (doc.access === "private") {
        description += `\n\n@access private`;
    }
    const groups = doc.group?.filter((g) => g !== "undefined");
    if (groups && groups.length > 0) {
        description += `\n\n@group ${groups.join(", ")}`;
    }
    if (doc.todo) {
        description += `\n\n@todo ${doc.todo}`;
    }
    return description;
}
//# sourceMappingURL=sassdoc.js.map

}),
"../vscode-css-languageservice/lib/esm/cssLanguageService.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AbstractDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.AbstractDeclaration; },
  AtApplyRule: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.AtApplyRule; },
  AttributeSelector: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.AttributeSelector; },
  BinaryExpression: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.BinaryExpression; },
  BodyDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.BodyDeclaration; },
  ClientCapabilities: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.ClientCapabilities; },
  CodeAction: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CodeAction; },
  CodeActionContext: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CodeActionContext; },
  CodeActionKind: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CodeActionKind; },
  Color: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Color; },
  ColorInformation: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.ColorInformation; },
  ColorPresentation: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.ColorPresentation; },
  Command: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Command; },
  CompletionItem: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionItem; },
  CompletionItemKind: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionItemKind; },
  CompletionItemTag: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionItemTag; },
  CompletionList: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionList; },
  Container: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Container; },
  CustomPropertyDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.CustomPropertyDeclaration; },
  CustomPropertySet: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.CustomPropertySet; },
  Declaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Declaration; },
  Declarations: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Declarations; },
  Diagnostic: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Diagnostic; },
  DiagnosticSeverity: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DiagnosticSeverity; },
  Document: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Document; },
  DocumentHighlight: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentHighlight; },
  DocumentHighlightKind: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentHighlightKind; },
  DocumentLink: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentLink; },
  DocumentSymbol: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentSymbol; },
  DocumentUri: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentUri; },
  EachStatement: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.EachStatement; },
  ElseStatement: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ElseStatement; },
  Expression: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Expression; },
  ExtendsReference: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ExtendsReference; },
  FileType: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.FileType; },
  FoldingRange: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.FoldingRange; },
  FoldingRangeKind: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.FoldingRangeKind; },
  FontFace: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.FontFace; },
  ForStatement: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ForStatement; },
  Forward: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Forward; },
  ForwardVisibility: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ForwardVisibility; },
  Function: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Function; },
  FunctionArgument: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.FunctionArgument; },
  FunctionDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.FunctionDeclaration; },
  FunctionParameter: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.FunctionParameter; },
  GuardCondition: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.GuardCondition; },
  HexColorValue: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.HexColorValue; },
  Hover: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Hover; },
  Identifier: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Identifier; },
  IfStatement: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.IfStatement; },
  Import: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Import; },
  InsertTextFormat: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.InsertTextFormat; },
  Interpolation: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Interpolation; },
  Invocation: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Invocation; },
  Keyframe: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Keyframe; },
  KeyframeSelector: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.KeyframeSelector; },
  Layer: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Layer; },
  LessGuard: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.LessGuard; },
  Level: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Level; },
  ListEntry: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ListEntry; },
  Location: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Location; },
  MarkedString: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.MarkedString; },
  Marker: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Marker; },
  MarkupContent: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.MarkupContent; },
  MarkupKind: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.MarkupKind; },
  Media: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Media; },
  MediaCondition: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.MediaCondition; },
  MediaFeature: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.MediaFeature; },
  MediaQuery: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.MediaQuery; },
  Medialist: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Medialist; },
  MixinContentDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.MixinContentDeclaration; },
  MixinContentReference: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.MixinContentReference; },
  MixinDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.MixinDeclaration; },
  MixinReference: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.MixinReference; },
  Module: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Module; },
  ModuleConfiguration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ModuleConfiguration; },
  Namespace: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Namespace; },
  NestedProperties: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.NestedProperties; },
  Node: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Node; },
  NodeType: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.NodeType; },
  Nodelist: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Nodelist; },
  NumericValue: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.NumericValue; },
  Operator: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Operator; },
  Page: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Page; },
  PageBoxMarginBox: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.PageBoxMarginBox; },
  ParseErrorCollector: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ParseErrorCollector; },
  Position: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Position; },
  Property: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Property; },
  PropertyAtRule: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.PropertyAtRule; },
  Range: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Range; },
  RatioValue: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.RatioValue; },
  ReferenceType: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ReferenceType; },
  RuleSet: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.RuleSet; },
  SassScanner: function() { return /* reexport safe */ _parser_sassScanner__WEBPACK_IMPORTED_MODULE_15__.SassScanner; },
  Scanner: function() { return /* reexport safe */ _parser_cssScanner__WEBPACK_IMPORTED_MODULE_14__.Scanner; },
  SelectionRange: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.SelectionRange; },
  Selector: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Selector; },
  SimpleSelector: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.SimpleSelector; },
  Stylesheet: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Stylesheet; },
  Supports: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Supports; },
  SupportsCondition: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.SupportsCondition; },
  SymbolInformation: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.SymbolInformation; },
  SymbolKind: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.SymbolKind; },
  Term: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Term; },
  TextDocument: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.TextDocument; },
  TextDocumentEdit: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.TextDocumentEdit; },
  TextEdit: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.TextEdit; },
  TokenType: function() { return /* reexport safe */ _parser_cssScanner__WEBPACK_IMPORTED_MODULE_14__.TokenType; },
  UnicodeRange: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.UnicodeRange; },
  UnknownAtRule: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.UnknownAtRule; },
  Use: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Use; },
  Variable: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.Variable; },
  VariableDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.VariableDeclaration; },
  VersionedTextDocumentIdentifier: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.VersionedTextDocumentIdentifier; },
  ViewPort: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.ViewPort; },
  WhileStatement: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.WhileStatement; },
  WorkspaceEdit: function() { return /* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit; },
  getCSSLanguageService: function() { return getCSSLanguageService; },
  getDefaultCSSDataProvider: function() { return getDefaultCSSDataProvider; },
  getNodeAtOffset: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.getNodeAtOffset; },
  getNodePath: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.getNodePath; },
  getParentDeclaration: function() { return /* reexport safe */ _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__.getParentDeclaration; },
  getSassLanguageService: function() { return getSassLanguageService; },
  newCSSDataProvider: function() { return newCSSDataProvider; }
});
/* ESM import */var _parser_cssParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/cssParser */ "../vscode-css-languageservice/lib/esm/parser/cssParser.js");
/* ESM import */var _services_cssCompletion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/cssCompletion */ "../vscode-css-languageservice/lib/esm/services/cssCompletion.js");
/* ESM import */var _services_cssHover__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/cssHover */ "../vscode-css-languageservice/lib/esm/services/cssHover.js");
/* ESM import */var _services_cssNavigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/cssNavigation */ "../vscode-css-languageservice/lib/esm/services/cssNavigation.js");
/* ESM import */var _services_cssCodeActions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/cssCodeActions */ "../vscode-css-languageservice/lib/esm/services/cssCodeActions.js");
/* ESM import */var _services_cssValidation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/cssValidation */ "../vscode-css-languageservice/lib/esm/services/cssValidation.js");
/* ESM import */var _parser_sassParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser/sassParser */ "../vscode-css-languageservice/lib/esm/parser/sassParser.js");
/* ESM import */var _services_sassCompletion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/sassCompletion */ "../vscode-css-languageservice/lib/esm/services/sassCompletion.js");
/* ESM import */var _services_cssFolding__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/cssFolding */ "../vscode-css-languageservice/lib/esm/services/cssFolding.js");
/* ESM import */var _languageFacts_dataManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./languageFacts/dataManager */ "../vscode-css-languageservice/lib/esm/languageFacts/dataManager.js");
/* ESM import */var _languageFacts_dataProvider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./languageFacts/dataProvider */ "../vscode-css-languageservice/lib/esm/languageFacts/dataProvider.js");
/* ESM import */var _services_cssSelectionRange__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/cssSelectionRange */ "../vscode-css-languageservice/lib/esm/services/cssSelectionRange.js");
/* ESM import */var _services_sassNavigation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./services/sassNavigation */ "../vscode-css-languageservice/lib/esm/services/sassNavigation.js");
/* ESM import */var _data_webCustomData__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./data/webCustomData */ "../vscode-css-languageservice/lib/esm/data/webCustomData.js");
/* ESM import */var _parser_cssScanner__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parser/cssScanner */ "../vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* ESM import */var _parser_sassScanner__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./parser/sassScanner */ "../vscode-css-languageservice/lib/esm/parser/sassScanner.js");
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



















function getDefaultCSSDataProvider() {
    return newCSSDataProvider(_data_webCustomData__WEBPACK_IMPORTED_MODULE_13__.cssData);
}
function newCSSDataProvider(data) {
    return new _languageFacts_dataProvider__WEBPACK_IMPORTED_MODULE_10__.CSSDataProvider(data);
}
function createFacade(parser, completion, hover, navigation, codeActions, validation, cssDataManager) {
    return {
        configure: (settings) => {
            validation.configure(settings);
            completion.configure(settings?.completion);
            hover.configure(settings?.hover);
            navigation.configure(settings?.importAliases, settings?.loadPaths);
        },
        setDataProviders: cssDataManager.setDataProviders.bind(cssDataManager),
        doValidation: validation.doValidation.bind(validation),
        parseStylesheet: parser.parseStylesheet.bind(parser),
        doComplete: completion.doComplete.bind(completion),
        doComplete2: completion.doComplete2.bind(completion),
        setCompletionParticipants: completion.setCompletionParticipants.bind(completion),
        doHover: hover.doHover.bind(hover),
        findDefinition: navigation.findDefinition.bind(navigation),
        findReferences: navigation.findReferences.bind(navigation),
        findDocumentHighlights: navigation.findDocumentHighlights.bind(navigation),
        findDocumentLinks: navigation.findDocumentLinks.bind(navigation),
        findDocumentLinks2: navigation.findDocumentLinks2.bind(navigation),
        findDocumentSymbols: navigation.findSymbolInformations.bind(navigation),
        findDocumentSymbols2: navigation.findDocumentSymbols.bind(navigation),
        doCodeActions: codeActions.doCodeActions.bind(codeActions),
        doCodeActions2: codeActions.doCodeActions2.bind(codeActions),
        findDocumentColors: navigation.findDocumentColors.bind(navigation),
        getColorPresentations: navigation.getColorPresentations.bind(navigation),
        prepareRename: navigation.prepareRename.bind(navigation),
        doRename: navigation.doRename.bind(navigation),
        getFoldingRanges: _services_cssFolding__WEBPACK_IMPORTED_MODULE_8__.getFoldingRanges,
        getSelectionRanges: _services_cssSelectionRange__WEBPACK_IMPORTED_MODULE_11__.getSelectionRanges,
    };
}
const defaultLanguageServiceOptions = {};
function getCSSLanguageService(options = defaultLanguageServiceOptions) {
    const cssDataManager = new _languageFacts_dataManager__WEBPACK_IMPORTED_MODULE_9__.CSSDataManager(options);
    return createFacade(new _parser_cssParser__WEBPACK_IMPORTED_MODULE_0__.Parser(), new _services_cssCompletion__WEBPACK_IMPORTED_MODULE_1__.CSSCompletion(null, options, cssDataManager), new _services_cssHover__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_cssNavigation__WEBPACK_IMPORTED_MODULE_3__.CSSNavigation(options && options.fileSystemProvider, false), new _services_cssCodeActions__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}
function getSassLanguageService(options = defaultLanguageServiceOptions) {
    const cssDataManager = new _languageFacts_dataManager__WEBPACK_IMPORTED_MODULE_9__.CSSDataManager(options);
    return createFacade(new _parser_sassParser__WEBPACK_IMPORTED_MODULE_6__.SassParser(), new _services_sassCompletion__WEBPACK_IMPORTED_MODULE_7__.SassCompletion(options, cssDataManager), new _services_cssHover__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_sassNavigation__WEBPACK_IMPORTED_MODULE_12__.SassNavigation(options && options.fileSystemProvider), new _services_cssCodeActions__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}
//# sourceMappingURL=cssLanguageService.js.map

}),
"../vscode-css-languageservice/lib/esm/cssLanguageTypes.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ClientCapabilities: function() { return ClientCapabilities; },
  CodeAction: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeAction; },
  CodeActionContext: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeActionContext; },
  CodeActionKind: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind; },
  Color: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Color; },
  ColorInformation: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.ColorInformation; },
  ColorPresentation: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.ColorPresentation; },
  Command: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Command; },
  CompletionItem: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItem; },
  CompletionItemKind: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind; },
  CompletionItemTag: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag; },
  CompletionList: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionList; },
  Diagnostic: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Diagnostic; },
  DiagnosticSeverity: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity; },
  DocumentHighlight: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlight; },
  DocumentHighlightKind: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind; },
  DocumentLink: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentLink; },
  DocumentSymbol: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentSymbol; },
  DocumentUri: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentUri; },
  FileType: function() { return FileType; },
  FoldingRange: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.FoldingRange; },
  FoldingRangeKind: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.FoldingRangeKind; },
  Hover: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Hover; },
  InsertTextFormat: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat; },
  Location: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Location; },
  MarkedString: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkedString; },
  MarkupContent: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupContent; },
  MarkupKind: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind; },
  Position: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position; },
  Range: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range; },
  SelectionRange: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SelectionRange; },
  SymbolInformation: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolInformation; },
  SymbolKind: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind; },
  TextDocument: function() { return /* reexport safe */ vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__.TextDocument; },
  TextDocumentEdit: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextDocumentEdit; },
  TextEdit: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextEdit; },
  VersionedTextDocumentIdentifier: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.VersionedTextDocumentIdentifier; },
  WorkspaceEdit: function() { return /* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.WorkspaceEdit; }
});
/* ESM import */var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* ESM import */var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




var ClientCapabilities;
(function (ClientCapabilities) {
    ClientCapabilities.LATEST = {
        textDocument: {
            completion: {
                completionItem: {
                    documentationFormat: [vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.PlainText],
                },
            },
            hover: {
                contentFormat: [vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.PlainText],
            },
        },
    };
})(ClientCapabilities || (ClientCapabilities = {}));
var FileType;
(function (FileType) {
    /**
     * The file type is unknown.
     */
    FileType[FileType["Unknown"] = 0] = "Unknown";
    /**
     * A regular file.
     */
    FileType[FileType["File"] = 1] = "File";
    /**
     * A directory.
     */
    FileType[FileType["Directory"] = 2] = "Directory";
    /**
     * A symbolic link to a file.
     */
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType || (FileType = {}));
//# sourceMappingURL=cssLanguageTypes.js.map

}),
"../vscode-css-languageservice/lib/esm/data/webCustomData.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  cssData: function() { return cssData; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// file generated from @vscode/web-custom-data NPM package
const cssData = {
    version: 1.1,
    properties: [
        {
            name: "additive-symbols",
            browsers: ["FF33"],
            atRule: "@counter-style",
            syntax: "[ <integer> && <symbol> ]#",
            relevance: 50,
            description: "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor. Needs to be specified if the counter system is 'additive'.",
            restrictions: ["integer", "string", "image", "identifier"],
        },
        {
            name: "align-content",
            browsers: ["E12", "FF28", "S9", "C29", "IE11", "O16"],
            values: [
                {
                    name: "center",
                    description: "Lines are packed toward the center of the flex container.",
                },
                {
                    name: "flex-end",
                    description: "Lines are packed toward the end of the flex container.",
                },
                {
                    name: "flex-start",
                    description: "Lines are packed toward the start of the flex container.",
                },
                {
                    name: "space-around",
                    description: "Lines are evenly distributed in the flex container, with half-size spaces on either end.",
                },
                {
                    name: "space-between",
                    description: "Lines are evenly distributed in the flex container.",
                },
                {
                    name: "stretch",
                    description: "Lines stretch to take up the remaining space.",
                },
                {
                    name: "start",
                },
                {
                    name: "end",
                },
                {
                    name: "normal",
                },
                {
                    name: "baseline",
                },
                {
                    name: "first baseline",
                },
                {
                    name: "last baseline",
                },
                {
                    name: "space-around",
                },
                {
                    name: "space-between",
                },
                {
                    name: "space-evenly",
                },
                {
                    name: "stretch",
                },
                {
                    name: "safe",
                },
                {
                    name: "unsafe",
                },
            ],
            syntax: "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
            relevance: 66,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/align-content",
                },
            ],
            description: "Aligns a flex container's lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
            restrictions: ["enum"],
        },
        {
            name: "align-items",
            browsers: ["E12", "FF20", "S9", "C29", "IE11", "O16"],
            values: [
                {
                    name: "baseline",
                    description: "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment.",
                },
                {
                    name: "center",
                    description: "The flex item's margin box is centered in the cross axis within the line.",
                },
                {
                    name: "flex-end",
                    description: "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line.",
                },
                {
                    name: "flex-start",
                    description: "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line.",
                },
                {
                    name: "stretch",
                    description: "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.",
                },
                {
                    name: "normal",
                },
                {
                    name: "start",
                },
                {
                    name: "end",
                },
                {
                    name: "self-start",
                },
                {
                    name: "self-end",
                },
                {
                    name: "first baseline",
                },
                {
                    name: "last baseline",
                },
                {
                    name: "stretch",
                },
                {
                    name: "safe",
                },
                {
                    name: "unsafe",
                },
            ],
            syntax: "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
            relevance: 87,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/align-items",
                },
            ],
            description: "Aligns flex items along the cross axis of the current line of the flex container.",
            restrictions: ["enum"],
        },
        {
            name: "justify-items",
            browsers: ["E12", "FF20", "S9", "C52", "IE11", "O12.1"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "normal",
                },
                {
                    name: "end",
                },
                {
                    name: "start",
                },
                {
                    name: "flex-end",
                    description: '"Flex items are packed toward the end of the line."',
                },
                {
                    name: "flex-start",
                    description: '"Flex items are packed toward the start of the line."',
                },
                {
                    name: "self-end",
                    description: "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis.",
                },
                {
                    name: "self-start",
                    description: "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis..",
                },
                {
                    name: "center",
                    description: "The items are packed flush to each other toward the center of the of the alignment container.",
                },
                {
                    name: "left",
                },
                {
                    name: "right",
                },
                {
                    name: "baseline",
                },
                {
                    name: "first baseline",
                },
                {
                    name: "last baseline",
                },
                {
                    name: "stretch",
                    description: "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.",
                },
                {
                    name: "safe",
                },
                {
                    name: "unsafe",
                },
                {
                    name: "legacy",
                },
            ],
            syntax: "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/justify-items",
                },
            ],
            description: "Defines the default justify-self for all items of the box, giving them the default way of justifying each box along the appropriate axis",
            restrictions: ["enum"],
        },
        {
            name: "justify-self",
            browsers: ["E16", "FF45", "S10.1", "C57", "IE10", "O44"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "normal",
                },
                {
                    name: "end",
                },
                {
                    name: "start",
                },
                {
                    name: "flex-end",
                    description: '"Flex items are packed toward the end of the line."',
                },
                {
                    name: "flex-start",
                    description: '"Flex items are packed toward the start of the line."',
                },
                {
                    name: "self-end",
                    description: "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis.",
                },
                {
                    name: "self-start",
                    description: "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis..",
                },
                {
                    name: "center",
                    description: "The items are packed flush to each other toward the center of the of the alignment container.",
                },
                {
                    name: "left",
                },
                {
                    name: "right",
                },
                {
                    name: "baseline",
                },
                {
                    name: "first baseline",
                },
                {
                    name: "last baseline",
                },
                {
                    name: "stretch",
                    description: "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.",
                },
                {
                    name: "save",
                },
                {
                    name: "unsave",
                },
            ],
            syntax: "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/justify-self",
                },
            ],
            description: "Defines the way of justifying a box inside its container along the appropriate axis.",
            restrictions: ["enum"],
        },
        {
            name: "align-self",
            browsers: ["E12", "FF20", "S9", "C29", "IE10", "O12.1"],
            values: [
                {
                    name: "auto",
                    description: "Computes to the value of 'align-items' on the element's parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself.",
                },
                {
                    name: "normal",
                },
                {
                    name: "self-end",
                },
                {
                    name: "self-start",
                },
                {
                    name: "baseline",
                    description: "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment.",
                },
                {
                    name: "center",
                    description: "The flex item's margin box is centered in the cross axis within the line.",
                },
                {
                    name: "flex-end",
                    description: "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line.",
                },
                {
                    name: "flex-start",
                    description: "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line.",
                },
                {
                    name: "stretch",
                    description: "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.",
                },
                {
                    name: "baseline",
                },
                {
                    name: "first baseline",
                },
                {
                    name: "last baseline",
                },
                {
                    name: "safe",
                },
                {
                    name: "unsafe",
                },
            ],
            syntax: "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
            relevance: 74,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/align-self",
                },
            ],
            description: "Allows the default alignment along the cross axis to be overridden for individual flex items.",
            restrictions: ["enum"],
        },
        {
            name: "all",
            browsers: ["E79", "FF27", "S9.1", "C37", "O24"],
            values: [],
            syntax: "initial | inherit | unset | revert | revert-layer",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/all",
                },
            ],
            description: "Shorthand that resets all properties except 'direction' and 'unicode-bidi'.",
            restrictions: ["enum"],
        },
        {
            name: "alt",
            browsers: ["S9"],
            values: [],
            relevance: 50,
            description: "Provides alternative text for assistive technology to replace the generated content of a ::before or ::after element.",
            restrictions: ["string", "enum"],
        },
        {
            name: "animation",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "backwards",
                    description: "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",
                },
                {
                    name: "both",
                    description: "Both forwards and backwards fill modes are applied.",
                },
                {
                    name: "forwards",
                    description: "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",
                },
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
                {
                    name: "none",
                    description: "No animation is performed",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            syntax: "<single-animation>#",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation",
                },
            ],
            description: "Shorthand property combines six of the animation properties into a single property.",
            restrictions: ["time", "timing-function", "enum", "identifier", "number"],
        },
        {
            name: "animation-delay",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            syntax: "<time>#",
            relevance: 67,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-delay",
                },
            ],
            description: "Defines when the animation will start.",
            restrictions: ["time"],
        },
        {
            name: "animation-direction",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            syntax: "<single-animation-direction>#",
            relevance: 58,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-direction",
                },
            ],
            description: "Defines whether or not the animation should play in reverse on alternate cycles.",
            restrictions: ["enum"],
        },
        {
            name: "animation-duration",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            syntax: "<time>#",
            relevance: 71,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-duration",
                },
            ],
            description: "Defines the length of time that an animation takes to complete one cycle.",
            restrictions: ["time"],
        },
        {
            name: "animation-fill-mode",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            values: [
                {
                    name: "backwards",
                    description: "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",
                },
                {
                    name: "both",
                    description: "Both forwards and backwards fill modes are applied.",
                },
                {
                    name: "forwards",
                    description: "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",
                },
                {
                    name: "none",
                    description: "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes.",
                },
            ],
            syntax: "<single-animation-fill-mode>#",
            relevance: 64,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode",
                },
            ],
            description: "Defines what values are applied by the animation outside the time it is executing.",
            restrictions: ["enum"],
        },
        {
            name: "animation-iteration-count",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            values: [
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
            ],
            syntax: "<single-animation-iteration-count>#",
            relevance: 65,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count",
                },
            ],
            description: "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            restrictions: ["number", "enum"],
        },
        {
            name: "animation-name",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            values: [
                {
                    name: "none",
                    description: "No animation is performed",
                },
            ],
            syntax: "[ none | <keyframes-name> ]#",
            relevance: 70,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-name",
                },
            ],
            description: "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            restrictions: ["identifier", "enum"],
        },
        {
            name: "animation-play-state",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            values: [
                {
                    name: "paused",
                    description: "A running animation will be paused.",
                },
                {
                    name: "running",
                    description: "Resume playback of a paused animation.",
                },
            ],
            syntax: "<single-animation-play-state>#",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-play-state",
                },
            ],
            description: "Defines whether the animation is running or paused.",
            restrictions: ["enum"],
        },
        {
            name: "animation-timing-function",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            syntax: "<easing-function>#",
            relevance: 72,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-timing-function",
                },
            ],
            description: "Describes how the animation will progress over one cycle of its duration.",
            restrictions: ["timing-function"],
        },
        {
            name: "backface-visibility",
            browsers: ["E12", "FF16", "S15.4", "C36", "IE10", "O23"],
            values: [
                {
                    name: "hidden",
                    description: "Back side is hidden.",
                },
                {
                    name: "visible",
                    description: "Back side is visible.",
                },
            ],
            syntax: "visible | hidden",
            relevance: 59,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/backface-visibility",
                },
            ],
            description: "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            restrictions: ["enum"],
        },
        {
            name: "background",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "fixed",
                    description: "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page.",
                },
                {
                    name: "local",
                    description: "The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents.",
                },
                {
                    name: "none",
                    description: "A value of 'none' counts as an image layer but draws nothing.",
                },
                {
                    name: "scroll",
                    description: "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)",
                },
            ],
            syntax: "[ <bg-layer> , ]* <final-bg-layer>",
            relevance: 93,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background",
                },
            ],
            description: "Shorthand property for setting most background properties at the same place in the style sheet.",
            restrictions: ["enum", "image", "color", "position", "length", "repeat", "percentage", "box"],
        },
        {
            name: "background-attachment",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "fixed",
                    description: "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page.",
                },
                {
                    name: "local",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
                    description: "The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents.",
                },
                {
                    name: "scroll",
                    description: "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)",
                },
            ],
            syntax: "<attachment>#",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-attachment",
                },
            ],
            description: "Specifies whether the background images are fixed with regard to the viewport ('fixed') or scroll along with the element ('scroll') or its contents ('local').",
            restrictions: ["enum"],
        },
        {
            name: "background-blend-mode",
            browsers: ["E79", "FF30", "S8", "C35", "O22"],
            values: [
                {
                    name: "normal",
                    description: "Default attribute which specifies no blending",
                },
                {
                    name: "multiply",
                    description: "The source color is multiplied by the destination color and replaces the destination.",
                },
                {
                    name: "screen",
                    description: "Multiplies the complements of the backdrop and source color values, then complements the result.",
                },
                {
                    name: "overlay",
                    description: "Multiplies or screens the colors, depending on the backdrop color value.",
                },
                {
                    name: "darken",
                    description: "Selects the darker of the backdrop and source colors.",
                },
                {
                    name: "lighten",
                    description: "Selects the lighter of the backdrop and source colors.",
                },
                {
                    name: "color-dodge",
                    description: "Brightens the backdrop color to reflect the source color.",
                },
                {
                    name: "color-burn",
                    description: "Darkens the backdrop color to reflect the source color.",
                },
                {
                    name: "hard-light",
                    description: "Multiplies or screens the colors, depending on the source color value.",
                },
                {
                    name: "soft-light",
                    description: "Darkens or lightens the colors, depending on the source color value.",
                },
                {
                    name: "difference",
                    description: "Subtracts the darker of the two constituent colors from the lighter color..",
                },
                {
                    name: "exclusion",
                    description: "Produces an effect similar to that of the Difference mode but lower in contrast.",
                },
                {
                    name: "hue",
                    browsers: ["E79", "FF30", "S8", "C35", "O22"],
                    description: "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.",
                },
                {
                    name: "saturation",
                    browsers: ["E79", "FF30", "S8", "C35", "O22"],
                    description: "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color.",
                },
                {
                    name: "color",
                    browsers: ["E79", "FF30", "S8", "C35", "O22"],
                    description: "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color.",
                },
                {
                    name: "luminosity",
                    browsers: ["E79", "FF30", "S8", "C35", "O22"],
                    description: "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color.",
                },
            ],
            syntax: "<blend-mode>#",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-blend-mode",
                },
            ],
            description: "Defines the blending mode of each background layer.",
            restrictions: ["enum"],
        },
        {
            name: "background-clip",
            browsers: ["E12", "FF4", "S5", "C1", "IE9", "O10.5"],
            syntax: "<box>#",
            relevance: 69,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-clip",
                },
            ],
            description: "Determines the background painting area.",
            restrictions: ["box"],
        },
        {
            name: "background-color",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<color>",
            relevance: 94,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-color",
                },
            ],
            description: "Sets the background color of an element.",
            restrictions: ["color"],
        },
        {
            name: "background-image",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "none",
                    description: "Counts as an image layer but draws nothing.",
                },
            ],
            syntax: "<bg-image>#",
            relevance: 87,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-image",
                },
            ],
            description: "Sets the background image(s) of an element.",
            restrictions: ["image", "enum"],
        },
        {
            name: "background-origin",
            browsers: ["E12", "FF4", "S3", "C1", "IE9", "O10.5"],
            syntax: "<box>#",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-origin",
                },
            ],
            description: "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            restrictions: ["box"],
        },
        {
            name: "background-position",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<bg-position>#",
            relevance: 86,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-position",
                },
            ],
            description: "Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "background-position-x",
            browsers: ["E12", "FF49", "S1", "C1", "IE6", "O15"],
            values: [
                {
                    name: "center",
                    description: "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is.",
                },
                {
                    name: "left",
                    description: "Equivalent to '0%' for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.",
                },
                {
                    name: "right",
                    description: "Equivalent to '100%' for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.",
                },
            ],
            syntax: "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-position-x",
                },
            ],
            description: "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "background-position-y",
            browsers: ["E12", "FF49", "S1", "C1", "IE6", "O15"],
            values: [
                {
                    name: "bottom",
                    description: "Equivalent to '100%' for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.",
                },
                {
                    name: "center",
                    description: "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is.",
                },
                {
                    name: "top",
                    description: "Equivalent to '0%' for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.",
                },
            ],
            syntax: "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-position-y",
                },
            ],
            description: "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "background-repeat",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [],
            syntax: "<repeat-style>#",
            relevance: 84,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-repeat",
                },
            ],
            description: "Specifies how background images are tiled after they have been sized and positioned.",
            restrictions: ["repeat"],
        },
        {
            name: "background-size",
            browsers: ["E12", "FF4", "S5", "C3", "IE9", "O10"],
            values: [
                {
                    name: "auto",
                    description: "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%.",
                },
                {
                    name: "contain",
                    description: "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.",
                },
                {
                    name: "cover",
                    description: "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.",
                },
            ],
            syntax: "<bg-size>#",
            relevance: 84,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/background-size",
                },
            ],
            description: "Specifies the size of the background images.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "behavior",
            browsers: ["IE6"],
            relevance: 50,
            description: "IE only. Used to extend behaviors of the browser.",
            restrictions: ["url"],
        },
        {
            name: "block-size",
            browsers: ["E79", "FF41", "S12.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "Depends on the values of other properties.",
                },
            ],
            syntax: "<'width'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/block-size",
                },
            ],
            description: "Size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "border",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width> || <line-style> || <color>",
            relevance: 95,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border",
                },
            ],
            description: "Shorthand property for setting border width, style, and color.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-block-end",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end",
                },
            ],
            description: "Logical 'border-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-block-start",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start",
                },
            ],
            description: "Logical 'border-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-block-end-color",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-color'>",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end-color",
                },
            ],
            description: "Logical 'border-bottom-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["color"],
        },
        {
            name: "border-block-start-color",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-color'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start-color",
                },
            ],
            description: "Logical 'border-top-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["color"],
        },
        {
            name: "border-block-end-style",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-style'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end-style",
                },
            ],
            description: "Logical 'border-bottom-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["line-style"],
        },
        {
            name: "border-block-start-style",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-style'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start-style",
                },
            ],
            description: "Logical 'border-top-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["line-style"],
        },
        {
            name: "border-block-end-width",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'>",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end-width",
                },
            ],
            description: "Logical 'border-bottom-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-block-start-width",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start-width",
                },
            ],
            description: "Logical 'border-top-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-bottom",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width> || <line-style> || <color>",
            relevance: 87,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom",
                },
            ],
            description: "Shorthand property for setting border width, style and color.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-bottom-color",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<'border-top-color'>",
            relevance: 70,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-color",
                },
            ],
            description: "Sets the color of the bottom border.",
            restrictions: ["color"],
        },
        {
            name: "border-bottom-left-radius",
            browsers: ["E12", "FF4", "S5", "C4", "IE9", "O10.5"],
            syntax: "<length-percentage>{1,2}",
            relevance: 74,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius",
                },
            ],
            description: "Defines the radii of the bottom left outer border edge.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "border-bottom-right-radius",
            browsers: ["E12", "FF4", "S5", "C4", "IE9", "O10.5"],
            syntax: "<length-percentage>{1,2}",
            relevance: 75,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius",
                },
            ],
            description: "Defines the radii of the bottom right outer border edge.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "border-bottom-style",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O9.2"],
            syntax: "<line-style>",
            relevance: 58,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-style",
                },
            ],
            description: "Sets the style of the bottom border.",
            restrictions: ["line-style"],
        },
        {
            name: "border-bottom-width",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width>",
            relevance: 63,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-width",
                },
            ],
            description: "Sets the thickness of the bottom border.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-collapse",
            browsers: ["E12", "FF1", "S1.2", "C1", "IE5", "O4"],
            values: [
                {
                    name: "collapse",
                    description: "Selects the collapsing borders model.",
                },
                {
                    name: "separate",
                    description: "Selects the separated borders border model.",
                },
            ],
            syntax: "collapse | separate",
            relevance: 74,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-collapse",
                },
            ],
            description: "Selects a table's border model.",
            restrictions: ["enum"],
        },
        {
            name: "border-color",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [],
            syntax: "<color>{1,4}",
            relevance: 87,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-color",
                },
            ],
            description: "The color of the border around all four edges of an element.",
            restrictions: ["color"],
        },
        {
            name: "border-image",
            browsers: ["E12", "FF15", "S6", "C16", "IE11", "O11"],
            values: [
                {
                    name: "auto",
                    description: "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead.",
                },
                {
                    name: "fill",
                    description: "Causes the middle part of the border-image to be preserved.",
                },
                {
                    name: "none",
                    description: "Use the border styles.",
                },
                {
                    name: "repeat",
                    description: "The image is tiled (repeated) to fill the area.",
                },
                {
                    name: "round",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.",
                },
                {
                    name: "space",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.",
                },
                {
                    name: "stretch",
                    description: "The image is stretched to fill the area.",
                },
                {
                    name: "url()",
                },
            ],
            syntax: "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-image",
                },
            ],
            description: "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            restrictions: ["length", "percentage", "number", "url", "enum"],
        },
        {
            name: "border-image-outset",
            browsers: ["E12", "FF15", "S6", "C15", "IE11", "O15"],
            syntax: "[ <length> | <number> ]{1,4}",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-image-outset",
                },
            ],
            description: "The values specify the amount by which the border image area extends beyond the border box on the top, right, bottom, and left sides respectively. If the fourth value is absent, it is the same as the second. If the third one is also absent, it is the same as the first. If the second one is also absent, it is the same as the first. Numbers represent multiples of the corresponding border-width.",
            restrictions: ["length", "number"],
        },
        {
            name: "border-image-repeat",
            browsers: ["E12", "FF15", "S6", "C15", "IE11", "O15"],
            values: [
                {
                    name: "repeat",
                    description: "The image is tiled (repeated) to fill the area.",
                },
                {
                    name: "round",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.",
                },
                {
                    name: "space",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.",
                },
                {
                    name: "stretch",
                    description: "The image is stretched to fill the area.",
                },
            ],
            syntax: "[ stretch | repeat | round | space ]{1,2}",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-image-repeat",
                },
            ],
            description: "Specifies how the images for the sides and the middle part of the border image are scaled and tiled. If the second keyword is absent, it is assumed to be the same as the first.",
            restrictions: ["enum"],
        },
        {
            name: "border-image-slice",
            browsers: ["E12", "FF15", "S6", "C15", "IE11", "O15"],
            values: [
                {
                    name: "fill",
                    description: "Causes the middle part of the border-image to be preserved.",
                },
            ],
            syntax: "<number-percentage>{1,4} && fill?",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-image-slice",
                },
            ],
            description: "Specifies inward offsets from the top, right, bottom, and left edges of the image, dividing it into nine regions: four corners, four edges and a middle.",
            restrictions: ["number", "percentage"],
        },
        {
            name: "border-image-source",
            browsers: ["E12", "FF15", "S6", "C15", "IE11", "O15"],
            values: [
                {
                    name: "none",
                    description: "Use the border styles.",
                },
            ],
            syntax: "none | <image>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-image-source",
                },
            ],
            description: "Specifies an image to use instead of the border styles given by the 'border-style' properties and as an additional background layer for the element. If the value is 'none' or if the image cannot be displayed, the border styles will be used.",
            restrictions: ["image"],
        },
        {
            name: "border-image-width",
            browsers: ["E12", "FF13", "S6", "C15", "IE11", "O15"],
            values: [
                {
                    name: "auto",
                    description: "The border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead.",
                },
            ],
            syntax: "[ <length-percentage> | <number> | auto ]{1,4}",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-image-width",
                },
            ],
            description: "The four values of 'border-image-width' specify offsets that are used to divide the border image area into nine parts. They represent inward distances from the top, right, bottom, and left sides of the area, respectively.",
            restrictions: ["length", "percentage", "number"],
        },
        {
            name: "border-inline-end",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end",
                },
            ],
            description: "Logical 'border-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-inline-start",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start",
                },
            ],
            description: "Logical 'border-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-inline-end-color",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-color'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color",
                },
            ],
            description: "Logical 'border-right-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["color"],
        },
        {
            name: "border-inline-start-color",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-color'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color",
                },
            ],
            description: "Logical 'border-left-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["color"],
        },
        {
            name: "border-inline-end-style",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-style'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style",
                },
            ],
            description: "Logical 'border-right-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["line-style"],
        },
        {
            name: "border-inline-start-style",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-style'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style",
                },
            ],
            description: "Logical 'border-left-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["line-style"],
        },
        {
            name: "border-inline-end-width",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width",
                },
            ],
            description: "Logical 'border-right-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-inline-start-width",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'border-top-width'>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width",
                },
            ],
            description: "Logical 'border-left-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-left",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width> || <line-style> || <color>",
            relevance: 81,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-left",
                },
            ],
            description: "Shorthand property for setting border width, style and color",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-left-color",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<color>",
            relevance: 67,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-left-color",
                },
            ],
            description: "Sets the color of the left border.",
            restrictions: ["color"],
        },
        {
            name: "border-left-style",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O9.2"],
            syntax: "<line-style>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-left-style",
                },
            ],
            description: "Sets the style of the left border.",
            restrictions: ["line-style"],
        },
        {
            name: "border-left-width",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width>",
            relevance: 62,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-left-width",
                },
            ],
            description: "Sets the thickness of the left border.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-radius",
            browsers: ["E12", "FF4", "S5", "C4", "IE9", "O10.5"],
            syntax: "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
            relevance: 92,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-radius",
                },
            ],
            description: "Defines the radii of the outer border edge.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "border-right",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O9.2"],
            syntax: "<line-width> || <line-style> || <color>",
            relevance: 80,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-right",
                },
            ],
            description: "Shorthand property for setting border width, style and color",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-right-color",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<color>",
            relevance: 66,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-right-color",
                },
            ],
            description: "Sets the color of the right border.",
            restrictions: ["color"],
        },
        {
            name: "border-right-style",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O9.2"],
            syntax: "<line-style>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-right-style",
                },
            ],
            description: "Sets the style of the right border.",
            restrictions: ["line-style"],
        },
        {
            name: "border-right-width",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width>",
            relevance: 62,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-right-width",
                },
            ],
            description: "Sets the thickness of the right border.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-spacing",
            browsers: ["E12", "FF1", "S1", "C1", "IE8", "O4"],
            syntax: "<length> <length>?",
            relevance: 66,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-spacing",
                },
            ],
            description: "The lengths specify the distance that separates adjoining cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative.",
            restrictions: ["length"],
        },
        {
            name: "border-style",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [],
            syntax: "<line-style>{1,4}",
            relevance: 80,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-style",
                },
            ],
            description: "The style of the border around edges of an element.",
            restrictions: ["line-style"],
        },
        {
            name: "border-top",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width> || <line-style> || <color>",
            relevance: 86,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-top",
                },
            ],
            description: "Shorthand property for setting border width, style and color",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "border-top-color",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<color>",
            relevance: 71,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-top-color",
                },
            ],
            description: "Sets the color of the top border.",
            restrictions: ["color"],
        },
        {
            name: "border-top-left-radius",
            browsers: ["E12", "FF4", "S5", "C4", "IE9", "O10.5"],
            syntax: "<length-percentage>{1,2}",
            relevance: 76,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius",
                },
            ],
            description: "Defines the radii of the top left outer border edge.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "border-top-right-radius",
            browsers: ["E12", "FF4", "S5", "C4", "IE9", "O10.5"],
            syntax: "<length-percentage>{1,2}",
            relevance: 76,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius",
                },
            ],
            description: "Defines the radii of the top right outer border edge.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "border-top-style",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O9.2"],
            syntax: "<line-style>",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-top-style",
                },
            ],
            description: "Sets the style of the top border.",
            restrictions: ["line-style"],
        },
        {
            name: "border-top-width",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<line-width>",
            relevance: 62,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-top-width",
                },
            ],
            description: "Sets the thickness of the top border.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "border-width",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [],
            syntax: "<line-width>{1,4}",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-width",
                },
            ],
            description: "Shorthand that sets the four 'border-*-width' properties. If it has four values, they set top, right, bottom and left in that order. If left is missing, it is the same as right; if bottom is missing, it is the same as top; if right is missing, it is the same as top.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "bottom",
            browsers: ["E12", "FF1", "S1", "C1", "IE5", "O6"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 90,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/bottom",
                },
            ],
            description: "Specifies how far an absolutely positioned box's bottom margin edge is offset above the bottom edge of the box's 'containing block'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "box-decoration-break",
            browsers: ["E130", "FF32", "S7", "C130", "O15"],
            values: [
                {
                    name: "clone",
                    description: "Each box is independently wrapped with the border and padding.",
                },
                {
                    name: "slice",
                    description: "The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward.",
                },
            ],
            syntax: "slice | clone",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-decoration-break",
                },
            ],
            description: "Specifies whether individual boxes are treated as broken pieces of one continuous box, or whether each box is individually wrapped with the border and padding.",
            restrictions: ["enum"],
        },
        {
            name: "box-shadow",
            browsers: ["E12", "FF4", "S5.1", "C10", "IE9", "O10.5"],
            values: [
                {
                    name: "inset",
                    description: "Changes the drop shadow from an outer shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it).",
                },
                {
                    name: "none",
                    description: "No shadow.",
                },
            ],
            syntax: "none | <shadow>#",
            relevance: 90,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-shadow",
                },
            ],
            description: "Attaches one or more drop-shadows to the box. The property is a comma-separated list of shadows, each specified by 2-4 length values, an optional color, and an optional 'inset' keyword. Omitted lengths are 0; omitted colors are a user agent chosen color.",
            restrictions: ["length", "color", "enum"],
        },
        {
            name: "box-sizing",
            browsers: ["E12", "FF29", "S5.1", "C10", "IE8", "O7"],
            values: [
                {
                    name: "border-box",
                    description: "The specified width and height (and respective min/max properties) on this element determine the border box of the element.",
                },
                {
                    name: "content-box",
                    description: "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element.",
                },
            ],
            syntax: "content-box | border-box",
            relevance: 92,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-sizing",
                },
            ],
            description: "Specifies the behavior of the 'width' and 'height' properties.",
            restrictions: ["enum"],
        },
        {
            name: "break-after",
            browsers: ["E12", "FF65", "S10", "C50", "IE10", "O37"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break before/after the principal box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a break before/after the principal box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break before/after the principal box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break before/after the principal box.",
                },
                {
                    name: "column",
                    description: "Always force a column break before/after the principal box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "page",
                    description: "Always force a page break before/after the principal box.",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.",
                },
            ],
            syntax: "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/break-after",
                },
            ],
            description: "Describes the page/column/region break behavior after the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "break-before",
            browsers: ["E12", "FF65", "S10", "C50", "IE10", "O37"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break before/after the principal box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a break before/after the principal box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break before/after the principal box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break before/after the principal box.",
                },
                {
                    name: "column",
                    description: "Always force a column break before/after the principal box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "page",
                    description: "Always force a page break before/after the principal box.",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.",
                },
            ],
            syntax: "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/break-before",
                },
            ],
            description: "Describes the page/column/region break behavior before the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "break-inside",
            browsers: ["E12", "FF65", "S10", "C50", "IE10", "O37"],
            values: [
                {
                    name: "auto",
                    description: "Impose no additional breaking constraints within the box.",
                },
                {
                    name: "avoid",
                    description: "Avoid breaks within the box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break within the box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break within the box.",
                },
            ],
            syntax: "auto | avoid | avoid-page | avoid-column | avoid-region",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/break-inside",
                },
            ],
            description: "Describes the page/column/region break behavior inside the principal box.",
            restrictions: ["enum"],
        },
        {
            name: "caption-side",
            browsers: ["E12", "FF1", "S1", "C1", "IE8", "O4"],
            values: [
                {
                    name: "bottom",
                    description: "Positions the caption box below the table box.",
                },
                {
                    name: "top",
                    description: "Positions the caption box above the table box.",
                },
            ],
            syntax: "top | bottom | block-start | block-end | inline-start | inline-end",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/caption-side",
                },
            ],
            description: "Specifies the position of the caption box with respect to the table box.",
            restrictions: ["enum"],
        },
        {
            name: "caret-color",
            browsers: ["E79", "FF53", "S11.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The user agent selects an appropriate color for the caret. This is generally currentcolor, but the user agent may choose a different color to ensure good visibility and contrast with the surrounding content, taking into account the value of currentcolor, the background, shadows, and other factors.",
                },
            ],
            syntax: "auto | <color>",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/caret-color",
                },
            ],
            description: "Controls the color of the text insertion indicator.",
            restrictions: ["color", "enum"],
        },
        {
            name: "clear",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "both",
                    description: "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating and left-floating boxes that resulted from elements earlier in the source document.",
                },
                {
                    name: "left",
                    description: "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any left-floating boxes that resulted from elements earlier in the source document.",
                },
                {
                    name: "none",
                    description: "No constraint on the box's position with respect to floats.",
                },
                {
                    name: "right",
                    description: "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating boxes that resulted from elements earlier in the source document.",
                },
            ],
            syntax: "none | left | right | both | inline-start | inline-end",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/clear",
                },
            ],
            description: "Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box. The 'clear' property does not consider floats inside the element itself or in other block formatting contexts.",
            restrictions: ["enum"],
        },
        {
            name: "clip",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "auto",
                    description: "The element does not clip.",
                },
                {
                    name: "rect()",
                    description: "Specifies offsets from the edges of the border box.",
                },
            ],
            syntax: "<shape> | auto",
            relevance: 74,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/clip",
                },
            ],
            description: "Deprecated. Use the 'clip-path' property when support allows. Defines the visible portion of an element's box.",
            restrictions: ["enum"],
        },
        {
            name: "clip-path",
            browsers: ["E79", "FF3.5", "S9.1", "C55", "IE10", "O42"],
            values: [
                {
                    name: "none",
                    description: "No clipping path gets created.",
                },
                {
                    name: "url()",
                    description: "References a <clipPath> element to create a clipping path.",
                },
            ],
            syntax: "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
            relevance: 67,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/clip-path",
                },
            ],
            description: "Specifies a clipping path where everything inside the path is visible and everything outside is clipped out.",
            restrictions: ["url", "shape", "geometry-box", "enum"],
        },
        {
            name: "clip-rule",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "evenodd",
                    description: "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses.",
                },
                {
                    name: "nonzero",
                    description: "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray.",
                },
            ],
            syntax: "nonzero | evenodd",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/clip-rule",
                },
            ],
            description: "Indicates the algorithm which is to be used to determine what parts of the canvas are included inside the shape.",
            restrictions: ["enum"],
        },
        {
            name: "color",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            syntax: "<color>",
            relevance: 95,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/color",
                },
            ],
            description: "Sets the color of an element's text",
            restrictions: ["color"],
        },
        {
            name: "color-interpolation-filters",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "auto",
                    description: "Color operations are not required to occur in a particular color space.",
                },
                {
                    name: "linearRGB",
                    description: "Color operations should occur in the linearized RGB color space.",
                },
                {
                    name: "sRGB",
                    description: "Color operations should occur in the sRGB color space.",
                },
            ],
            syntax: "auto | sRGB | linearRGB",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/color-interpolation-filters",
                },
            ],
            description: "Specifies the color space for imaging operations performed via filter effects.",
            restrictions: ["enum"],
        },
        {
            name: "column-count",
            browsers: ["E12", "FF52", "S9", "C50", "IE10", "O37"],
            values: [
                {
                    name: "auto",
                    description: "Determines the number of columns by the 'column-width' property and the element width.",
                },
            ],
            syntax: "<integer> | auto",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-count",
                },
            ],
            description: "Describes the optimal number of columns into which the content of the element will be flowed.",
            restrictions: ["integer", "enum"],
        },
        {
            name: "column-fill",
            browsers: ["E12", "FF52", "S9", "C50", "IE10", "O37"],
            values: [
                {
                    name: "auto",
                    description: "Fills columns sequentially.",
                },
                {
                    name: "balance",
                    description: "Balance content equally between columns, if possible.",
                },
            ],
            syntax: "auto | balance",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-fill",
                },
            ],
            description: "In continuous media, this property will only be consulted if the length of columns has been constrained. Otherwise, columns will automatically be balanced.",
            restrictions: ["enum"],
        },
        {
            name: "column-gap",
            browsers: ["E12", "FF1.5", "S3", "C1", "IE10", "O11.1"],
            values: [
                {
                    name: "normal",
                    description: "User agent specific and typically equivalent to 1em.",
                },
            ],
            syntax: "normal | <length-percentage>",
            relevance: 63,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-gap",
                },
            ],
            description: "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            restrictions: ["length", "enum"],
        },
        {
            name: "column-rule",
            browsers: ["E12", "FF52", "S9", "C50", "IE10", "O11.1"],
            syntax: "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-rule",
                },
            ],
            description: "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "column-rule-color",
            browsers: ["E12", "FF52", "S9", "C50", "IE10", "O11.1"],
            syntax: "<color>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-rule-color",
                },
            ],
            description: "Sets the color of the column rule",
            restrictions: ["color"],
        },
        {
            name: "column-rule-style",
            browsers: ["E12", "FF52", "S9", "C50", "IE10", "O11.1"],
            syntax: "<'border-style'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-rule-style",
                },
            ],
            description: "Sets the style of the rule between columns of an element.",
            restrictions: ["line-style"],
        },
        {
            name: "column-rule-width",
            browsers: ["E12", "FF52", "S9", "C50", "IE10", "O11.1"],
            syntax: "<'border-width'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-rule-width",
                },
            ],
            description: "Sets the width of the rule between columns. Negative values are not allowed.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "columns",
            browsers: ["E12", "FF52", "S9", "C50", "IE10", "O11.1"],
            values: [
                {
                    name: "auto",
                    description: "The width depends on the values of other properties.",
                },
            ],
            syntax: "<'column-width'> || <'column-count'>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/columns",
                },
            ],
            description: "A shorthand property which sets both 'column-width' and 'column-count'.",
            restrictions: ["length", "integer", "enum"],
        },
        {
            name: "column-span",
            browsers: ["E12", "FF71", "S9", "C50", "IE10", "O37"],
            values: [
                {
                    name: "all",
                    description: "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear.",
                },
                {
                    name: "none",
                    description: "The element does not span multiple columns.",
                },
            ],
            syntax: "none | all",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-span",
                },
            ],
            description: "Describes the page/column break behavior after the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "column-width",
            browsers: ["E12", "FF50", "S9", "C50", "IE10", "O11.1"],
            values: [
                {
                    name: "auto",
                    description: "The width depends on the values of other properties.",
                },
            ],
            syntax: "<length> | auto",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/column-width",
                },
            ],
            description: "Describes the width of columns in multicol elements.",
            restrictions: ["length", "enum"],
        },
        {
            name: "contain",
            browsers: ["E79", "FF69", "S15.4", "C52", "O39"],
            values: [
                {
                    name: "none",
                    description: "Indicates that the property has no effect.",
                },
                {
                    name: "strict",
                    description: "Turns on all forms of containment for the element.",
                },
                {
                    name: "content",
                    description: "All containment rules except size are applied to the element.",
                },
                {
                    name: "size",
                    description: "For properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element.",
                },
                {
                    name: "layout",
                    description: "Turns on layout containment for the element.",
                },
                {
                    name: "style",
                    description: "Turns on style containment for the element.",
                },
                {
                    name: "paint",
                    description: "Turns on paint containment for the element.",
                },
            ],
            syntax: "none | strict | content | [ [ size || inline-size ] || layout || style || paint ]",
            relevance: 59,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/contain",
                },
            ],
            description: "Indicates that an element and its contents are, as much as possible, independent of the rest of the document tree.",
            restrictions: ["enum"],
        },
        {
            name: "content",
            browsers: ["E12", "FF1", "S1", "C1", "IE8", "O4"],
            values: [
                {
                    name: "attr()",
                    description: "The attr(n) function returns as a string the value of attribute n for the subject of the selector.",
                },
                {
                    name: "counter(name)",
                    description: "Counters are denoted by identifiers (see the 'counter-increment' and 'counter-reset' properties).",
                },
                {
                    name: "icon",
                    description: "The (pseudo-)element is replaced in its entirety by the resource referenced by its 'icon' property, and treated as a replaced element.",
                },
                {
                    name: "none",
                    description: "On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty. On pseudo-elements it causes the pseudo-element to have no content.",
                },
                {
                    name: "normal",
                    description: "See http://www.w3.org/TR/css3-content/#content for computation rules.",
                },
                {
                    name: "url()",
                },
            ],
            syntax: "normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?",
            relevance: 89,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/content",
                },
            ],
            description: "Determines which page-based occurrence of a given element is applied to a counter or string value.",
            restrictions: ["string", "url"],
        },
        {
            name: "counter-increment",
            browsers: ["E12", "FF1", "S3", "C2", "IE8", "O9.2"],
            values: [
                {
                    name: "none",
                    description: "This element does not alter the value of any counters.",
                },
            ],
            syntax: "[ <counter-name> <integer>? ]+ | none",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/counter-increment",
                },
            ],
            description: "Manipulate the value of existing counters.",
            restrictions: ["identifier", "integer"],
        },
        {
            name: "counter-reset",
            browsers: ["E12", "FF1", "S3", "C2", "IE8", "O9.2"],
            values: [
                {
                    name: "none",
                    description: "The counter is not modified.",
                },
            ],
            syntax: "[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/counter-reset",
                },
            ],
            description: "Property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.",
            restrictions: ["identifier", "integer"],
        },
        {
            name: "cursor",
            browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
            values: [
                {
                    name: "alias",
                    description: "Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it.",
                },
                {
                    name: "all-scroll",
                    description: "Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle.",
                },
                {
                    name: "auto",
                    description: "The UA determines the cursor to display based on the current context.",
                },
                {
                    name: "cell",
                    description: "Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.",
                },
                {
                    name: "col-resize",
                    description: "Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.",
                },
                {
                    name: "context-menu",
                    description: "A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it.",
                },
                {
                    name: "copy",
                    description: "Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it.",
                },
                {
                    name: "crosshair",
                    description: "A simple crosshair (e.g., short line segments resembling a '+' sign). Often used to indicate a two dimensional bitmap selection mode.",
                },
                {
                    name: "default",
                    description: "The platform-dependent default cursor. Often rendered as an arrow.",
                },
                {
                    name: "e-resize",
                    description: "Indicates that east edge is to be moved.",
                },
                {
                    name: "ew-resize",
                    description: "Indicates a bidirectional east-west resize cursor.",
                },
                {
                    name: "grab",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be grabbed.",
                },
                {
                    name: "grabbing",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something is being grabbed.",
                },
                {
                    name: "help",
                    description: "Help is available for the object under the cursor. Often rendered as a question mark or a balloon.",
                },
                {
                    name: "move",
                    description: "Indicates something is to be moved.",
                },
                {
                    name: "-moz-grab",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be grabbed.",
                },
                {
                    name: "-moz-grabbing",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something is being grabbed.",
                },
                {
                    name: "-moz-zoom-in",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be zoomed (magnified) in.",
                },
                {
                    name: "-moz-zoom-out",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be zoomed (magnified) out.",
                },
                {
                    name: "ne-resize",
                    description: "Indicates that movement starts from north-east corner.",
                },
                {
                    name: "nesw-resize",
                    description: "Indicates a bidirectional north-east/south-west cursor.",
                },
                {
                    name: "no-drop",
                    description: "Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it.",
                },
                {
                    name: "none",
                    description: "No cursor is rendered for the element.",
                },
                {
                    name: "not-allowed",
                    description: "Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it.",
                },
                {
                    name: "n-resize",
                    description: "Indicates that north edge is to be moved.",
                },
                {
                    name: "ns-resize",
                    description: "Indicates a bidirectional north-south cursor.",
                },
                {
                    name: "nw-resize",
                    description: "Indicates that movement starts from north-west corner.",
                },
                {
                    name: "nwse-resize",
                    description: "Indicates a bidirectional north-west/south-east cursor.",
                },
                {
                    name: "pointer",
                    description: "The cursor is a pointer that indicates a link.",
                },
                {
                    name: "progress",
                    description: "A progress indicator. The program is performing some processing, but is different from 'wait' in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",
                },
                {
                    name: "row-resize",
                    description: "Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.",
                },
                {
                    name: "se-resize",
                    description: "Indicates that movement starts from south-east corner.",
                },
                {
                    name: "s-resize",
                    description: "Indicates that south edge is to be moved.",
                },
                {
                    name: "sw-resize",
                    description: "Indicates that movement starts from south-west corner.",
                },
                {
                    name: "text",
                    description: "Indicates text that may be selected. Often rendered as a vertical I-beam.",
                },
                {
                    name: "vertical-text",
                    description: "Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.",
                },
                {
                    name: "wait",
                    description: "Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass.",
                },
                {
                    name: "-webkit-grab",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be grabbed.",
                },
                {
                    name: "-webkit-grabbing",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something is being grabbed.",
                },
                {
                    name: "-webkit-zoom-in",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be zoomed (magnified) in.",
                },
                {
                    name: "-webkit-zoom-out",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be zoomed (magnified) out.",
                },
                {
                    name: "w-resize",
                    description: "Indicates that west edge is to be moved.",
                },
                {
                    name: "zoom-in",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be zoomed (magnified) in.",
                },
                {
                    name: "zoom-out",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
                    description: "Indicates that something can be zoomed (magnified) out.",
                },
            ],
            syntax: "[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]",
            relevance: 91,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/cursor",
                },
            ],
            description: "Allows control over cursor appearance in an element",
            restrictions: ["url", "number", "enum"],
        },
        {
            name: "direction",
            browsers: ["E12", "FF1", "S1", "C2", "IE5.5", "O9.2"],
            values: [
                {
                    name: "ltr",
                    description: "Left-to-right direction.",
                },
                {
                    name: "rtl",
                    description: "Right-to-left direction.",
                },
            ],
            syntax: "ltr | rtl",
            relevance: 70,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/direction",
                },
            ],
            description: "Specifies the inline base direction or directionality of any bidi paragraph, embedding, isolate, or override established by the box. Note: for HTML content use the 'dir' attribute and 'bdo' element rather than this property.",
            restrictions: ["enum"],
        },
        {
            name: "display",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "block",
                    description: "The element generates a block-level box",
                },
                {
                    name: "contents",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes as normal.",
                },
                {
                    name: "flex",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element generates a principal flex container box and establishes a flex formatting context.",
                },
                {
                    name: "flexbox",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.",
                },
                {
                    name: "flow-root",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element generates a block container box, and lays out its contents using flow layout.",
                },
                {
                    name: "grid",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element generates a principal grid container box, and establishes a grid formatting context.",
                },
                {
                    name: "inline",
                    description: "The element generates an inline-level box.",
                },
                {
                    name: "inline-block",
                    description: "A block box, which itself is flowed as a single inline box, similar to a replaced element. The inside of an inline-block is formatted as a block box, and the box itself is formatted as an inline box.",
                },
                {
                    name: "inline-flex",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Inline-level flex container.",
                },
                {
                    name: "inline-flexbox",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Inline-level flex container. Standardized as 'inline-flex'",
                },
                {
                    name: "inline-table",
                    description: "Inline-level table wrapper box containing table box.",
                },
                {
                    name: "list-item",
                    description: "One or more block boxes and one marker box.",
                },
                {
                    name: "-moz-box",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.",
                },
                {
                    name: "-moz-deck",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-grid",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-grid-group",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-grid-line",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-groupbox",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-inline-box",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Inline-level flex container. Standardized as 'inline-flex'",
                },
                {
                    name: "-moz-inline-grid",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-inline-stack",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-marker",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-popup",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-moz-stack",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                },
                {
                    name: "-ms-flexbox",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.",
                },
                {
                    name: "-ms-grid",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element generates a principal grid container box, and establishes a grid formatting context.",
                },
                {
                    name: "-ms-inline-flexbox",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Inline-level flex container. Standardized as 'inline-flex'",
                },
                {
                    name: "-ms-inline-grid",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Inline-level grid container.",
                },
                {
                    name: "none",
                    description: "The element and its descendants generates no boxes.",
                },
                {
                    name: "ruby",
                    description: "The element generates a principal ruby container box, and establishes a ruby formatting context.",
                },
                {
                    name: "ruby-base",
                },
                {
                    name: "ruby-base-container",
                },
                {
                    name: "ruby-text",
                },
                {
                    name: "ruby-text-container",
                },
                {
                    name: "run-in",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element generates a run-in box. Run-in elements act like inlines or blocks, depending on the surrounding elements.",
                },
                {
                    name: "table",
                    description: "The element generates a principal table wrapper box containing an additionally-generated table box, and establishes a table formatting context.",
                },
                {
                    name: "table-caption",
                },
                {
                    name: "table-cell",
                },
                {
                    name: "table-column",
                },
                {
                    name: "table-column-group",
                },
                {
                    name: "table-footer-group",
                },
                {
                    name: "table-header-group",
                },
                {
                    name: "table-row",
                },
                {
                    name: "table-row-group",
                },
                {
                    name: "-webkit-box",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.",
                },
                {
                    name: "-webkit-flex",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "The element lays out its contents using flow layout (block-and-inline layout).",
                },
                {
                    name: "-webkit-inline-box",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Inline-level flex container. Standardized as 'inline-flex'",
                },
                {
                    name: "-webkit-inline-flex",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Inline-level flex container.",
                },
            ],
            syntax: "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
            relevance: 96,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/display",
                },
            ],
            description: "In combination with 'float' and 'position', determines the type of box or boxes that are generated for an element.",
            restrictions: ["enum"],
        },
        {
            name: "empty-cells",
            browsers: ["E12", "FF1", "S1.2", "C1", "IE8", "O4"],
            values: [
                {
                    name: "hide",
                    description: "No borders or backgrounds are drawn around/behind empty cells.",
                },
                {
                    name: "-moz-show-background",
                    browsers: ["E12", "FF1", "S1.2", "C1", "IE8", "O4"],
                },
                {
                    name: "show",
                    description: "Borders and backgrounds are drawn around/behind empty cells (like normal cells).",
                },
            ],
            syntax: "show | hide",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/empty-cells",
                },
            ],
            description: "In the separated borders model, this property controls the rendering of borders and backgrounds around cells that have no visible content.",
            restrictions: ["enum"],
        },
        {
            name: "enable-background",
            values: [
                {
                    name: "accumulate",
                    description: "If the ancestor container element has a property of new, then all graphics elements within the current container are rendered both on the parent's background image and onto the target.",
                },
                {
                    name: "new",
                    description: "Create a new background image canvas. All children of the current container element can access the background, and they will be rendered onto both the parent's background image canvas in addition to the target device.",
                },
            ],
            relevance: 50,
            description: "Deprecated. Use 'isolation' property instead when support allows. Specifies how the accumulation of the background image is managed.",
            restrictions: ["integer", "length", "percentage", "enum"],
        },
        {
            name: "fallback",
            browsers: ["FF33"],
            atRule: "@counter-style",
            syntax: "<counter-style-name>",
            relevance: 50,
            description: "@counter-style descriptor. Specifies a fallback counter style to be used when the current counter style can't create a representation for a given counter value.",
            restrictions: ["identifier"],
        },
        {
            name: "fill",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "url()",
                    description: "A URL reference to a paint server element, which is an element that defines a paint server: 'hatch', 'linearGradient', 'mesh', 'pattern', 'radialGradient' and 'solidcolor'.",
                },
                {
                    name: "none",
                    description: "No paint is applied in this layer.",
                },
            ],
            syntax: "none | <color> | <url> [none | <color>]? | context-fill | context-stroke",
            relevance: 80,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/fill",
                },
            ],
            description: "Paints the interior of the given graphical element.",
            restrictions: ["color", "enum", "url"],
        },
        {
            name: "fill-opacity",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            syntax: "<alpha-value>",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/fill-opacity",
                },
            ],
            description: "Specifies the opacity of the painting operation used to paint the interior the current object.",
            restrictions: ["number(0-1)"],
        },
        {
            name: "fill-rule",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "evenodd",
                    description: "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses.",
                },
                {
                    name: "nonzero",
                    description: "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray.",
                },
            ],
            syntax: "nonzero | evenodd",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/fill-rule",
                },
            ],
            description: "Indicates the algorithm (or winding rule) which is to be used to determine what parts of the canvas are included inside the shape.",
            restrictions: ["enum"],
        },
        {
            name: "filter",
            browsers: ["E12", "FF35", "S9.1", "C53", "O40"],
            values: [
                {
                    name: "none",
                    description: "No filter effects are applied.",
                },
                {
                    name: "blur()",
                    description: "Applies a Gaussian blur to the input image.",
                },
                {
                    name: "brightness()",
                    description: "Applies a linear multiplier to input image, making it appear more or less bright.",
                },
                {
                    name: "contrast()",
                    description: "Adjusts the contrast of the input.",
                },
                {
                    name: "drop-shadow()",
                    description: "Applies a drop shadow effect to the input image.",
                },
                {
                    name: "grayscale()",
                    description: "Converts the input image to grayscale.",
                },
                {
                    name: "hue-rotate()",
                    description: "Applies a hue rotation on the input image. ",
                },
                {
                    name: "invert()",
                    description: "Inverts the samples in the input image.",
                },
                {
                    name: "opacity()",
                    description: "Applies transparency to the samples in the input image.",
                },
                {
                    name: "saturate()",
                    description: "Saturates the input image.",
                },
                {
                    name: "sepia()",
                    description: "Converts the input image to sepia.",
                },
                {
                    name: "url()",
                    browsers: ["E12", "FF35", "S9.1", "C53", "O40"],
                    description: "A filter reference to a <filter> element.",
                },
            ],
            syntax: "none | <filter-function-list>",
            relevance: 70,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/filter",
                },
            ],
            description: "Processes an element's rendering before it is displayed in the document, by applying one or more filter effects.",
            restrictions: ["enum", "url"],
        },
        {
            name: "flex",
            browsers: ["E12", "FF20", "S9", "C29", "IE11", "O12.1"],
            values: [
                {
                    name: "auto",
                    description: "Retrieves the value of the main size property as the used 'flex-basis'.",
                },
                {
                    name: "content",
                    browsers: ["E12", "FF20", "S9", "C29", "IE11", "O12.1"],
                    description: "Indicates automatic sizing, based on the flex item's content.",
                },
                {
                    name: "none",
                    description: "Expands to '0 0 auto'.",
                },
            ],
            syntax: "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/flex",
                },
            ],
            description: "Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis.",
            restrictions: ["length", "number", "percentage"],
        },
        {
            name: "flex-basis",
            browsers: ["E12", "FF22", "S9", "C29", "IE11", "O12.1"],
            values: [
                {
                    name: "auto",
                    description: "Retrieves the value of the main size property as the used 'flex-basis'.",
                },
                {
                    name: "content",
                    browsers: ["E12", "FF22", "S9", "C29", "IE11", "O12.1"],
                    description: "Indicates automatic sizing, based on the flex item's content.",
                },
            ],
            syntax: "content | <'width'>",
            relevance: 70,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/flex-basis",
                },
            ],
            description: "Sets the flex basis.",
            restrictions: ["length", "number", "percentage"],
        },
        {
            name: "flex-direction",
            browsers: ["E12", "FF20", "S9", "C29", "IE11", "O12.1"],
            values: [
                {
                    name: "column",
                    description: "The flex container's main axis has the same orientation as the block axis of the current writing mode.",
                },
                {
                    name: "column-reverse",
                    description: "Same as 'column', except the main-start and main-end directions are swapped.",
                },
                {
                    name: "row",
                    description: "The flex container's main axis has the same orientation as the inline axis of the current writing mode.",
                },
                {
                    name: "row-reverse",
                    description: "Same as 'row', except the main-start and main-end directions are swapped.",
                },
            ],
            syntax: "row | row-reverse | column | column-reverse",
            relevance: 85,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/flex-direction",
                },
            ],
            description: "Specifies how flex items are placed in the flex container, by setting the direction of the flex container's main axis.",
            restrictions: ["enum"],
        },
        {
            name: "flex-flow",
            browsers: ["E12", "FF28", "S9", "C29", "IE11", "O12.1"],
            values: [
                {
                    name: "column",
                    description: "The flex container's main axis has the same orientation as the block axis of the current writing mode.",
                },
                {
                    name: "column-reverse",
                    description: "Same as 'column', except the main-start and main-end directions are swapped.",
                },
                {
                    name: "nowrap",
                    description: "The flex container is single-line.",
                },
                {
                    name: "row",
                    description: "The flex container's main axis has the same orientation as the inline axis of the current writing mode.",
                },
                {
                    name: "row-reverse",
                    description: "Same as 'row', except the main-start and main-end directions are swapped.",
                },
                {
                    name: "wrap",
                    description: "The flexbox is multi-line.",
                },
                {
                    name: "wrap-reverse",
                    description: "Same as 'wrap', except the cross-start and cross-end directions are swapped.",
                },
            ],
            syntax: "<'flex-direction'> || <'flex-wrap'>",
            relevance: 64,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/flex-flow",
                },
            ],
            description: "Specifies how flexbox items are placed in the flexbox.",
            restrictions: ["enum"],
        },
        {
            name: "flex-grow",
            browsers: ["E12", "FF20", "S9", "C29", "IE11", "O12.1"],
            syntax: "<number>",
            relevance: 77,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/flex-grow",
                },
            ],
            description: "Sets the flex grow factor. Negative numbers are invalid.",
            restrictions: ["number"],
        },
        {
            name: "flex-shrink",
            browsers: ["E12", "FF20", "S9", "C29", "IE10", "O12.1"],
            syntax: "<number>",
            relevance: 77,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/flex-shrink",
                },
            ],
            description: "Sets the flex shrink factor. Negative numbers are invalid.",
            restrictions: ["number"],
        },
        {
            name: "flex-wrap",
            browsers: ["E12", "FF28", "S9", "C29", "IE11", "O16"],
            values: [
                {
                    name: "nowrap",
                    description: "The flex container is single-line.",
                },
                {
                    name: "wrap",
                    description: "The flexbox is multi-line.",
                },
                {
                    name: "wrap-reverse",
                    description: "Same as 'wrap', except the cross-start and cross-end directions are swapped.",
                },
            ],
            syntax: "nowrap | wrap | wrap-reverse",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/flex-wrap",
                },
            ],
            description: "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
            restrictions: ["enum"],
        },
        {
            name: "float",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "inline-end",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "A keyword indicating that the element must float on the end side of its containing block. That is the right side with ltr scripts, and the left side with rtl scripts.",
                },
                {
                    name: "inline-start",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "A keyword indicating that the element must float on the start side of its containing block. That is the left side with ltr scripts, and the right side with rtl scripts.",
                },
                {
                    name: "left",
                    description: "The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top (subject to the 'clear' property).",
                },
                {
                    name: "none",
                    description: "The box is not floated.",
                },
                {
                    name: "right",
                    description: "Similar to 'left', except the box is floated to the right, and content flows on the left side of the box, starting at the top.",
                },
            ],
            syntax: "left | right | none | inline-start | inline-end",
            relevance: 88,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/float",
                },
            ],
            description: "Specifies how a box should be floated. It may be set for any element, but only applies to elements that generate boxes that are not absolutely positioned.",
            restrictions: ["enum"],
        },
        {
            name: "flood-color",
            browsers: ["E12", "FF3", "S6", "C5", "IE11", "O15"],
            relevance: 50,
            description: "Indicates what color to use to flood the current filter primitive subregion.",
            restrictions: ["color"],
        },
        {
            name: "flood-opacity",
            browsers: ["E12", "FF3", "S6", "C5", "IE11", "O15"],
            relevance: 50,
            description: "Indicates what opacity to use to flood the current filter primitive subregion.",
            restrictions: ["number(0-1)", "percentage"],
        },
        {
            name: "font",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "100",
                    description: "Thin",
                },
                {
                    name: "200",
                    description: "Extra Light (Ultra Light)",
                },
                {
                    name: "300",
                    description: "Light",
                },
                {
                    name: "400",
                    description: "Normal",
                },
                {
                    name: "500",
                    description: "Medium",
                },
                {
                    name: "600",
                    description: "Semi Bold (Demi Bold)",
                },
                {
                    name: "700",
                    description: "Bold",
                },
                {
                    name: "800",
                    description: "Extra Bold (Ultra Bold)",
                },
                {
                    name: "900",
                    description: "Black (Heavy)",
                },
                {
                    name: "bold",
                    description: "Same as 700",
                },
                {
                    name: "bolder",
                    description: "Specifies the weight of the face bolder than the inherited value.",
                },
                {
                    name: "caption",
                    description: "The font used for captioned controls (e.g., buttons, drop-downs, etc.).",
                },
                {
                    name: "icon",
                    description: "The font used to label icons.",
                },
                {
                    name: "italic",
                    description: "Selects a font that is labeled 'italic', or, if that is not available, one labeled 'oblique'.",
                },
                {
                    name: "large",
                },
                {
                    name: "larger",
                },
                {
                    name: "lighter",
                    description: "Specifies the weight of the face lighter than the inherited value.",
                },
                {
                    name: "medium",
                },
                {
                    name: "menu",
                    description: "The font used in menus (e.g., dropdown menus and menu lists).",
                },
                {
                    name: "message-box",
                    description: "The font used in dialog boxes.",
                },
                {
                    name: "normal",
                    description: "Specifies a face that is not labeled as a small-caps font.",
                },
                {
                    name: "oblique",
                    description: "Selects a font that is labeled 'oblique'.",
                },
                {
                    name: "small",
                },
                {
                    name: "small-caps",
                    description: "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font.",
                },
                {
                    name: "small-caption",
                    description: "The font used for labeling small controls.",
                },
                {
                    name: "smaller",
                },
                {
                    name: "status-bar",
                    description: "The font used in window status bars.",
                },
                {
                    name: "x-large",
                },
                {
                    name: "x-small",
                },
                {
                    name: "xx-large",
                },
                {
                    name: "xx-small",
                },
            ],
            syntax: "[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font",
                },
            ],
            description: "Shorthand property for setting 'font-style', 'font-variant', 'font-weight', 'font-size', 'line-height', and 'font-family', at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts.",
            restrictions: ["font"],
        },
        {
            name: "font-family",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",
                },
                {
                    name: "Arial, Helvetica, sans-serif",
                },
                {
                    name: "Cambria, Cochin, Georgia, Times, 'Times New Roman', serif",
                },
                {
                    name: "'Courier New', Courier, monospace",
                },
                {
                    name: "cursive",
                },
                {
                    name: "fantasy",
                },
                {
                    name: "'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif",
                },
                {
                    name: "Georgia, 'Times New Roman', Times, serif",
                },
                {
                    name: "'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif",
                },
                {
                    name: "Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif",
                },
                {
                    name: "'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif",
                },
                {
                    name: "monospace",
                },
                {
                    name: "sans-serif",
                },
                {
                    name: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                },
                {
                    name: "serif",
                },
                {
                    name: "'Times New Roman', Times, serif",
                },
                {
                    name: "'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif",
                },
                {
                    name: "Verdana, Geneva, Tahoma, sans-serif",
                },
            ],
            atRule: "@font-face",
            syntax: "<family-name>",
            relevance: 94,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-family",
                },
            ],
            description: "Specifies a prioritized list of font family names or generic family names. A user agent iterates through the list of family names until it matches an available font that contains a glyph for the character to be rendered.",
            restrictions: ["font"],
        },
        {
            name: "font-feature-settings",
            browsers: ["E15", "FF34", "S9.1", "C48", "IE10", "O35"],
            values: [
                {
                    name: '"aalt"',
                    description: "Access All Alternates.",
                },
                {
                    name: '"abvf"',
                    description: "Above-base Forms. Required in Khmer script.",
                },
                {
                    name: '"abvm"',
                    description: "Above-base Mark Positioning. Required in Indic scripts.",
                },
                {
                    name: '"abvs"',
                    description: "Above-base Substitutions. Required in Indic scripts.",
                },
                {
                    name: '"afrc"',
                    description: "Alternative Fractions.",
                },
                {
                    name: '"akhn"',
                    description: "Akhand. Required in most Indic scripts.",
                },
                {
                    name: '"blwf"',
                    description: "Below-base Form. Required in a number of Indic scripts.",
                },
                {
                    name: '"blwm"',
                    description: "Below-base Mark Positioning. Required in Indic scripts.",
                },
                {
                    name: '"blws"',
                    description: "Below-base Substitutions. Required in Indic scripts.",
                },
                {
                    name: '"calt"',
                    description: "Contextual Alternates.",
                },
                {
                    name: '"case"',
                    description: "Case-Sensitive Forms. Applies only to European scripts; particularly prominent in Spanish-language setting.",
                },
                {
                    name: '"ccmp"',
                    description: "Glyph Composition/Decomposition.",
                },
                {
                    name: '"cfar"',
                    description: "Conjunct Form After Ro. Required in Khmer scripts.",
                },
                {
                    name: '"cjct"',
                    description: "Conjunct Forms. Required in Indic scripts that show similarity to Devanagari.",
                },
                {
                    name: '"clig"',
                    description: "Contextual Ligatures.",
                },
                {
                    name: '"cpct"',
                    description: "Centered CJK Punctuation. Used primarily in Chinese fonts.",
                },
                {
                    name: '"cpsp"',
                    description: "Capital Spacing. Should not be used in connecting scripts (e.g. most Arabic).",
                },
                {
                    name: '"cswh"',
                    description: "Contextual Swash.",
                },
                {
                    name: '"curs"',
                    description: "Cursive Positioning. Can be used in any cursive script.",
                },
                {
                    name: '"c2pc"',
                    description: "Petite Capitals From Capitals. Applies only to bicameral scripts.",
                },
                {
                    name: '"c2sc"',
                    description: "Small Capitals From Capitals. Applies only to bicameral scripts.",
                },
                {
                    name: '"dist"',
                    description: "Distances. Required in Indic scripts.",
                },
                {
                    name: '"dlig"',
                    description: "Discretionary ligatures.",
                },
                {
                    name: '"dnom"',
                    description: "Denominators.",
                },
                {
                    name: '"dtls"',
                    description: "Dotless Forms. Applied to math formula layout.",
                },
                {
                    name: '"expt"',
                    description: "Expert Forms. Applies only to Japanese.",
                },
                {
                    name: '"falt"',
                    description: "Final Glyph on Line Alternates. Can be used in any cursive script.",
                },
                {
                    name: '"fin2"',
                    description: "Terminal Form #2. Used only with the Syriac script.",
                },
                {
                    name: '"fin3"',
                    description: "Terminal Form #3. Used only with the Syriac script.",
                },
                {
                    name: '"fina"',
                    description: "Terminal Forms. Can be used in any alphabetic script.",
                },
                {
                    name: '"flac"',
                    description: "Flattened ascent forms. Applied to math formula layout.",
                },
                {
                    name: '"frac"',
                    description: "Fractions.",
                },
                {
                    name: '"fwid"',
                    description: "Full Widths. Applies to any script which can use monospaced forms.",
                },
                {
                    name: '"half"',
                    description: "Half Forms. Required in Indic scripts that show similarity to Devanagari.",
                },
                {
                    name: '"haln"',
                    description: "Halant Forms. Required in Indic scripts.",
                },
                {
                    name: '"halt"',
                    description: "Alternate Half Widths. Used only in CJKV fonts.",
                },
                {
                    name: '"hist"',
                    description: "Historical Forms.",
                },
                {
                    name: '"hkna"',
                    description: "Horizontal Kana Alternates. Applies only to fonts that support kana (hiragana and katakana).",
                },
                {
                    name: '"hlig"',
                    description: "Historical Ligatures.",
                },
                {
                    name: '"hngl"',
                    description: "Hangul. Korean only.",
                },
                {
                    name: '"hojo"',
                    description: "Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms). Used only with Kanji script.",
                },
                {
                    name: '"hwid"',
                    description: "Half Widths. Generally used only in CJKV fonts.",
                },
                {
                    name: '"init"',
                    description: "Initial Forms. Can be used in any alphabetic script.",
                },
                {
                    name: '"isol"',
                    description: "Isolated Forms. Can be used in any cursive script.",
                },
                {
                    name: '"ital"',
                    description: "Italics. Applies mostly to Latin; note that many non-Latin fonts contain Latin as well.",
                },
                {
                    name: '"jalt"',
                    description: "Justification Alternates. Can be used in any cursive script.",
                },
                {
                    name: '"jp78"',
                    description: "JIS78 Forms. Applies only to Japanese.",
                },
                {
                    name: '"jp83"',
                    description: "JIS83 Forms. Applies only to Japanese.",
                },
                {
                    name: '"jp90"',
                    description: "JIS90 Forms. Applies only to Japanese.",
                },
                {
                    name: '"jp04"',
                    description: "JIS2004 Forms. Applies only to Japanese.",
                },
                {
                    name: '"kern"',
                    description: "Kerning.",
                },
                {
                    name: '"lfbd"',
                    description: "Left Bounds.",
                },
                {
                    name: '"liga"',
                    description: "Standard Ligatures.",
                },
                {
                    name: '"ljmo"',
                    description: "Leading Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported.",
                },
                {
                    name: '"lnum"',
                    description: "Lining Figures.",
                },
                {
                    name: '"locl"',
                    description: "Localized Forms.",
                },
                {
                    name: '"ltra"',
                    description: "Left-to-right glyph alternates.",
                },
                {
                    name: '"ltrm"',
                    description: "Left-to-right mirrored forms.",
                },
                {
                    name: '"mark"',
                    description: "Mark Positioning.",
                },
                {
                    name: '"med2"',
                    description: "Medial Form #2. Used only with the Syriac script.",
                },
                {
                    name: '"medi"',
                    description: "Medial Forms.",
                },
                {
                    name: '"mgrk"',
                    description: "Mathematical Greek.",
                },
                {
                    name: '"mkmk"',
                    description: "Mark to Mark Positioning.",
                },
                {
                    name: '"nalt"',
                    description: "Alternate Annotation Forms.",
                },
                {
                    name: '"nlck"',
                    description: "NLC Kanji Forms. Used only with Kanji script.",
                },
                {
                    name: '"nukt"',
                    description: "Nukta Forms. Required in Indic scripts..",
                },
                {
                    name: '"numr"',
                    description: "Numerators.",
                },
                {
                    name: '"onum"',
                    description: "Oldstyle Figures.",
                },
                {
                    name: '"opbd"',
                    description: "Optical Bounds.",
                },
                {
                    name: '"ordn"',
                    description: "Ordinals. Applies mostly to Latin script.",
                },
                {
                    name: '"ornm"',
                    description: "Ornaments.",
                },
                {
                    name: '"palt"',
                    description: "Proportional Alternate Widths. Used mostly in CJKV fonts.",
                },
                {
                    name: '"pcap"',
                    description: "Petite Capitals.",
                },
                {
                    name: '"pkna"',
                    description: "Proportional Kana. Generally used only in Japanese fonts.",
                },
                {
                    name: '"pnum"',
                    description: "Proportional Figures.",
                },
                {
                    name: '"pref"',
                    description: "Pre-base Forms. Required in Khmer and Myanmar (Burmese) scripts and southern Indic scripts that may display a pre-base form of Ra.",
                },
                {
                    name: '"pres"',
                    description: "Pre-base Substitutions. Required in Indic scripts.",
                },
                {
                    name: '"pstf"',
                    description: "Post-base Forms. Required in scripts of south and southeast Asia that have post-base forms for consonants eg: Gurmukhi, Malayalam, Khmer.",
                },
                {
                    name: '"psts"',
                    description: "Post-base Substitutions.",
                },
                {
                    name: '"pwid"',
                    description: "Proportional Widths.",
                },
                {
                    name: '"qwid"',
                    description: "Quarter Widths. Generally used only in CJKV fonts.",
                },
                {
                    name: '"rand"',
                    description: "Randomize.",
                },
                {
                    name: '"rclt"',
                    description: "Required Contextual Alternates. May apply to any script, but is especially important for many styles of Arabic.",
                },
                {
                    name: '"rlig"',
                    description: "Required Ligatures. Applies to Arabic and Syriac. May apply to some other scripts.",
                },
                {
                    name: '"rkrf"',
                    description: "Rakar Forms. Required in Devanagari and Gujarati scripts.",
                },
                {
                    name: '"rphf"',
                    description: "Reph Form. Required in Indic scripts. E.g. Devanagari, Kannada.",
                },
                {
                    name: '"rtbd"',
                    description: "Right Bounds.",
                },
                {
                    name: '"rtla"',
                    description: "Right-to-left alternates.",
                },
                {
                    name: '"rtlm"',
                    description: "Right-to-left mirrored forms.",
                },
                {
                    name: '"ruby"',
                    description: "Ruby Notation Forms. Applies only to Japanese.",
                },
                {
                    name: '"salt"',
                    description: "Stylistic Alternates.",
                },
                {
                    name: '"sinf"',
                    description: "Scientific Inferiors.",
                },
                {
                    name: '"size"',
                    description: "Optical size.",
                },
                {
                    name: '"smcp"',
                    description: "Small Capitals. Applies only to bicameral scripts.",
                },
                {
                    name: '"smpl"',
                    description: "Simplified Forms. Applies only to Chinese and Japanese.",
                },
                {
                    name: '"ssty"',
                    description: "Math script style alternates.",
                },
                {
                    name: '"stch"',
                    description: "Stretching Glyph Decomposition.",
                },
                {
                    name: '"subs"',
                    description: "Subscript.",
                },
                {
                    name: '"sups"',
                    description: "Superscript.",
                },
                {
                    name: '"swsh"',
                    description: "Swash. Does not apply to ideographic scripts.",
                },
                {
                    name: '"titl"',
                    description: "Titling.",
                },
                {
                    name: '"tjmo"',
                    description: "Trailing Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported.",
                },
                {
                    name: '"tnam"',
                    description: "Traditional Name Forms. Applies only to Japanese.",
                },
                {
                    name: '"tnum"',
                    description: "Tabular Figures.",
                },
                {
                    name: '"trad"',
                    description: "Traditional Forms. Applies only to Chinese and Japanese.",
                },
                {
                    name: '"twid"',
                    description: "Third Widths. Generally used only in CJKV fonts.",
                },
                {
                    name: '"unic"',
                    description: "Unicase.",
                },
                {
                    name: '"valt"',
                    description: "Alternate Vertical Metrics. Applies only to scripts with vertical writing modes.",
                },
                {
                    name: '"vatu"',
                    description: "Vattu Variants. Used for Indic scripts. E.g. Devanagari.",
                },
                {
                    name: '"vert"',
                    description: "Vertical Alternates. Applies only to scripts with vertical writing modes.",
                },
                {
                    name: '"vhal"',
                    description: "Alternate Vertical Half Metrics. Used only in CJKV fonts.",
                },
                {
                    name: '"vjmo"',
                    description: "Vowel Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported.",
                },
                {
                    name: '"vkna"',
                    description: "Vertical Kana Alternates. Applies only to fonts that support kana (hiragana and katakana).",
                },
                {
                    name: '"vkrn"',
                    description: "Vertical Kerning.",
                },
                {
                    name: '"vpal"',
                    description: "Proportional Alternate Vertical Metrics. Used mostly in CJKV fonts.",
                },
                {
                    name: '"vrt2"',
                    description: "Vertical Alternates and Rotation. Applies only to scripts with vertical writing modes.",
                },
                {
                    name: '"zero"',
                    description: "Slashed Zero.",
                },
                {
                    name: "normal",
                    description: "No change in glyph substitution or positioning occurs.",
                },
                {
                    name: "off",
                    description: "Disable feature.",
                },
                {
                    name: "on",
                    description: "Enable feature.",
                },
            ],
            atRule: "@font-face",
            syntax: "normal | <feature-tag-value>#",
            relevance: 59,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-feature-settings",
                },
            ],
            description: "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            restrictions: ["string", "integer"],
        },
        {
            name: "font-kerning",
            browsers: ["E79", "FF32", "S9", "C33", "O20"],
            values: [
                {
                    name: "auto",
                    description: "Specifies that kerning is applied at the discretion of the user agent.",
                },
                {
                    name: "none",
                    description: "Specifies that kerning is not applied.",
                },
                {
                    name: "normal",
                    description: "Specifies that kerning is applied.",
                },
            ],
            syntax: "auto | normal | none",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-kerning",
                },
            ],
            description: "Kerning is the contextual adjustment of inter-glyph spacing. This property controls metric kerning, kerning that utilizes adjustment data contained in the font.",
            restrictions: ["enum"],
        },
        {
            name: "font-language-override",
            browsers: ["FF34"],
            values: [
                {
                    name: "normal",
                    description: "Implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.",
                },
            ],
            syntax: "normal | <string>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-language-override",
                },
            ],
            description: "The value of 'normal' implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.",
            restrictions: ["string"],
        },
        {
            name: "font-size",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O7"],
            values: [
                {
                    name: "large",
                },
                {
                    name: "larger",
                },
                {
                    name: "medium",
                },
                {
                    name: "small",
                },
                {
                    name: "smaller",
                },
                {
                    name: "x-large",
                },
                {
                    name: "x-small",
                },
                {
                    name: "xx-large",
                },
                {
                    name: "xx-small",
                },
            ],
            syntax: "<absolute-size> | <relative-size> | <length-percentage>",
            relevance: 94,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-size",
                },
            ],
            description: "Indicates the desired height of glyphs from the font. For scalable fonts, the font-size is a scale factor applied to the EM unit of the font. (Note that certain glyphs may bleed outside their EM box.) For non-scalable fonts, the font-size is converted into absolute units and matched against the declared font-size of the font, using the same absolute coordinate space for both of the matched values.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "font-size-adjust",
            browsers: ["E127", "FF3", "S16.4", "C127", "O113"],
            values: [
                {
                    name: "none",
                    description: "Do not preserve the font's x-height.",
                },
            ],
            syntax: "none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-size-adjust",
                },
            ],
            description: "Preserves the readability of text when font fallback occurs by adjusting the font-size so that the x-height is the same regardless of the font used.",
            restrictions: ["number"],
        },
        {
            name: "font-stretch",
            browsers: ["E12", "FF9", "S11", "C60", "IE9", "O47"],
            values: [
                {
                    name: "condensed",
                },
                {
                    name: "expanded",
                },
                {
                    name: "extra-condensed",
                },
                {
                    name: "extra-expanded",
                },
                {
                    name: "narrower",
                    browsers: ["E12", "FF9", "S11", "C60", "IE9", "O47"],
                    description: "Indicates a narrower value relative to the width of the parent element.",
                },
                {
                    name: "normal",
                },
                {
                    name: "semi-condensed",
                },
                {
                    name: "semi-expanded",
                },
                {
                    name: "ultra-condensed",
                },
                {
                    name: "ultra-expanded",
                },
                {
                    name: "wider",
                    browsers: ["E12", "FF9", "S11", "C60", "IE9", "O47"],
                    description: "Indicates a wider value relative to the width of the parent element.",
                },
            ],
            atRule: "@font-face",
            syntax: "<font-stretch-absolute>{1,2}",
            relevance: 57,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-stretch",
                },
            ],
            description: "Selects a normal, condensed, or expanded face from a font family.",
            restrictions: ["enum"],
        },
        {
            name: "font-style",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "italic",
                    description: "Selects a font that is labeled as an 'italic' face, or an 'oblique' face if one is not",
                },
                {
                    name: "normal",
                    description: "Selects a face that is classified as 'normal'.",
                },
                {
                    name: "oblique",
                    description: "Selects a font that is labeled as an 'oblique' face, or an 'italic' face if one is not.",
                },
            ],
            atRule: "@font-face",
            syntax: "normal | italic | oblique <angle>{0,2}",
            relevance: 89,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-style",
                },
            ],
            description: "Allows italic or oblique faces to be selected. Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face.",
            restrictions: ["enum"],
        },
        {
            name: "font-synthesis",
            browsers: ["E97", "FF34", "S9", "C97", "O83"],
            values: [
                {
                    name: "none",
                    description: "Disallow all synthetic faces.",
                },
                {
                    name: "style",
                    description: "Allow synthetic italic faces.",
                },
                {
                    name: "weight",
                    description: "Allow synthetic bold faces.",
                },
            ],
            syntax: "none | [ weight || style || small-caps || position]",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-synthesis",
                },
            ],
            description: "Controls whether user agents are allowed to synthesize bold or oblique font faces when a font family lacks bold or italic faces.",
            restrictions: ["enum"],
        },
        {
            name: "font-variant",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "normal",
                    description: "Specifies a face that is not labeled as a small-caps font.",
                },
                {
                    name: "small-caps",
                    description: "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font.",
                },
            ],
            syntax: "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            relevance: 64,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant",
                },
            ],
            description: "Specifies variant representations of the font",
            restrictions: ["enum"],
        },
        {
            name: "font-variant-alternates",
            browsers: ["E111", "FF34", "S9.1", "C111", "O97"],
            values: [
                {
                    name: "annotation()",
                    description: "Enables display of alternate annotation forms.",
                },
                {
                    name: "character-variant()",
                    description: "Enables display of specific character variants.",
                },
                {
                    name: "historical-forms",
                    description: "Enables display of historical forms.",
                },
                {
                    name: "normal",
                    description: "None of the features are enabled.",
                },
                {
                    name: "ornaments()",
                    description: "Enables replacement of default glyphs with ornaments, if provided in the font.",
                },
                {
                    name: "styleset()",
                    description: "Enables display with stylistic sets.",
                },
                {
                    name: "stylistic()",
                    description: "Enables display of stylistic alternates.",
                },
                {
                    name: "swash()",
                    description: "Enables display of swash glyphs.",
                },
            ],
            syntax: "normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates",
                },
            ],
            description: "For any given character, fonts can provide a variety of alternate glyphs in addition to the default glyph for that character. This property provides control over the selection of these alternate glyphs.",
            restrictions: ["enum"],
        },
        {
            name: "font-variant-caps",
            browsers: ["E79", "FF34", "S9.1", "C52", "O39"],
            values: [
                {
                    name: "all-petite-caps",
                    description: "Enables display of petite capitals for both upper and lowercase letters.",
                },
                {
                    name: "all-small-caps",
                    description: "Enables display of small capitals for both upper and lowercase letters.",
                },
                {
                    name: "normal",
                    description: "None of the features are enabled.",
                },
                {
                    name: "petite-caps",
                    description: "Enables display of petite capitals.",
                },
                {
                    name: "small-caps",
                    description: "Enables display of small capitals. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.",
                },
                {
                    name: "titling-caps",
                    description: "Enables display of titling capitals.",
                },
                {
                    name: "unicase",
                    description: "Enables display of mixture of small capitals for uppercase letters with normal lowercase letters.",
                },
            ],
            syntax: "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-caps",
                },
            ],
            description: "Specifies control over capitalized forms.",
            restrictions: ["enum"],
        },
        {
            name: "font-variant-east-asian",
            browsers: ["E79", "FF34", "S9.1", "C63", "O50"],
            values: [
                {
                    name: "full-width",
                    description: "Enables rendering of full-width variants.",
                },
                {
                    name: "jis04",
                    description: "Enables rendering of JIS04 forms.",
                },
                {
                    name: "jis78",
                    description: "Enables rendering of JIS78 forms.",
                },
                {
                    name: "jis83",
                    description: "Enables rendering of JIS83 forms.",
                },
                {
                    name: "jis90",
                    description: "Enables rendering of JIS90 forms.",
                },
                {
                    name: "normal",
                    description: "None of the features are enabled.",
                },
                {
                    name: "proportional-width",
                    description: "Enables rendering of proportionally-spaced variants.",
                },
                {
                    name: "ruby",
                    description: "Enables display of ruby variant glyphs.",
                },
                {
                    name: "simplified",
                    description: "Enables rendering of simplified forms.",
                },
                {
                    name: "traditional",
                    description: "Enables rendering of traditional forms.",
                },
            ],
            syntax: "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian",
                },
            ],
            description: "Allows control of glyph substitute and positioning in East Asian text.",
            restrictions: ["enum"],
        },
        {
            name: "font-variant-ligatures",
            browsers: ["E79", "FF34", "S9.1", "C34", "O21"],
            values: [
                {
                    name: "additional-ligatures",
                    description: "Enables display of additional ligatures.",
                },
                {
                    name: "common-ligatures",
                    description: "Enables display of common ligatures.",
                },
                {
                    name: "contextual",
                    browsers: ["E79", "FF34", "S9.1", "C34", "O21"],
                    description: "Enables display of contextual alternates.",
                },
                {
                    name: "discretionary-ligatures",
                    description: "Enables display of discretionary ligatures.",
                },
                {
                    name: "historical-ligatures",
                    description: "Enables display of historical ligatures.",
                },
                {
                    name: "no-additional-ligatures",
                    description: "Disables display of additional ligatures.",
                },
                {
                    name: "no-common-ligatures",
                    description: "Disables display of common ligatures.",
                },
                {
                    name: "no-contextual",
                    browsers: ["E79", "FF34", "S9.1", "C34", "O21"],
                    description: "Disables display of contextual alternates.",
                },
                {
                    name: "no-discretionary-ligatures",
                    description: "Disables display of discretionary ligatures.",
                },
                {
                    name: "no-historical-ligatures",
                    description: "Disables display of historical ligatures.",
                },
                {
                    name: "none",
                    browsers: ["E79", "FF34", "S9.1", "C34", "O21"],
                    description: "Disables all ligatures.",
                },
                {
                    name: "normal",
                    description: "Implies that the defaults set by the font are used.",
                },
            ],
            syntax: "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures",
                },
            ],
            description: "Specifies control over which ligatures are enabled or disabled. A value of 'normal' implies that the defaults set by the font are used.",
            restrictions: ["enum"],
        },
        {
            name: "font-variant-numeric",
            browsers: ["E79", "FF34", "S9.1", "C52", "O39"],
            values: [
                {
                    name: "diagonal-fractions",
                    description: "Enables display of lining diagonal fractions.",
                },
                {
                    name: "lining-nums",
                    description: "Enables display of lining numerals.",
                },
                {
                    name: "normal",
                    description: "None of the features are enabled.",
                },
                {
                    name: "oldstyle-nums",
                    description: "Enables display of old-style numerals.",
                },
                {
                    name: "ordinal",
                    description: "Enables display of letter forms used with ordinal numbers.",
                },
                {
                    name: "proportional-nums",
                    description: "Enables display of proportional numerals.",
                },
                {
                    name: "slashed-zero",
                    description: "Enables display of slashed zeros.",
                },
                {
                    name: "stacked-fractions",
                    description: "Enables display of lining stacked fractions.",
                },
                {
                    name: "tabular-nums",
                    description: "Enables display of tabular numerals.",
                },
            ],
            syntax: "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric",
                },
            ],
            description: "Specifies control over numerical forms.",
            restrictions: ["enum"],
        },
        {
            name: "font-variant-position",
            browsers: ["FF34", "S9.1"],
            values: [
                {
                    name: "normal",
                    description: "None of the features are enabled.",
                },
                {
                    name: "sub",
                    description: "Enables display of subscript variants (OpenType feature: subs).",
                },
                {
                    name: "super",
                    description: "Enables display of superscript variants (OpenType feature: sups).",
                },
            ],
            syntax: "normal | sub | super",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-position",
                },
            ],
            description: "Specifies the vertical position",
            restrictions: ["enum"],
        },
        {
            name: "font-weight",
            browsers: ["E12", "FF1", "S1", "C2", "IE3", "O3.5"],
            values: [
                {
                    name: "100",
                    description: "Thin",
                },
                {
                    name: "200",
                    description: "Extra Light (Ultra Light)",
                },
                {
                    name: "300",
                    description: "Light",
                },
                {
                    name: "400",
                    description: "Normal",
                },
                {
                    name: "500",
                    description: "Medium",
                },
                {
                    name: "600",
                    description: "Semi Bold (Demi Bold)",
                },
                {
                    name: "700",
                    description: "Bold",
                },
                {
                    name: "800",
                    description: "Extra Bold (Ultra Bold)",
                },
                {
                    name: "900",
                    description: "Black (Heavy)",
                },
                {
                    name: "bold",
                    description: "Same as 700",
                },
                {
                    name: "bolder",
                    description: "Specifies the weight of the face bolder than the inherited value.",
                },
                {
                    name: "lighter",
                    description: "Specifies the weight of the face lighter than the inherited value.",
                },
                {
                    name: "normal",
                    description: "Same as 400",
                },
            ],
            atRule: "@font-face",
            syntax: "<font-weight-absolute>{1,2}",
            relevance: 93,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-weight",
                },
            ],
            description: "Specifies weight of glyphs in the font, their degree of blackness or stroke thickness.",
            restrictions: ["enum"],
        },
        {
            name: "glyph-orientation-horizontal",
            relevance: 50,
            description: "Controls glyph orientation when the inline-progression-direction is horizontal.",
            restrictions: ["angle", "number"],
        },
        {
            name: "glyph-orientation-vertical",
            browsers: ["S13.1"],
            values: [
                {
                    name: "auto",
                    description: "Sets the orientation based on the fullwidth or non-fullwidth characters and the most common orientation.",
                },
            ],
            relevance: 50,
            description: "Controls glyph orientation when the inline-progression-direction is vertical.",
            restrictions: ["angle", "number", "enum"],
        },
        {
            name: "grid-area",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one.",
                },
                {
                    name: "span",
                    description: "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge.",
                },
            ],
            syntax: "<grid-line> [ / <grid-line> ]{0,3}",
            relevance: 58,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-area",
                },
            ],
            description: "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end'.",
            restrictions: ["identifier", "integer"],
        },
        {
            name: "grid",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            syntax: "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid",
                },
            ],
            description: "The grid CSS property is a shorthand property that sets all of the explicit grid properties ('grid-template-rows', 'grid-template-columns', and 'grid-template-areas'), and all the implicit grid properties ('grid-auto-rows', 'grid-auto-columns', and 'grid-auto-flow'), in a single declaration.",
            restrictions: ["identifier", "length", "percentage", "string", "enum"],
        },
        {
            name: "grid-auto-columns",
            browsers: ["E16", "FF70", "S10.1", "C57", "IE10", "O44"],
            values: [
                {
                    name: "min-content",
                    description: "Represents the largest min-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "max-content",
                    description: "Represents the largest max-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "auto",
                    description: "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.",
                },
                {
                    name: "minmax()",
                    description: "Defines a size range greater than or equal to min and less than or equal to max.",
                },
            ],
            syntax: "<track-size>+",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns",
                },
            ],
            description: "Specifies the size of implicitly created columns.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "grid-auto-flow",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "row",
                    description: "The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary.",
                },
                {
                    name: "column",
                    description: "The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary.",
                },
                {
                    name: "dense",
                    description: 'If specified, the auto-placement algorithm uses a "dense" packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later.',
                },
            ],
            syntax: "[ row | column ] || dense",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow",
                },
            ],
            description: "Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.",
            restrictions: ["enum"],
        },
        {
            name: "grid-auto-rows",
            browsers: ["E16", "FF70", "S10.1", "C57", "IE10", "O44"],
            values: [
                {
                    name: "min-content",
                    description: "Represents the largest min-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "max-content",
                    description: "Represents the largest max-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "auto",
                    description: "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.",
                },
                {
                    name: "minmax()",
                    description: "Defines a size range greater than or equal to min and less than or equal to max.",
                },
            ],
            syntax: "<track-size>+",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows",
                },
            ],
            description: "Specifies the size of implicitly created rows.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "grid-column",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one.",
                },
                {
                    name: "span",
                    description: "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge.",
                },
            ],
            syntax: "<grid-line> [ / <grid-line> ]?",
            relevance: 58,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-column",
                },
            ],
            description: "Shorthand for 'grid-column-start' and 'grid-column-end'.",
            restrictions: ["identifier", "integer", "enum"],
        },
        {
            name: "grid-column-end",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one.",
                },
                {
                    name: "span",
                    description: "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge.",
                },
            ],
            syntax: "<grid-line>",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-column-end",
                },
            ],
            description: "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            restrictions: ["identifier", "integer", "enum"],
        },
        {
            name: "grid-column-gap",
            browsers: ["FF52", "C57", "S10.1", "O44"],
            status: "obsolete",
            syntax: "<length-percentage>",
            relevance: 4,
            description: "Specifies the gutters between grid columns. Replaced by 'column-gap' property.",
            restrictions: ["length"],
        },
        {
            name: "grid-column-start",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one.",
                },
                {
                    name: "span",
                    description: "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge.",
                },
            ],
            syntax: "<grid-line>",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-column-start",
                },
            ],
            description: "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            restrictions: ["identifier", "integer", "enum"],
        },
        {
            name: "grid-gap",
            browsers: ["FF52", "C57", "S10.1", "O44"],
            status: "obsolete",
            syntax: "<'grid-row-gap'> <'grid-column-gap'>?",
            relevance: 8,
            description: "Shorthand that specifies the gutters between grid columns and grid rows in one declaration. Replaced by 'gap' property.",
            restrictions: ["length"],
        },
        {
            name: "grid-row",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one.",
                },
                {
                    name: "span",
                    description: "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge.",
                },
            ],
            syntax: "<grid-line> [ / <grid-line> ]?",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-row",
                },
            ],
            description: "Shorthand for 'grid-row-start' and 'grid-row-end'.",
            restrictions: ["identifier", "integer", "enum"],
        },
        {
            name: "grid-row-end",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one.",
                },
                {
                    name: "span",
                    description: "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge.",
                },
            ],
            syntax: "<grid-line>",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-row-end",
                },
            ],
            description: "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            restrictions: ["identifier", "integer", "enum"],
        },
        {
            name: "grid-row-gap",
            browsers: ["FF52", "C57", "S10.1", "O44"],
            status: "obsolete",
            syntax: "<length-percentage>",
            relevance: 2,
            description: "Specifies the gutters between grid rows. Replaced by 'row-gap' property.",
            restrictions: ["length"],
        },
        {
            name: "grid-row-start",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one.",
                },
                {
                    name: "span",
                    description: "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge.",
                },
            ],
            syntax: "<grid-line>",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-row-start",
                },
            ],
            description: "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            restrictions: ["identifier", "integer", "enum"],
        },
        {
            name: "grid-template",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "none",
                    description: "Sets all three properties to their initial values.",
                },
                {
                    name: "min-content",
                    description: "Represents the largest min-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "max-content",
                    description: "Represents the largest max-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "auto",
                    description: "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.",
                },
                {
                    name: "subgrid",
                    description: "Sets 'grid-template-rows' and 'grid-template-columns' to 'subgrid', and 'grid-template-areas' to its initial value.",
                },
                {
                    name: "minmax()",
                    description: "Defines a size range greater than or equal to min and less than or equal to max.",
                },
                {
                    name: "repeat()",
                    description: "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.",
                },
            ],
            syntax: "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-template",
                },
            ],
            description: "Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.",
            restrictions: ["identifier", "length", "percentage", "string", "enum"],
        },
        {
            name: "grid-template-areas",
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            values: [
                {
                    name: "none",
                    description: "The grid container doesn't define any named grid areas.",
                },
            ],
            syntax: "none | <string>+",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-template-areas",
                },
            ],
            description: "Specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.",
            restrictions: ["string"],
        },
        {
            name: "grid-template-columns",
            browsers: ["E16", "FF52", "S10.1", "C57", "IE10", "O44"],
            values: [
                {
                    name: "none",
                    description: "There is no explicit grid; any rows/columns will be implicitly generated.",
                },
                {
                    name: "min-content",
                    description: "Represents the largest min-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "max-content",
                    description: "Represents the largest max-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "auto",
                    description: "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.",
                },
                {
                    name: "subgrid",
                    description: "Indicates that the grid will align to its parent grid in that axis.",
                },
                {
                    name: "minmax()",
                    description: "Defines a size range greater than or equal to min and less than or equal to max.",
                },
                {
                    name: "repeat()",
                    description: "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.",
                },
            ],
            syntax: "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            relevance: 66,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-template-columns",
                },
            ],
            description: "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
            restrictions: ["identifier", "length", "percentage", "enum"],
        },
        {
            name: "grid-template-rows",
            browsers: ["E16", "FF52", "S10.1", "C57", "IE10", "O44"],
            values: [
                {
                    name: "none",
                    description: "There is no explicit grid; any rows/columns will be implicitly generated.",
                },
                {
                    name: "min-content",
                    description: "Represents the largest min-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "max-content",
                    description: "Represents the largest max-content contribution of the grid items occupying the grid track.",
                },
                {
                    name: "auto",
                    description: "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.",
                },
                {
                    name: "subgrid",
                    description: "Indicates that the grid will align to its parent grid in that axis.",
                },
                {
                    name: "minmax()",
                    description: "Defines a size range greater than or equal to min and less than or equal to max.",
                },
                {
                    name: "repeat()",
                    description: "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.",
                },
            ],
            syntax: "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            relevance: 59,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/grid-template-rows",
                },
            ],
            description: "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
            restrictions: ["identifier", "length", "percentage", "string", "enum"],
        },
        {
            name: "height",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "auto",
                    description: "The height depends on the values of other properties.",
                },
                {
                    name: "fit-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "max-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Use the max-content inline size or max-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "min-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Use the min-content inline size or min-content block size, as appropriate to the writing mode.",
                },
            ],
            syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            relevance: 96,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/height",
                },
            ],
            description: "Specifies the height of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "hyphens",
            browsers: ["E79", "FF43", "S17", "C55", "IE10", "O42"],
            values: [
                {
                    name: "auto",
                    description: "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word.",
                },
                {
                    name: "manual",
                    description: "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities",
                },
                {
                    name: "none",
                    description: "Words are not broken at line breaks, even if characters inside the word suggest line break points.",
                },
            ],
            syntax: "none | manual | auto",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/hyphens",
                },
            ],
            description: "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            restrictions: ["enum"],
        },
        {
            name: "image-orientation",
            browsers: ["E81", "FF26", "S13.1", "C81", "O67"],
            values: [
                {
                    name: "flip",
                    description: "After rotating by the precededing angle, the image is flipped horizontally. Defaults to 0deg if the angle is ommitted.",
                },
                {
                    name: "from-image",
                    description: "If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image.",
                },
            ],
            syntax: "from-image | <angle> | [ <angle>? flip ]",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/image-orientation",
                },
            ],
            description: "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
            restrictions: ["angle"],
        },
        {
            name: "image-rendering",
            browsers: ["E79", "FF3.6", "S6", "C13", "O15"],
            values: [
                {
                    name: "auto",
                    description: "The image should be scaled with an algorithm that maximizes the appearance of the image.",
                },
                {
                    name: "crisp-edges",
                    description: "The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process.",
                },
                {
                    name: "-moz-crisp-edges",
                    browsers: ["E79", "FF3.6", "S6", "C13", "O15"],
                },
                {
                    name: "optimizeQuality",
                    description: "Deprecated.",
                },
                {
                    name: "optimizeSpeed",
                    description: "Deprecated.",
                },
                {
                    name: "pixelated",
                    description: "When scaling the image up, the 'nearest neighbor' or similar algorithm must be used, so that the image appears to be simply composed of very large pixels.",
                },
            ],
            syntax: "auto | crisp-edges | pixelated",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/image-rendering",
                },
            ],
            description: "Provides a hint to the user-agent about what aspects of an image are most important to preserve when the image is scaled, to aid the user-agent in the choice of an appropriate scaling algorithm.",
            restrictions: ["enum"],
        },
        {
            name: "ime-mode",
            browsers: ["E12", "FF3", "IE5"],
            values: [
                {
                    name: "active",
                    description: "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it.",
                },
                {
                    name: "auto",
                    description: "No change is made to the current input method editor state. This is the default.",
                },
                {
                    name: "disabled",
                    description: "The input method editor is disabled and may not be activated by the user.",
                },
                {
                    name: "inactive",
                    description: "The input method editor is initially inactive, but the user may activate it if they wish.",
                },
                {
                    name: "normal",
                    description: "The IME state should be normal; this value can be used in a user style sheet to override the page setting.",
                },
            ],
            status: "obsolete",
            syntax: "auto | normal | active | inactive | disabled",
            relevance: 0,
            description: "Controls the state of the input method editor for text fields.",
            restrictions: ["enum"],
        },
        {
            name: "inline-size",
            browsers: ["E79", "FF41", "S12.1", "C57", "O44"],
            values: [
                {
                    name: "auto",
                    description: "Depends on the values of other properties.",
                },
            ],
            syntax: "<'width'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inline-size",
                },
            ],
            description: "Size of an element in the direction specified by 'writing-mode'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "isolation",
            browsers: ["E79", "FF36", "S8", "C41", "O30"],
            values: [
                {
                    name: "auto",
                    description: "Elements are not isolated unless an operation is applied that causes the creation of a stacking context.",
                },
                {
                    name: "isolate",
                    description: "In CSS will turn the element into a stacking context.",
                },
            ],
            syntax: "auto | isolate",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/isolation",
                },
            ],
            description: "In CSS setting to 'isolate' will turn the element into a stacking context. In SVG, it defines whether an element is isolated or not.",
            restrictions: ["enum"],
        },
        {
            name: "justify-content",
            browsers: ["E12", "FF20", "S9", "C29", "IE11", "O12.1"],
            values: [
                {
                    name: "center",
                    description: "Flex items are packed toward the center of the line.",
                },
                {
                    name: "start",
                    description: "The items are packed flush to each other toward the start edge of the alignment container in the main axis.",
                },
                {
                    name: "end",
                    description: "The items are packed flush to each other toward the end edge of the alignment container in the main axis.",
                },
                {
                    name: "left",
                    description: "The items are packed flush to each other toward the left edge of the alignment container in the main axis.",
                },
                {
                    name: "right",
                    description: "The items are packed flush to each other toward the right edge of the alignment container in the main axis.",
                },
                {
                    name: "safe",
                    description: "If the size of the item overflows the alignment container, the item is instead aligned as if the alignment mode were start.",
                },
                {
                    name: "unsafe",
                    description: "Regardless of the relative sizes of the item and alignment container, the given alignment value is honored.",
                },
                {
                    name: "stretch",
                    description: "If the combined size of the alignment subjects is less than the size of the alignment container, any auto-sized alignment subjects have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container.",
                },
                {
                    name: "space-evenly",
                    description: "The items are evenly distributed within the alignment container along the main axis.",
                },
                {
                    name: "flex-end",
                    description: "Flex items are packed toward the end of the line.",
                },
                {
                    name: "flex-start",
                    description: "Flex items are packed toward the start of the line.",
                },
                {
                    name: "space-around",
                    description: "Flex items are evenly distributed in the line, with half-size spaces on either end.",
                },
                {
                    name: "space-between",
                    description: "Flex items are evenly distributed in the line.",
                },
                {
                    name: "baseline",
                    description: "Specifies participation in first-baseline alignment.",
                },
                {
                    name: "first baseline",
                    description: "Specifies participation in first-baseline alignment.",
                },
                {
                    name: "last baseline",
                    description: "Specifies participation in last-baseline alignment.",
                },
            ],
            syntax: "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
            relevance: 87,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/justify-content",
                },
            ],
            description: "Aligns flex items along the main axis of the current line of the flex container.",
            restrictions: ["enum"],
        },
        {
            name: "kerning",
            values: [
                {
                    name: "auto",
                    description: "Indicates that the user agent should adjust inter-glyph spacing based on kerning tables that are included in the font that will be used.",
                },
            ],
            relevance: 50,
            description: "Indicates whether the user agent should adjust inter-glyph spacing based on kerning tables that are included in the relevant font or instead disable auto-kerning and set inter-character spacing to a specific length.",
            restrictions: ["length", "enum"],
        },
        {
            name: "left",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O5"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 94,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/left",
                },
            ],
            description: "Specifies how far an absolutely positioned box's left margin edge is offset to the right of the left edge of the box's 'containing block'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "letter-spacing",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "normal",
                    description: "The spacing is the normal spacing for the current font. It is typically zero-length.",
                },
            ],
            syntax: "normal | <length>",
            relevance: 81,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/letter-spacing",
                },
            ],
            description: "Specifies the minimum, maximum, and optimal spacing between grapheme clusters.",
            restrictions: ["length"],
        },
        {
            name: "lighting-color",
            browsers: ["E12", "FF3", "S6", "C5", "IE11", "O15"],
            relevance: 50,
            description: "Defines the color of the light source for filter primitives 'feDiffuseLighting' and 'feSpecularLighting'.",
            restrictions: ["color"],
        },
        {
            name: "line-break",
            browsers: ["E14", "FF69", "S11", "C58", "IE5.5", "O45"],
            values: [
                {
                    name: "auto",
                    description: "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines.",
                },
                {
                    name: "loose",
                    description: "Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers.",
                },
                {
                    name: "normal",
                    description: "Breaks text using the most common set of line-breaking rules.",
                },
                {
                    name: "strict",
                    description: "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'.",
                },
                {
                    name: "anywhere",
                    description: "There is a soft wrap opportunity around every typographic character unit, including around any punctuation character or preserved white spaces, or in the middle of words, disregarding any prohibition against line breaks, even those introduced by characters with the GL, WJ, or ZWJ line breaking classes or mandated by the word-break property.",
                },
            ],
            syntax: "auto | loose | normal | strict | anywhere",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/line-break",
                },
            ],
            description: "Specifies what set of line breaking restrictions are in effect within the element.",
            restrictions: ["enum"],
        },
        {
            name: "line-height",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "normal",
                    description: "Tells user agents to set the computed value to a 'reasonable' value based on the font size of the element.",
                },
            ],
            syntax: "normal | <number> | <length> | <percentage>",
            relevance: 92,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/line-height",
                },
            ],
            description: "Determines the block-progression dimension of the text content area of an inline box.",
            restrictions: ["number", "length", "percentage"],
        },
        {
            name: "list-style",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "armenian",
                },
                {
                    name: "circle",
                    description: "A hollow circle.",
                },
                {
                    name: "decimal",
                },
                {
                    name: "decimal-leading-zero",
                },
                {
                    name: "disc",
                    description: "A filled circle.",
                },
                {
                    name: "georgian",
                },
                {
                    name: "inside",
                    description: "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below.",
                },
                {
                    name: "lower-alpha",
                },
                {
                    name: "lower-greek",
                },
                {
                    name: "lower-latin",
                },
                {
                    name: "lower-roman",
                },
                {
                    name: "none",
                },
                {
                    name: "outside",
                    description: "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows.",
                },
                {
                    name: "square",
                    description: "A filled square.",
                },
                {
                    name: "symbols()",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Allows a counter style to be defined inline.",
                },
                {
                    name: "upper-alpha",
                },
                {
                    name: "upper-latin",
                },
                {
                    name: "upper-roman",
                },
                {
                    name: "url()",
                },
            ],
            syntax: "<'list-style-type'> || <'list-style-position'> || <'list-style-image'>",
            relevance: 83,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/list-style",
                },
            ],
            description: "Shorthand for setting 'list-style-type', 'list-style-position' and 'list-style-image'",
            restrictions: ["image", "enum", "url"],
        },
        {
            name: "list-style-image",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "none",
                    description: "The default contents of the of the list item's marker are given by 'list-style-type' instead.",
                },
            ],
            syntax: "<image> | none",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/list-style-image",
                },
            ],
            description: "Sets the image that will be used as the list item marker. When the image is available, it will replace the marker set with the 'list-style-type' marker.",
            restrictions: ["image"],
        },
        {
            name: "list-style-position",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "inside",
                    description: "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below.",
                },
                {
                    name: "outside",
                    description: "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows.",
                },
            ],
            syntax: "inside | outside",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/list-style-position",
                },
            ],
            description: "Specifies the position of the '::marker' pseudo-element's box in the list item.",
            restrictions: ["enum"],
        },
        {
            name: "list-style-type",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "armenian",
                    description: "Traditional uppercase Armenian numbering.",
                },
                {
                    name: "circle",
                    description: "A hollow circle.",
                },
                {
                    name: "decimal",
                    description: "Western decimal numbers.",
                },
                {
                    name: "decimal-leading-zero",
                    description: "Decimal numbers padded by initial zeros.",
                },
                {
                    name: "disc",
                    description: "A filled circle.",
                },
                {
                    name: "georgian",
                    description: "Traditional Georgian numbering.",
                },
                {
                    name: "lower-alpha",
                    description: "Lowercase ASCII letters.",
                },
                {
                    name: "lower-greek",
                    description: "Lowercase classical Greek.",
                },
                {
                    name: "lower-latin",
                    description: "Lowercase ASCII letters.",
                },
                {
                    name: "lower-roman",
                    description: "Lowercase ASCII Roman numerals.",
                },
                {
                    name: "none",
                    description: "No marker",
                },
                {
                    name: "square",
                    description: "A filled square.",
                },
                {
                    name: "symbols()",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
                    description: "Allows a counter style to be defined inline.",
                },
                {
                    name: "upper-alpha",
                    description: "Uppercase ASCII letters.",
                },
                {
                    name: "upper-latin",
                    description: "Uppercase ASCII letters.",
                },
                {
                    name: "upper-roman",
                    description: "Uppercase ASCII Roman numerals.",
                },
            ],
            syntax: "<counter-style> | <string> | none",
            relevance: 73,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/list-style-type",
                },
            ],
            description: "Used to construct the default contents of a list item's marker",
            restrictions: ["enum", "string"],
        },
        {
            name: "margin",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "[ <length> | <percentage> | auto ]{1,4}",
            relevance: 95,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin",
                },
            ],
            description: "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-block-end",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<'margin-left'>",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-block-end",
                },
            ],
            description: "Logical 'margin-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-block-start",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<'margin-left'>",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-block-start",
                },
            ],
            description: "Logical 'margin-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-bottom",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 91,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-bottom",
                },
            ],
            description: "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-inline-end",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<'margin-left'>",
            relevance: 58,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-inline-end",
                },
            ],
            description: "Logical 'margin-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-inline-start",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<'margin-left'>",
            relevance: 59,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-inline-start",
                },
            ],
            description: "Logical 'margin-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-left",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 91,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-left",
                },
            ],
            description: "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-right",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 91,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-right",
                },
            ],
            description: "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            restrictions: ["length", "percentage"],
        },
        {
            name: "margin-top",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "auto",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 94,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-top",
                },
            ],
            description: "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            restrictions: ["length", "percentage"],
        },
        {
            name: "marker",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "none",
                    description: "Indicates that no marker symbol will be drawn at the given vertex or vertices.",
                },
                {
                    name: "url()",
                    description: "Indicates that the <marker> element referenced will be used.",
                },
            ],
            syntax: "none | <url>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/marker",
                },
            ],
            description: "Specifies the marker symbol that shall be used for all points on the sets the value for all vertices on the given 'path' element or basic shape.",
            restrictions: ["url"],
        },
        {
            name: "marker-end",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "none",
                    description: "Indicates that no marker symbol will be drawn at the given vertex or vertices.",
                },
                {
                    name: "url()",
                    description: "Indicates that the <marker> element referenced will be used.",
                },
            ],
            syntax: "none | <url>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/marker-end",
                },
            ],
            description: "Specifies the marker that will be drawn at the last vertices of the given markable element.",
            restrictions: ["url"],
        },
        {
            name: "marker-mid",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "none",
                    description: "Indicates that no marker symbol will be drawn at the given vertex or vertices.",
                },
                {
                    name: "url()",
                    description: "Indicates that the <marker> element referenced will be used.",
                },
            ],
            syntax: "none | <url>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/marker-mid",
                },
            ],
            description: "Specifies the marker that will be drawn at all vertices except the first and last.",
            restrictions: ["url"],
        },
        {
            name: "marker-start",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "none",
                    description: "Indicates that no marker symbol will be drawn at the given vertex or vertices.",
                },
                {
                    name: "url()",
                    description: "Indicates that the <marker> element referenced will be used.",
                },
            ],
            syntax: "none | <url>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/marker-start",
                },
            ],
            description: "Specifies the marker that will be drawn at the first vertices of the given markable element.",
            restrictions: ["url"],
        },
        {
            name: "mask-image",
            browsers: ["E120", "FF53", "S15.4", "C120", "O15"],
            values: [
                {
                    name: "none",
                    description: "Counts as a transparent black image layer.",
                },
                {
                    name: "url()",
                    description: "Reference to a <mask element or to a CSS image.",
                },
            ],
            syntax: "<mask-reference>#",
            relevance: 57,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-image",
                },
            ],
            description: "Sets the mask layer image of an element.",
            restrictions: ["url", "image", "enum"],
        },
        {
            name: "mask-mode",
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            values: [
                {
                    name: "alpha",
                    description: "Alpha values of the mask layer image should be used as the mask values.",
                },
                {
                    name: "auto",
                    description: "Use alpha values if 'mask-image' is an image, luminance if a <mask> element or a CSS image.",
                },
                {
                    name: "luminance",
                    description: "Luminance values of the mask layer image should be used as the mask values.",
                },
            ],
            syntax: "<masking-mode>#",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-mode",
                },
            ],
            description: "Indicates whether the mask layer image is treated as luminance mask or alpha mask.",
            restrictions: ["url", "image", "enum"],
        },
        {
            name: "mask-origin",
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            syntax: "<geometry-box>#",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-origin",
                },
            ],
            description: "Specifies the mask positioning area.",
            restrictions: ["geometry-box", "enum"],
        },
        {
            name: "mask-position",
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            syntax: "<position>#",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-position",
                },
            ],
            description: "Specifies how mask layer images are positioned.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "mask-repeat",
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            syntax: "<repeat-style>#",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-repeat",
                },
            ],
            description: "Specifies how mask layer images are tiled after they have been sized and positioned.",
            restrictions: ["repeat"],
        },
        {
            name: "mask-size",
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            values: [
                {
                    name: "auto",
                    description: "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%.",
                },
                {
                    name: "contain",
                    description: "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.",
                },
                {
                    name: "cover",
                    description: "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.",
                },
            ],
            syntax: "<bg-size>#",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-size",
                },
            ],
            description: "Specifies the size of the mask layer images.",
            restrictions: ["length", "percentage", "enum"],
        },
        {
            name: "mask-type",
            browsers: ["E79", "FF35", "S7", "C24", "O15"],
            values: [
                {
                    name: "alpha",
                    description: "Indicates that the alpha values of the mask should be used.",
                },
                {
                    name: "luminance",
                    description: "Indicates that the luminance values of the mask should be used.",
                },
            ],
            syntax: "luminance | alpha",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-type",
                },
            ],
            description: "Defines whether the content of the <mask> element is treated as as luminance mask or alpha mask.",
            restrictions: ["enum"],
        },
        {
            name: "max-block-size",
            browsers: ["E79", "FF41", "S12.1", "C57", "O44"],
            values: [
                {
                    name: "none",
                    description: "No limit on the width of the box.",
                },
            ],
            syntax: "<'max-width'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/max-block-size",
                },
            ],
            description: "Maximum size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "max-height",
            browsers: ["E12", "FF1", "S1.3", "C18", "IE7", "O7"],
            values: [
                {
                    name: "none",
                    description: "No limit on the height of the box.",
                },
                {
                    name: "fit-content",
                    browsers: ["E12", "FF1", "S1.3", "C18", "IE7", "O7"],
                    description: "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "max-content",
                    browsers: ["E12", "FF1", "S1.3", "C18", "IE7", "O7"],
                    description: "Use the max-content inline size or max-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "min-content",
                    browsers: ["E12", "FF1", "S1.3", "C18", "IE7", "O7"],
                    description: "Use the min-content inline size or min-content block size, as appropriate to the writing mode.",
                },
            ],
            syntax: "none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            relevance: 85,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/max-height",
                },
            ],
            description: "Allows authors to constrain content height to a certain range.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "max-inline-size",
            browsers: ["E79", "FF41", "S12.1", "C57", "O44"],
            values: [
                {
                    name: "none",
                    description: "No limit on the height of the box.",
                },
            ],
            syntax: "<'max-width'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/max-inline-size",
                },
            ],
            description: "Maximum size of an element in the direction specified by 'writing-mode'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "max-width",
            browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
            values: [
                {
                    name: "none",
                    description: "No limit on the width of the box.",
                },
                {
                    name: "fit-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
                    description: "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "max-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
                    description: "Use the max-content inline size or max-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "min-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
                    description: "Use the min-content inline size or min-content block size, as appropriate to the writing mode.",
                },
            ],
            syntax: "none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            relevance: 90,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/max-width",
                },
            ],
            description: "Allows authors to constrain content width to a certain range.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "min-block-size",
            browsers: ["E79", "FF41", "S12.1", "C57", "O44"],
            syntax: "<'min-width'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/min-block-size",
                },
            ],
            description: "Minimal size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "min-height",
            browsers: ["E12", "FF3", "S1.3", "C1", "IE7", "O4"],
            values: [
                {
                    name: "auto",
                    browsers: ["E12", "FF3", "S1.3", "C1", "IE7", "O4"],
                },
                {
                    name: "fit-content",
                    browsers: ["E12", "FF3", "S1.3", "C1", "IE7", "O4"],
                    description: "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "max-content",
                    browsers: ["E12", "FF3", "S1.3", "C1", "IE7", "O4"],
                    description: "Use the max-content inline size or max-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "min-content",
                    browsers: ["E12", "FF3", "S1.3", "C1", "IE7", "O4"],
                    description: "Use the min-content inline size or min-content block size, as appropriate to the writing mode.",
                },
            ],
            syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            relevance: 89,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/min-height",
                },
            ],
            description: "Allows authors to constrain content height to a certain range.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "min-inline-size",
            browsers: ["E79", "FF41", "S12.1", "C57", "O44"],
            syntax: "<'min-width'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/min-inline-size",
                },
            ],
            description: "Minimal size of an element in the direction specified by 'writing-mode'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "min-width",
            browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
            values: [
                {
                    name: "auto",
                    browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
                },
                {
                    name: "fit-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
                    description: "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "max-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
                    description: "Use the max-content inline size or max-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "min-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE7", "O4"],
                    description: "Use the min-content inline size or min-content block size, as appropriate to the writing mode.",
                },
            ],
            syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            relevance: 88,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/min-width",
                },
            ],
            description: "Allows authors to constrain content width to a certain range.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "mix-blend-mode",
            browsers: ["E79", "FF32", "S8", "C41", "O28"],
            values: [
                {
                    name: "normal",
                    description: "Default attribute which specifies no blending",
                },
                {
                    name: "multiply",
                    description: "The source color is multiplied by the destination color and replaces the destination.",
                },
                {
                    name: "screen",
                    description: "Multiplies the complements of the backdrop and source color values, then complements the result.",
                },
                {
                    name: "overlay",
                    description: "Multiplies or screens the colors, depending on the backdrop color value.",
                },
                {
                    name: "darken",
                    description: "Selects the darker of the backdrop and source colors.",
                },
                {
                    name: "lighten",
                    description: "Selects the lighter of the backdrop and source colors.",
                },
                {
                    name: "color-dodge",
                    description: "Brightens the backdrop color to reflect the source color.",
                },
                {
                    name: "color-burn",
                    description: "Darkens the backdrop color to reflect the source color.",
                },
                {
                    name: "hard-light",
                    description: "Multiplies or screens the colors, depending on the source color value.",
                },
                {
                    name: "soft-light",
                    description: "Darkens or lightens the colors, depending on the source color value.",
                },
                {
                    name: "difference",
                    description: "Subtracts the darker of the two constituent colors from the lighter color..",
                },
                {
                    name: "exclusion",
                    description: "Produces an effect similar to that of the Difference mode but lower in contrast.",
                },
                {
                    name: "hue",
                    browsers: ["E79", "FF32", "S8", "C41", "O28"],
                    description: "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.",
                },
                {
                    name: "saturation",
                    browsers: ["E79", "FF32", "S8", "C41", "O28"],
                    description: "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color.",
                },
                {
                    name: "color",
                    browsers: ["E79", "FF32", "S8", "C41", "O28"],
                    description: "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color.",
                },
                {
                    name: "luminosity",
                    browsers: ["E79", "FF32", "S8", "C41", "O28"],
                    description: "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color.",
                },
            ],
            syntax: "<blend-mode> | plus-lighter",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode",
                },
            ],
            description: "Defines the formula that must be used to mix the colors with the backdrop.",
            restrictions: ["enum"],
        },
        {
            name: "motion",
            browsers: ["C46", "O33"],
            values: [
                {
                    name: "none",
                    description: "No motion path gets created.",
                },
                {
                    name: "path()",
                    description: "Defines an SVG path as a string, with optional 'fill-rule' as the first argument.",
                },
                {
                    name: "auto",
                    description: "Indicates that the object is rotated by the angle of the direction of the motion path.",
                },
                {
                    name: "reverse",
                    description: "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees.",
                },
            ],
            relevance: 50,
            description: "Shorthand property for setting 'motion-path', 'motion-offset' and 'motion-rotation'.",
            restrictions: ["url", "length", "percentage", "angle", "shape", "geometry-box", "enum"],
        },
        {
            name: "motion-offset",
            browsers: ["C46", "O33"],
            relevance: 50,
            description: "A distance that describes the position along the specified motion path.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "motion-path",
            browsers: ["C46", "O33"],
            values: [
                {
                    name: "none",
                    description: "No motion path gets created.",
                },
                {
                    name: "path()",
                    description: "Defines an SVG path as a string, with optional 'fill-rule' as the first argument.",
                },
            ],
            relevance: 50,
            description: "Specifies the motion path the element gets positioned at.",
            restrictions: ["url", "shape", "geometry-box", "enum"],
        },
        {
            name: "motion-rotation",
            browsers: ["C46", "O33"],
            values: [
                {
                    name: "auto",
                    description: "Indicates that the object is rotated by the angle of the direction of the motion path.",
                },
                {
                    name: "reverse",
                    description: "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees.",
                },
            ],
            relevance: 50,
            description: "Defines the direction of the element while positioning along the motion path.",
            restrictions: ["angle"],
        },
        {
            name: "-moz-animation",
            browsers: ["FF9"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "backwards",
                    description: "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",
                },
                {
                    name: "both",
                    description: "Both forwards and backwards fill modes are applied.",
                },
                {
                    name: "forwards",
                    description: "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",
                },
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
                {
                    name: "none",
                    description: "No animation is performed",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            relevance: 50,
            description: "Shorthand property combines six of the animation properties into a single property.",
            restrictions: ["time", "enum", "timing-function", "identifier", "number"],
        },
        {
            name: "-moz-animation-delay",
            browsers: ["FF9"],
            relevance: 50,
            description: "Defines when the animation will start.",
            restrictions: ["time"],
        },
        {
            name: "-moz-animation-direction",
            browsers: ["FF9"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            relevance: 50,
            description: "Defines whether or not the animation should play in reverse on alternate cycles.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-animation-duration",
            browsers: ["FF9"],
            relevance: 50,
            description: "Defines the length of time that an animation takes to complete one cycle.",
            restrictions: ["time"],
        },
        {
            name: "-moz-animation-iteration-count",
            browsers: ["FF9"],
            values: [
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
            ],
            relevance: 50,
            description: "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            restrictions: ["number", "enum"],
        },
        {
            name: "-moz-animation-name",
            browsers: ["FF9"],
            values: [
                {
                    name: "none",
                    description: "No animation is performed",
                },
            ],
            relevance: 50,
            description: "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            restrictions: ["identifier", "enum"],
        },
        {
            name: "-moz-animation-play-state",
            browsers: ["FF9"],
            values: [
                {
                    name: "paused",
                    description: "A running animation will be paused.",
                },
                {
                    name: "running",
                    description: "Resume playback of a paused animation.",
                },
            ],
            relevance: 50,
            description: "Defines whether the animation is running or paused.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-animation-timing-function",
            browsers: ["FF9"],
            relevance: 50,
            description: "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            restrictions: ["timing-function"],
        },
        {
            name: "-moz-appearance",
            browsers: ["FF1"],
            values: [
                {
                    name: "button",
                },
                {
                    name: "button-arrow-down",
                },
                {
                    name: "button-arrow-next",
                },
                {
                    name: "button-arrow-previous",
                },
                {
                    name: "button-arrow-up",
                },
                {
                    name: "button-bevel",
                },
                {
                    name: "checkbox",
                },
                {
                    name: "checkbox-container",
                },
                {
                    name: "checkbox-label",
                },
                {
                    name: "dialog",
                },
                {
                    name: "groupbox",
                },
                {
                    name: "listbox",
                },
                {
                    name: "menuarrow",
                },
                {
                    name: "menuimage",
                },
                {
                    name: "menuitem",
                },
                {
                    name: "menuitemtext",
                },
                {
                    name: "menulist",
                },
                {
                    name: "menulist-button",
                },
                {
                    name: "menulist-text",
                },
                {
                    name: "menulist-textfield",
                },
                {
                    name: "menupopup",
                },
                {
                    name: "menuradio",
                },
                {
                    name: "menuseparator",
                },
                {
                    name: "-moz-mac-unified-toolbar",
                },
                {
                    name: "-moz-win-borderless-glass",
                },
                {
                    name: "-moz-win-browsertabbar-toolbox",
                },
                {
                    name: "-moz-win-communications-toolbox",
                },
                {
                    name: "-moz-win-glass",
                },
                {
                    name: "-moz-win-media-toolbox",
                },
                {
                    name: "none",
                },
                {
                    name: "progressbar",
                },
                {
                    name: "progresschunk",
                },
                {
                    name: "radio",
                },
                {
                    name: "radio-container",
                },
                {
                    name: "radio-label",
                },
                {
                    name: "radiomenuitem",
                },
                {
                    name: "resizer",
                },
                {
                    name: "resizerpanel",
                },
                {
                    name: "scrollbarbutton-down",
                },
                {
                    name: "scrollbarbutton-left",
                },
                {
                    name: "scrollbarbutton-right",
                },
                {
                    name: "scrollbarbutton-up",
                },
                {
                    name: "scrollbar-small",
                },
                {
                    name: "scrollbartrack-horizontal",
                },
                {
                    name: "scrollbartrack-vertical",
                },
                {
                    name: "separator",
                },
                {
                    name: "spinner",
                },
                {
                    name: "spinner-downbutton",
                },
                {
                    name: "spinner-textfield",
                },
                {
                    name: "spinner-upbutton",
                },
                {
                    name: "statusbar",
                },
                {
                    name: "statusbarpanel",
                },
                {
                    name: "tab",
                },
                {
                    name: "tabpanels",
                },
                {
                    name: "tab-scroll-arrow-back",
                },
                {
                    name: "tab-scroll-arrow-forward",
                },
                {
                    name: "textfield",
                },
                {
                    name: "textfield-multiline",
                },
                {
                    name: "toolbar",
                },
                {
                    name: "toolbox",
                },
                {
                    name: "tooltip",
                },
                {
                    name: "treeheadercell",
                },
                {
                    name: "treeheadersortarrow",
                },
                {
                    name: "treeitem",
                },
                {
                    name: "treetwistyopen",
                },
                {
                    name: "treeview",
                },
                {
                    name: "treewisty",
                },
                {
                    name: "window",
                },
            ],
            status: "nonstandard",
            syntax: "none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized",
            relevance: 0,
            description: "Used in Gecko (Firefox) to display an element using a platform-native styling based on the operating system's theme.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-backface-visibility",
            browsers: ["FF10"],
            values: [
                {
                    name: "hidden",
                },
                {
                    name: "visible",
                },
            ],
            relevance: 50,
            description: "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-background-clip",
            browsers: ["FF1-3.6"],
            values: [
                {
                    name: "padding",
                },
            ],
            relevance: 50,
            description: "Determines the background painting area.",
            restrictions: ["box", "enum"],
        },
        {
            name: "-moz-background-inline-policy",
            browsers: ["FF1"],
            values: [
                {
                    name: "bounding-box",
                },
                {
                    name: "continuous",
                },
                {
                    name: "each-box",
                },
            ],
            relevance: 50,
            description: "In Gecko-based applications like Firefox, the -moz-background-inline-policy CSS property specifies how the background image of an inline element is determined when the content of the inline element wraps onto multiple lines. The choice of position has significant effects on repetition.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-background-origin",
            browsers: ["FF1"],
            relevance: 50,
            description: "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            restrictions: ["box"],
        },
        {
            name: "-moz-border-bottom-colors",
            browsers: ["FF1"],
            status: "nonstandard",
            syntax: "<color>+ | none",
            relevance: 0,
            description: "Sets a list of colors for the bottom border.",
            restrictions: ["color"],
        },
        {
            name: "-moz-border-image",
            browsers: ["FF3.6"],
            values: [
                {
                    name: "auto",
                    description: "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead.",
                },
                {
                    name: "fill",
                    description: "Causes the middle part of the border-image to be preserved.",
                },
                {
                    name: "none",
                },
                {
                    name: "repeat",
                    description: "The image is tiled (repeated) to fill the area.",
                },
                {
                    name: "round",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.",
                },
                {
                    name: "space",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.",
                },
                {
                    name: "stretch",
                    description: "The image is stretched to fill the area.",
                },
                {
                    name: "url()",
                },
            ],
            relevance: 50,
            description: "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            restrictions: ["length", "percentage", "number", "url", "enum"],
        },
        {
            name: "-moz-border-left-colors",
            browsers: ["FF1"],
            status: "nonstandard",
            syntax: "<color>+ | none",
            relevance: 0,
            description: "Sets a list of colors for the bottom border.",
            restrictions: ["color"],
        },
        {
            name: "-moz-border-right-colors",
            browsers: ["FF1"],
            status: "nonstandard",
            syntax: "<color>+ | none",
            relevance: 0,
            description: "Sets a list of colors for the bottom border.",
            restrictions: ["color"],
        },
        {
            name: "-moz-border-top-colors",
            browsers: ["FF1"],
            status: "nonstandard",
            syntax: "<color>+ | none",
            relevance: 0,
            description: "Ske Firefox, -moz-border-bottom-colors sets a list of colors for the bottom border.",
            restrictions: ["color"],
        },
        {
            name: "-moz-box-align",
            browsers: ["FF1"],
            values: [
                {
                    name: "baseline",
                    description: "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used.",
                },
                {
                    name: "center",
                    description: "Any extra space is divided evenly, with half placed above the child and the other half placed after the child.",
                },
                {
                    name: "end",
                    description: "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element.",
                },
                {
                    name: "start",
                    description: "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element.",
                },
                {
                    name: "stretch",
                    description: "The height of each child is adjusted to that of the containing block.",
                },
            ],
            relevance: 50,
            description: "Specifies how a XUL box aligns its contents across (perpendicular to) the direction of its layout. The effect of this is only visible if there is extra space in the box.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-box-direction",
            browsers: ["FF1"],
            values: [
                {
                    name: "normal",
                    description: "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom.",
                },
                {
                    name: "reverse",
                    description: "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top.",
                },
            ],
            relevance: 50,
            description: "Specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
            restrictions: ["enum"],
        },
        {
            name: "-moz-box-flex",
            browsers: ["FF1"],
            relevance: 50,
            description: "Specifies how a box grows to fill the box that contains it, in the direction of the containing box's layout.",
            restrictions: ["number"],
        },
        {
            name: "-moz-box-flexgroup",
            browsers: ["FF1"],
            relevance: 50,
            description: "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
            restrictions: ["integer"],
        },
        {
            name: "-moz-box-ordinal-group",
            browsers: ["FF1"],
            relevance: 50,
            description: "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
            restrictions: ["integer"],
        },
        {
            name: "-moz-box-orient",
            browsers: ["FF1"],
            values: [
                {
                    name: "block-axis",
                    description: "Elements are oriented along the box's axis.",
                },
                {
                    name: "horizontal",
                    description: "The box displays its children from left to right in a horizontal line.",
                },
                {
                    name: "inline-axis",
                    description: "Elements are oriented vertically.",
                },
                {
                    name: "vertical",
                    description: "The box displays its children from stacked from top to bottom vertically.",
                },
            ],
            relevance: 50,
            description: "In Mozilla applications, -moz-box-orient specifies whether a box lays out its contents horizontally or vertically.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-box-pack",
            browsers: ["FF1"],
            values: [
                {
                    name: "center",
                    description: "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child.",
                },
                {
                    name: "end",
                    description: "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child.",
                },
                {
                    name: "justify",
                    description: "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start.",
                },
                {
                    name: "start",
                    description: "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child.",
                },
            ],
            relevance: 50,
            description: "Specifies how a box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-box-sizing",
            browsers: ["FF1"],
            values: [
                {
                    name: "border-box",
                    description: "The specified width and height (and respective min/max properties) on this element determine the border box of the element.",
                },
                {
                    name: "content-box",
                    description: "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element.",
                },
                {
                    name: "padding-box",
                    description: "The specified width and height (and respective min/max properties) on this element determine the padding box of the element.",
                },
            ],
            relevance: 50,
            description: "Box Model addition in CSS3.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-column-count",
            browsers: ["FF3.5"],
            values: [
                {
                    name: "auto",
                    description: "Determines the number of columns by the 'column-width' property and the element width.",
                },
            ],
            relevance: 50,
            description: "Describes the optimal number of columns into which the content of the element will be flowed.",
            restrictions: ["integer"],
        },
        {
            name: "-moz-column-gap",
            browsers: ["FF3.5"],
            values: [
                {
                    name: "normal",
                    description: "User agent specific and typically equivalent to 1em.",
                },
            ],
            relevance: 50,
            description: "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            restrictions: ["length"],
        },
        {
            name: "-moz-column-rule",
            browsers: ["FF3.5"],
            relevance: 50,
            description: "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "-moz-column-rule-color",
            browsers: ["FF3.5"],
            relevance: 50,
            description: "Sets the color of the column rule",
            restrictions: ["color"],
        },
        {
            name: "-moz-column-rule-style",
            browsers: ["FF3.5"],
            relevance: 50,
            description: "Sets the style of the rule between columns of an element.",
            restrictions: ["line-style"],
        },
        {
            name: "-moz-column-rule-width",
            browsers: ["FF3.5"],
            relevance: 50,
            description: "Sets the width of the rule between columns. Negative values are not allowed.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "-moz-columns",
            browsers: ["FF9"],
            values: [
                {
                    name: "auto",
                    description: "The width depends on the values of other properties.",
                },
            ],
            relevance: 50,
            description: "A shorthand property which sets both 'column-width' and 'column-count'.",
            restrictions: ["length", "integer"],
        },
        {
            name: "-moz-column-width",
            browsers: ["FF3.5"],
            values: [
                {
                    name: "auto",
                    description: "The width depends on the values of other properties.",
                },
            ],
            relevance: 50,
            description: "This property describes the width of columns in multicol elements.",
            restrictions: ["length"],
        },
        {
            name: "-moz-font-feature-settings",
            browsers: ["FF4"],
            values: [
                {
                    name: '"c2cs"',
                },
                {
                    name: '"dlig"',
                },
                {
                    name: '"kern"',
                },
                {
                    name: '"liga"',
                },
                {
                    name: '"lnum"',
                },
                {
                    name: '"onum"',
                },
                {
                    name: '"smcp"',
                },
                {
                    name: '"swsh"',
                },
                {
                    name: '"tnum"',
                },
                {
                    name: "normal",
                    description: "No change in glyph substitution or positioning occurs.",
                },
                {
                    name: "off",
                    browsers: ["FF4"],
                },
                {
                    name: "on",
                    browsers: ["FF4"],
                },
            ],
            relevance: 50,
            description: "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            restrictions: ["string", "integer"],
        },
        {
            name: "-moz-hyphens",
            browsers: ["FF9"],
            values: [
                {
                    name: "auto",
                    description: "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word.",
                },
                {
                    name: "manual",
                    description: "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities",
                },
                {
                    name: "none",
                    description: "Words are not broken at line breaks, even if characters inside the word suggest line break points.",
                },
            ],
            relevance: 50,
            description: "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-perspective",
            browsers: ["FF10"],
            values: [
                {
                    name: "none",
                    description: "No perspective transform is applied.",
                },
            ],
            relevance: 50,
            description: "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            restrictions: ["length"],
        },
        {
            name: "-moz-perspective-origin",
            browsers: ["FF10"],
            relevance: 50,
            description: "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            restrictions: ["position", "percentage", "length"],
        },
        {
            name: "-moz-text-align-last",
            browsers: ["FF12"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "center",
                    description: "The inline contents are centered within the line box.",
                },
                {
                    name: "justify",
                    description: "The text is justified according to the method specified by the 'text-justify' property.",
                },
                {
                    name: "left",
                    description: "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text.",
                },
                {
                    name: "right",
                    description: "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text.",
                },
            ],
            relevance: 50,
            description: "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-text-decoration-color",
            browsers: ["FF6"],
            relevance: 50,
            description: "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
            restrictions: ["color"],
        },
        {
            name: "-moz-text-decoration-line",
            browsers: ["FF6"],
            values: [
                {
                    name: "line-through",
                    description: "Each line of text has a line through the middle.",
                },
                {
                    name: "none",
                    description: "Neither produces nor inhibits text decoration.",
                },
                {
                    name: "overline",
                    description: "Each line of text has a line above it.",
                },
                {
                    name: "underline",
                    description: "Each line of text is underlined.",
                },
            ],
            relevance: 50,
            description: "Specifies what line decorations, if any, are added to the element.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-text-decoration-style",
            browsers: ["FF6"],
            values: [
                {
                    name: "dashed",
                    description: "Produces a dashed line style.",
                },
                {
                    name: "dotted",
                    description: "Produces a dotted line.",
                },
                {
                    name: "double",
                    description: "Produces a double line.",
                },
                {
                    name: "none",
                    description: "Produces no line.",
                },
                {
                    name: "solid",
                    description: "Produces a solid line.",
                },
                {
                    name: "wavy",
                    description: "Produces a wavy line.",
                },
            ],
            relevance: 50,
            description: "Specifies the line style for underline, line-through and overline text decoration.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-text-size-adjust",
            browsers: ["FF"],
            values: [
                {
                    name: "auto",
                    description: "Renderers must use the default size adjustment when displaying on a small device.",
                },
                {
                    name: "none",
                    description: "Renderers must not do size adjustment when displaying on a small device.",
                },
            ],
            relevance: 50,
            description: "Specifies a size adjustment for displaying text content in mobile browsers.",
            restrictions: ["enum", "percentage"],
        },
        {
            name: "-moz-transform",
            browsers: ["FF3.5"],
            values: [
                {
                    name: "matrix()",
                    description: "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]",
                },
                {
                    name: "matrix3d()",
                    description: "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order.",
                },
                {
                    name: "none",
                },
                {
                    name: "perspective",
                    description: "Specifies a perspective projection matrix.",
                },
                {
                    name: "rotate()",
                    description: "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property.",
                },
                {
                    name: "rotate3d()",
                    description: "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters.",
                },
                {
                    name: "rotateX('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the X axis.",
                },
                {
                    name: "rotateY('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Y axis.",
                },
                {
                    name: "rotateZ('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Z axis.",
                },
                {
                    name: "scale()",
                    description: "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first.",
                },
                {
                    name: "scale3d()",
                    description: "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters.",
                },
                {
                    name: "scaleX()",
                    description: "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter.",
                },
                {
                    name: "scaleY()",
                    description: "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter.",
                },
                {
                    name: "scaleZ()",
                    description: "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter.",
                },
                {
                    name: "skew()",
                    description: "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis).",
                },
                {
                    name: "skewX()",
                    description: "Specifies a skew transformation along the X axis by the given angle.",
                },
                {
                    name: "skewY()",
                    description: "Specifies a skew transformation along the Y axis by the given angle.",
                },
                {
                    name: "translate()",
                    description: "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter.",
                },
                {
                    name: "translate3d()",
                    description: "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively.",
                },
                {
                    name: "translateX()",
                    description: "Specifies a translation by the given amount in the X direction.",
                },
                {
                    name: "translateY()",
                    description: "Specifies a translation by the given amount in the Y direction.",
                },
                {
                    name: "translateZ()",
                    description: "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0.",
                },
            ],
            relevance: 50,
            description: "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            restrictions: ["enum"],
        },
        {
            name: "-moz-transform-origin",
            browsers: ["FF3.5"],
            relevance: 50,
            description: "Establishes the origin of transformation for an element.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "-moz-transition",
            browsers: ["FF4"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            relevance: 50,
            description: "Shorthand property combines four of the transition properties into a single property.",
            restrictions: ["time", "property", "timing-function", "enum"],
        },
        {
            name: "-moz-transition-delay",
            browsers: ["FF4"],
            relevance: 50,
            description: "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            restrictions: ["time"],
        },
        {
            name: "-moz-transition-duration",
            browsers: ["FF4"],
            relevance: 50,
            description: "Specifies how long the transition from the old value to the new value should take.",
            restrictions: ["time"],
        },
        {
            name: "-moz-transition-property",
            browsers: ["FF4"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            relevance: 50,
            description: "Specifies the name of the CSS property to which the transition is applied.",
            restrictions: ["property"],
        },
        {
            name: "-moz-transition-timing-function",
            browsers: ["FF4"],
            relevance: 50,
            description: "Describes how the intermediate values used during a transition will be calculated.",
            restrictions: ["timing-function"],
        },
        {
            name: "-moz-user-focus",
            browsers: ["FF1"],
            values: [
                {
                    name: "ignore",
                },
                {
                    name: "normal",
                },
            ],
            status: "obsolete",
            syntax: "ignore | normal | select-after | select-before | select-menu | select-same | select-all | none",
            relevance: 0,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-moz-user-focus",
                },
            ],
            description: "Used to indicate whether the element can have focus.",
        },
        {
            name: "-moz-user-select",
            browsers: ["FF1.5"],
            values: [
                {
                    name: "all",
                },
                {
                    name: "element",
                },
                {
                    name: "elements",
                },
                {
                    name: "-moz-all",
                },
                {
                    name: "-moz-none",
                },
                {
                    name: "none",
                },
                {
                    name: "text",
                },
                {
                    name: "toggle",
                },
            ],
            relevance: 50,
            description: "Controls the appearance of selection.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-accelerator",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "false",
                    description: "The element does not contain an accelerator key sequence.",
                },
                {
                    name: "true",
                    description: "The element contains an accelerator key sequence.",
                },
            ],
            status: "nonstandard",
            syntax: "false | true",
            relevance: 0,
            description: "IE only. Has the ability to turn off its system underlines for accelerator keys until the ALT key is pressed",
            restrictions: ["enum"],
        },
        {
            name: "-ms-behavior",
            browsers: ["IE8"],
            relevance: 50,
            description: "IE only. Used to extend behaviors of the browser",
            restrictions: ["url"],
        },
        {
            name: "-ms-block-progression",
            browsers: ["IE8"],
            values: [
                {
                    name: "bt",
                    description: "Bottom-to-top block flow. Layout is horizontal.",
                },
                {
                    name: "lr",
                    description: "Left-to-right direction. The flow orientation is vertical.",
                },
                {
                    name: "rl",
                    description: "Right-to-left direction. The flow orientation is vertical.",
                },
                {
                    name: "tb",
                    description: "Top-to-bottom direction. The flow orientation is horizontal.",
                },
            ],
            status: "nonstandard",
            syntax: "tb | rl | bt | lr",
            relevance: 0,
            description: "Sets the block-progression value and the flow orientation",
            restrictions: ["enum"],
        },
        {
            name: "-ms-content-zoom-chaining",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "chained",
                    description: "The nearest zoomable parent element begins zooming when the user hits a zoom limit during a manipulation. No bounce effect is shown.",
                },
                {
                    name: "none",
                    description: "A bounce effect is shown when the user hits a zoom limit during a manipulation.",
                },
            ],
            status: "nonstandard",
            syntax: "none | chained",
            relevance: 0,
            description: "Specifies the zoom behavior that occurs when a user hits the zoom limit during a manipulation.",
        },
        {
            name: "-ms-content-zooming",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "none",
                    description: "The element is not zoomable.",
                },
                {
                    name: "zoom",
                    description: "The element is zoomable.",
                },
            ],
            status: "nonstandard",
            syntax: "none | zoom",
            relevance: 0,
            description: "Specifies whether zooming is enabled.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-content-zoom-limit",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
            relevance: 0,
            description: "Shorthand property for the -ms-content-zoom-limit-min and -ms-content-zoom-limit-max properties.",
            restrictions: ["percentage"],
        },
        {
            name: "-ms-content-zoom-limit-max",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "<percentage>",
            relevance: 0,
            description: "Specifies the maximum zoom factor.",
            restrictions: ["percentage"],
        },
        {
            name: "-ms-content-zoom-limit-min",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "<percentage>",
            relevance: 0,
            description: "Specifies the minimum zoom factor.",
            restrictions: ["percentage"],
        },
        {
            name: "-ms-content-zoom-snap",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "mandatory",
                    description: "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point.",
                },
                {
                    name: "none",
                    description: "Indicates that zooming is unaffected by any defined snap-points.",
                },
                {
                    name: "proximity",
                    description: 'Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop "close enough" to a snap-point.',
                },
                {
                    name: "snapInterval(100%, 100%)",
                    description: "Specifies where the snap-points will be placed.",
                },
                {
                    name: "snapList()",
                    description: "Specifies the position of individual snap-points as a comma-separated list of zoom factors.",
                },
            ],
            status: "nonstandard",
            syntax: "<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>",
            relevance: 0,
            description: "Shorthand property for the -ms-content-zoom-snap-type and -ms-content-zoom-snap-points properties.",
        },
        {
            name: "-ms-content-zoom-snap-points",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "snapInterval(100%, 100%)",
                    description: "Specifies where the snap-points will be placed.",
                },
                {
                    name: "snapList()",
                    description: "Specifies the position of individual snap-points as a comma-separated list of zoom factors.",
                },
            ],
            status: "nonstandard",
            syntax: "snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )",
            relevance: 0,
            description: "Defines where zoom snap-points are located.",
        },
        {
            name: "-ms-content-zoom-snap-type",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "mandatory",
                    description: "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point.",
                },
                {
                    name: "none",
                    description: "Indicates that zooming is unaffected by any defined snap-points.",
                },
                {
                    name: "proximity",
                    description: 'Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop "close enough" to a snap-point.',
                },
            ],
            status: "nonstandard",
            syntax: "none | proximity | mandatory",
            relevance: 0,
            description: "Specifies how zooming is affected by defined snap-points.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-filter",
            browsers: ["IE8-9"],
            status: "nonstandard",
            syntax: "<string>",
            relevance: 0,
            description: "IE only. Used to produce visual effects.",
            restrictions: ["string"],
        },
        {
            name: "-ms-flex",
            browsers: ["IE10"],
            values: [
                {
                    name: "auto",
                    description: "Retrieves the value of the main size property as the used 'flex-basis'.",
                },
                {
                    name: "none",
                    description: "Expands to '0 0 auto'.",
                },
            ],
            relevance: 50,
            description: "specifies the parameters of a flexible length: the positive and negative flexibility, and the preferred size.",
            restrictions: ["length", "number", "percentage"],
        },
        {
            name: "-ms-flex-align",
            browsers: ["IE10"],
            values: [
                {
                    name: "baseline",
                    description: "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment.",
                },
                {
                    name: "center",
                    description: "The flex item's margin box is centered in the cross axis within the line.",
                },
                {
                    name: "end",
                    description: "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line.",
                },
                {
                    name: "start",
                    description: "The cross-start margin edge of the flexbox item is placed flush with the cross-start edge of the line.",
                },
                {
                    name: "stretch",
                    description: "If the cross size property of the flexbox item is anything other than 'auto', this value is identical to 'start'.",
                },
            ],
            relevance: 50,
            description: "Aligns flex items along the cross axis of the current line of the flex container.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-flex-direction",
            browsers: ["IE10"],
            values: [
                {
                    name: "column",
                    description: "The flex container's main axis has the same orientation as the block axis of the current writing mode.",
                },
                {
                    name: "column-reverse",
                    description: "Same as 'column', except the main-start and main-end directions are swapped.",
                },
                {
                    name: "row",
                    description: "The flex container's main axis has the same orientation as the inline axis of the current writing mode.",
                },
                {
                    name: "row-reverse",
                    description: "Same as 'row', except the main-start and main-end directions are swapped.",
                },
            ],
            relevance: 50,
            description: "Specifies how flex items are placed in the flex container, by setting the direction of the flex container's main axis.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-flex-flow",
            browsers: ["IE10"],
            values: [
                {
                    name: "column",
                    description: "The flex container's main axis has the same orientation as the block axis of the current writing mode.",
                },
                {
                    name: "column-reverse",
                    description: "Same as 'column', except the main-start and main-end directions are swapped.",
                },
                {
                    name: "nowrap",
                    description: "The flex container is single-line.",
                },
                {
                    name: "row",
                    description: "The flex container's main axis has the same orientation as the inline axis of the current writing mode.",
                },
                {
                    name: "wrap",
                    description: "The flexbox is multi-line.",
                },
                {
                    name: "wrap-reverse",
                    description: "Same as 'wrap', except the cross-start and cross-end directions are swapped.",
                },
            ],
            relevance: 50,
            description: "Specifies how flexbox items are placed in the flexbox.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-flex-item-align",
            browsers: ["IE10"],
            values: [
                {
                    name: "auto",
                    description: "Computes to the value of 'align-items' on the element's parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself.",
                },
                {
                    name: "baseline",
                    description: "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment.",
                },
                {
                    name: "center",
                    description: "The flex item's margin box is centered in the cross axis within the line.",
                },
                {
                    name: "end",
                    description: "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line.",
                },
                {
                    name: "start",
                    description: "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line.",
                },
                {
                    name: "stretch",
                    description: "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.",
                },
            ],
            relevance: 50,
            description: "Allows the default alignment along the cross axis to be overridden for individual flex items.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-flex-line-pack",
            browsers: ["IE10"],
            values: [
                {
                    name: "center",
                    description: "Lines are packed toward the center of the flex container.",
                },
                {
                    name: "distribute",
                    description: "Lines are evenly distributed in the flex container, with half-size spaces on either end.",
                },
                {
                    name: "end",
                    description: "Lines are packed toward the end of the flex container.",
                },
                {
                    name: "justify",
                    description: "Lines are evenly distributed in the flex container.",
                },
                {
                    name: "start",
                    description: "Lines are packed toward the start of the flex container.",
                },
                {
                    name: "stretch",
                    description: "Lines stretch to take up the remaining space.",
                },
            ],
            relevance: 50,
            description: "Aligns a flex container's lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-flex-order",
            browsers: ["IE10"],
            relevance: 50,
            description: "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
            restrictions: ["integer"],
        },
        {
            name: "-ms-flex-pack",
            browsers: ["IE10"],
            values: [
                {
                    name: "center",
                    description: "Flex items are packed toward the center of the line.",
                },
                {
                    name: "distribute",
                    description: "Flex items are evenly distributed in the line, with half-size spaces on either end.",
                },
                {
                    name: "end",
                    description: "Flex items are packed toward the end of the line.",
                },
                {
                    name: "justify",
                    description: "Flex items are evenly distributed in the line.",
                },
                {
                    name: "start",
                    description: "Flex items are packed toward the start of the line.",
                },
            ],
            relevance: 50,
            description: "Aligns flex items along the main axis of the current line of the flex container.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-flex-wrap",
            browsers: ["IE10"],
            values: [
                {
                    name: "nowrap",
                    description: "The flex container is single-line.",
                },
                {
                    name: "wrap",
                    description: "The flexbox is multi-line.",
                },
                {
                    name: "wrap-reverse",
                    description: "Same as 'wrap', except the cross-start and cross-end directions are swapped.",
                },
            ],
            relevance: 50,
            description: "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-flow-from",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "none",
                    description: "The block container is not a CSS Region.",
                },
            ],
            status: "nonstandard",
            syntax: "[ none | <custom-ident> ]#",
            relevance: 0,
            description: "Makes a block container a region and associates it with a named flow.",
            restrictions: ["identifier"],
        },
        {
            name: "-ms-flow-into",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "none",
                    description: "The element is not moved to a named flow and normal CSS processing takes place.",
                },
            ],
            status: "nonstandard",
            syntax: "[ none | <custom-ident> ]#",
            relevance: 0,
            description: "Places an element or its contents into a named flow.",
            restrictions: ["identifier"],
        },
        {
            name: "-ms-grid-column",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "end",
                },
                {
                    name: "start",
                },
            ],
            relevance: 50,
            description: "Used to place grid items and explicitly defined grid cells in the Grid.",
            restrictions: ["integer", "string", "enum"],
        },
        {
            name: "-ms-grid-column-align",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "center",
                    description: "Places the center of the Grid Item's margin box at the center of the Grid Item's column.",
                },
                {
                    name: "end",
                    description: "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's column.",
                },
                {
                    name: "start",
                    description: "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's column.",
                },
                {
                    name: "stretch",
                    description: "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's column.",
                },
            ],
            relevance: 50,
            description: "Aligns the columns in a grid.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-grid-columns",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "none | <track-list> | <auto-track-list>",
            relevance: 0,
            description: "Lays out the columns of the grid.",
        },
        {
            name: "-ms-grid-column-span",
            browsers: ["E", "IE10"],
            relevance: 50,
            description: "Specifies the number of columns to span.",
            restrictions: ["integer"],
        },
        {
            name: "-ms-grid-layer",
            browsers: ["E", "IE10"],
            relevance: 50,
            description: "Grid-layer is similar in concept to z-index, but avoids overloading the meaning of the z-index property, which is applicable only to positioned elements.",
            restrictions: ["integer"],
        },
        {
            name: "-ms-grid-row",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "end",
                },
                {
                    name: "start",
                },
            ],
            relevance: 50,
            description: "grid-row is used to place grid items and explicitly defined grid cells in the Grid.",
            restrictions: ["integer", "string", "enum"],
        },
        {
            name: "-ms-grid-row-align",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "center",
                    description: "Places the center of the Grid Item's margin box at the center of the Grid Item's row.",
                },
                {
                    name: "end",
                    description: "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's row.",
                },
                {
                    name: "start",
                    description: "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's row.",
                },
                {
                    name: "stretch",
                    description: "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's row.",
                },
            ],
            relevance: 50,
            description: "Aligns the rows in a grid.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-grid-rows",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "none | <track-list> | <auto-track-list>",
            relevance: 0,
            description: "Lays out the columns of the grid.",
        },
        {
            name: "-ms-grid-row-span",
            browsers: ["E", "IE10"],
            relevance: 50,
            description: "Specifies the number of rows to span.",
            restrictions: ["integer"],
        },
        {
            name: "-ms-high-contrast-adjust",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "Properties will be adjusted as applicable.",
                },
                {
                    name: "none",
                    description: "No adjustments will be applied.",
                },
            ],
            status: "nonstandard",
            syntax: "auto | none",
            relevance: 0,
            description: "Specifies if properties should be adjusted in high contrast mode.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-hyphenate-limit-chars",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "The user agent chooses a value that adapts to the current layout.",
                },
            ],
            status: "nonstandard",
            syntax: "auto | <integer>{1,3}",
            relevance: 0,
            description: "Specifies the minimum number of characters in a hyphenated word.",
            restrictions: ["integer"],
        },
        {
            name: "-ms-hyphenate-limit-lines",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "no-limit",
                    description: "There is no limit.",
                },
            ],
            status: "nonstandard",
            syntax: "no-limit | <integer>",
            relevance: 0,
            description: "Indicates the maximum number of successive hyphenated lines in an element.",
            restrictions: ["integer"],
        },
        {
            name: "-ms-hyphenate-limit-zone",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "<percentage> | <length>",
            relevance: 0,
            description: "Specifies the maximum amount of unfilled space (before justification) that may be left in the line box before hyphenation is triggered to pull part of a word from the next line back up into the current line.",
            restrictions: ["percentage", "length"],
        },
        {
            name: "-ms-hyphens",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word.",
                },
                {
                    name: "manual",
                    description: "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities",
                },
                {
                    name: "none",
                    description: "Words are not broken at line breaks, even if characters inside the word suggest line break points.",
                },
            ],
            relevance: 50,
            description: "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-ime-mode",
            browsers: ["IE10"],
            values: [
                {
                    name: "active",
                    description: "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it.",
                },
                {
                    name: "auto",
                    description: "No change is made to the current input method editor state. This is the default.",
                },
                {
                    name: "disabled",
                    description: "The input method editor is disabled and may not be activated by the user.",
                },
                {
                    name: "inactive",
                    description: "The input method editor is initially inactive, but the user may activate it if they wish.",
                },
                {
                    name: "normal",
                    description: "The IME state should be normal; this value can be used in a user style sheet to override the page setting.",
                },
            ],
            relevance: 50,
            description: "Controls the state of the input method editor for text fields.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-interpolation-mode",
            browsers: ["IE7"],
            values: [
                {
                    name: "bicubic",
                },
                {
                    name: "nearest-neighbor",
                },
            ],
            relevance: 50,
            description: "Gets or sets the interpolation (resampling) method used to stretch images.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-layout-grid",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "char",
                    description: "Any of the range of character values available to the -ms-layout-grid-char property.",
                },
                {
                    name: "line",
                    description: "Any of the range of line values available to the -ms-layout-grid-line property.",
                },
                {
                    name: "mode",
                    description: "Any of the range of mode values available to the -ms-layout-grid-mode property.",
                },
                {
                    name: "type",
                    description: "Any of the range of type values available to the -ms-layout-grid-type property.",
                },
            ],
            relevance: 50,
            description: "Sets or retrieves the composite document grid properties that specify the layout of text characters.",
        },
        {
            name: "-ms-layout-grid-char",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "Largest character in the font of the element is used to set the character grid.",
                },
                {
                    name: "none",
                    description: "Default. No character grid is set.",
                },
            ],
            relevance: 50,
            description: "Sets or retrieves the size of the character grid used for rendering the text content of an element.",
            restrictions: ["enum", "length", "percentage"],
        },
        {
            name: "-ms-layout-grid-line",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "Largest character in the font of the element is used to set the character grid.",
                },
                {
                    name: "none",
                    description: "Default. No grid line is set.",
                },
            ],
            relevance: 50,
            description: "Sets or retrieves the gridline value used for rendering the text content of an element.",
            restrictions: ["length"],
        },
        {
            name: "-ms-layout-grid-mode",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "both",
                    description: "Default. Both the char and line grid modes are enabled. This setting is necessary to fully enable the layout grid on an element.",
                },
                {
                    name: "char",
                    description: "Only a character grid is used. This is recommended for use with block-level elements, such as a blockquote, where the line grid is intended to be disabled.",
                },
                {
                    name: "line",
                    description: "Only a line grid is used. This is recommended for use with inline elements, such as a span, to disable the horizontal grid on runs of text that act as a single entity in the grid layout.",
                },
                {
                    name: "none",
                    description: "No grid is used.",
                },
            ],
            relevance: 50,
            description: "Gets or sets whether the text layout grid uses two dimensions.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-layout-grid-type",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "fixed",
                    description: "Grid used for monospaced layout. All noncursive characters are treated as equal; every character is centered within a single grid space by default.",
                },
                {
                    name: "loose",
                    description: "Default. Grid used for Japanese and Korean characters.",
                },
                {
                    name: "strict",
                    description: "Grid used for Chinese, as well as Japanese (Genko) and Korean characters. Only the ideographs, kanas, and wide characters are snapped to the grid.",
                },
            ],
            relevance: 50,
            description: "Sets or retrieves the type of grid used for rendering the text content of an element.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-line-break",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines.",
                },
                {
                    name: "keep-all",
                    description: "Sequences of CJK characters can no longer break on implied break points. This option should only be used where the presence of word separator characters still creates line-breaking opportunities, as in Korean.",
                },
                {
                    name: "newspaper",
                    description: "Breaks CJK scripts using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers.",
                },
                {
                    name: "normal",
                    description: "Breaks CJK scripts using a normal set of line-breaking rules.",
                },
                {
                    name: "strict",
                    description: "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'.",
                },
            ],
            relevance: 50,
            description: "Specifies what set of line breaking restrictions are in effect within the element.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-overflow-style",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "No preference, UA should use the first scrolling method in the list that it supports.",
                },
                {
                    name: "-ms-autohiding-scrollbar",
                    description: "Indicates the element displays auto-hiding scrollbars during mouse interactions and panning indicators during touch and keyboard interactions.",
                },
                {
                    name: "none",
                    description: "Indicates the element does not display scrollbars or panning indicators, even when its content overflows.",
                },
                {
                    name: "scrollbar",
                    description: 'Scrollbars are typically narrow strips inserted on one or two edges of an element and which often have arrows to click on and a "thumb" to drag up and down (or left and right) to move the contents of the element.',
                },
            ],
            status: "nonstandard",
            syntax: "auto | none | scrollbar | -ms-autohiding-scrollbar",
            relevance: 0,
            description: "Specify whether content is clipped when it overflows the element's content area.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-perspective",
            browsers: ["IE10"],
            values: [
                {
                    name: "none",
                    description: "No perspective transform is applied.",
                },
            ],
            relevance: 50,
            description: "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            restrictions: ["length"],
        },
        {
            name: "-ms-perspective-origin",
            browsers: ["IE10"],
            relevance: 50,
            description: "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            restrictions: ["position", "percentage", "length"],
        },
        {
            name: "-ms-perspective-origin-x",
            browsers: ["IE10"],
            relevance: 50,
            description: "Establishes the origin for the perspective property. It effectively sets the X  position at which the viewer appears to be looking at the children of the element.",
            restrictions: ["position", "percentage", "length"],
        },
        {
            name: "-ms-perspective-origin-y",
            browsers: ["IE10"],
            relevance: 50,
            description: "Establishes the origin for the perspective property. It effectively sets the Y position at which the viewer appears to be looking at the children of the element.",
            restrictions: ["position", "percentage", "length"],
        },
        {
            name: "-ms-progress-appearance",
            browsers: ["IE10"],
            values: [
                {
                    name: "bar",
                },
                {
                    name: "ring",
                },
            ],
            relevance: 50,
            description: "Gets or sets a value that specifies whether a progress control displays as a bar or a ring.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-scrollbar-3dlight-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scrollbar-arrow-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the arrow elements of a scroll arrow.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scrollbar-base-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scrollbar-darkshadow-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the gutter of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scrollbar-face-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scrollbar-highlight-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scrollbar-shadow-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scrollbar-track-color",
            browsers: ["IE8"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "Determines the color of the track element of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "-ms-scroll-chaining",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "chained",
                },
                {
                    name: "none",
                },
            ],
            status: "nonstandard",
            syntax: "chained | none",
            relevance: 0,
            description: "Gets or sets a value that indicates the scrolling behavior that occurs when a user hits the content boundary during a manipulation.",
            restrictions: ["enum", "length"],
        },
        {
            name: "-ms-scroll-limit",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                },
            ],
            status: "nonstandard",
            syntax: "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
            relevance: 0,
            description: "Gets or sets a shorthand value that sets values for the -ms-scroll-limit-x-min, -ms-scroll-limit-y-min, -ms-scroll-limit-x-max, and -ms-scroll-limit-y-max properties.",
            restrictions: ["length"],
        },
        {
            name: "-ms-scroll-limit-x-max",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                },
            ],
            status: "nonstandard",
            syntax: "auto | <length>",
            relevance: 0,
            description: "Gets or sets a value that specifies the maximum value for the scrollLeft property.",
            restrictions: ["length"],
        },
        {
            name: "-ms-scroll-limit-x-min",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "<length>",
            relevance: 0,
            description: "Gets or sets a value that specifies the minimum value for the scrollLeft property.",
            restrictions: ["length"],
        },
        {
            name: "-ms-scroll-limit-y-max",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                },
            ],
            status: "nonstandard",
            syntax: "auto | <length>",
            relevance: 0,
            description: "Gets or sets a value that specifies the maximum value for the scrollTop property.",
            restrictions: ["length"],
        },
        {
            name: "-ms-scroll-limit-y-min",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "<length>",
            relevance: 0,
            description: "Gets or sets a value that specifies the minimum value for the scrollTop property.",
            restrictions: ["length"],
        },
        {
            name: "-ms-scroll-rails",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "none",
                },
                {
                    name: "railed",
                },
            ],
            status: "nonstandard",
            syntax: "none | railed",
            relevance: 0,
            description: "Gets or sets a value that indicates whether or not small motions perpendicular to the primary axis of motion will result in either changes to both the scrollTop and scrollLeft properties or a change to the primary axis (for instance, either the scrollTop or scrollLeft properties will change, but not both).",
            restrictions: ["enum", "length"],
        },
        {
            name: "-ms-scroll-snap-points-x",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "snapInterval(100%, 100%)",
                },
                {
                    name: "snapList()",
                },
            ],
            status: "nonstandard",
            syntax: "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
            relevance: 0,
            description: "Gets or sets a value that defines where snap-points will be located along the x-axis.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-scroll-snap-points-y",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "snapInterval(100%, 100%)",
                },
                {
                    name: "snapList()",
                },
            ],
            status: "nonstandard",
            syntax: "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
            relevance: 0,
            description: "Gets or sets a value that defines where snap-points will be located along the y-axis.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-scroll-snap-type",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "none",
                    description: "The visual viewport of this scroll container must ignore snap points, if any, when scrolled.",
                },
                {
                    name: "mandatory",
                    description: "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations.",
                },
                {
                    name: "proximity",
                    description: "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll.",
                },
            ],
            status: "nonstandard",
            syntax: "none | proximity | mandatory",
            relevance: 0,
            description: "Gets or sets a value that defines what type of snap-point should be used for the current element. There are two type of snap-points, with the primary difference being whether or not the user is guaranteed to always stop on a snap-point.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-scroll-snap-x",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "mandatory",
                },
                {
                    name: "none",
                },
                {
                    name: "proximity",
                },
                {
                    name: "snapInterval(100%, 100%)",
                },
                {
                    name: "snapList()",
                },
            ],
            status: "nonstandard",
            syntax: "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
            relevance: 0,
            description: "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-x properties.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-scroll-snap-y",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "mandatory",
                },
                {
                    name: "none",
                },
                {
                    name: "proximity",
                },
                {
                    name: "snapInterval(100%, 100%)",
                },
                {
                    name: "snapList()",
                },
            ],
            status: "nonstandard",
            syntax: "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
            relevance: 0,
            description: "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-y properties.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-scroll-translation",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "none",
                },
                {
                    name: "vertical-to-horizontal",
                },
            ],
            status: "nonstandard",
            syntax: "none | vertical-to-horizontal",
            relevance: 0,
            description: "Gets or sets a value that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-text-align-last",
            browsers: ["E", "IE8"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "center",
                    description: "The inline contents are centered within the line box.",
                },
                {
                    name: "justify",
                    description: "The text is justified according to the method specified by the 'text-justify' property.",
                },
                {
                    name: "left",
                    description: "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text.",
                },
                {
                    name: "right",
                    description: "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text.",
                },
            ],
            relevance: 50,
            description: "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-text-autospace",
            browsers: ["E", "IE8"],
            values: [
                {
                    name: "ideograph-alpha",
                    description: "Creates 1/4em extra spacing between runs of ideographic letters and non-ideographic letters, such as Latin-based, Cyrillic, Greek, Arabic or Hebrew.",
                },
                {
                    name: "ideograph-numeric",
                    description: "Creates 1/4em extra spacing between runs of ideographic letters and numeric glyphs.",
                },
                {
                    name: "ideograph-parenthesis",
                    description: "Creates extra spacing between normal (non wide) parenthesis and ideographs.",
                },
                {
                    name: "ideograph-space",
                    description: "Extends the width of the space character while surrounded by ideographs.",
                },
                {
                    name: "none",
                    description: "No extra space is created.",
                },
                {
                    name: "punctuation",
                    description: "Creates extra non-breaking spacing around punctuation as required by language-specific typographic conventions.",
                },
            ],
            status: "nonstandard",
            syntax: "none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space",
            relevance: 0,
            description: "Determines whether or not a full-width punctuation mark character should be trimmed if it appears at the beginning of a line, so that its 'ink' lines up with the first glyph in the line above and below.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-text-combine-horizontal",
            browsers: ["E", "IE11"],
            values: [
                {
                    name: "all",
                    description: "Attempt to typeset horizontally all consecutive characters within the box such that they take up the space of a single character within the vertical line box.",
                },
                {
                    name: "digits",
                    description: "Attempt to typeset horizontally each maximal sequence of consecutive ASCII digits (U+0030-U+0039) that has as many or fewer characters than the specified integer such that it takes up the space of a single character within the vertical line box.",
                },
                {
                    name: "none",
                    description: "No special processing.",
                },
            ],
            relevance: 50,
            description: "This property specifies the combination of multiple characters into the space of a single character.",
            restrictions: ["enum", "integer"],
        },
        {
            name: "-ms-text-justify",
            browsers: ["E", "IE8"],
            values: [
                {
                    name: "auto",
                    description: "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality.",
                },
                {
                    name: "distribute",
                    description: "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property.",
                },
                {
                    name: "inter-cluster",
                    description: "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai.",
                },
                {
                    name: "inter-ideograph",
                    description: "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages.",
                },
                {
                    name: "inter-word",
                    description: "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean.",
                },
                {
                    name: "kashida",
                    description: "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation.",
                },
            ],
            relevance: 50,
            description: "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-text-kashida-space",
            browsers: ["E", "IE10"],
            relevance: 50,
            description: "Sets or retrieves the ratio of kashida expansion to white space expansion when justifying lines of text in the object.",
            restrictions: ["percentage"],
        },
        {
            name: "-ms-text-overflow",
            browsers: ["IE10"],
            values: [
                {
                    name: "clip",
                    description: "Clip inline content that overflows. Characters may be only partially rendered.",
                },
                {
                    name: "ellipsis",
                    description: "Render an ellipsis character (U+2026) to represent clipped inline content.",
                },
            ],
            relevance: 50,
            description: "Text can overflow for example when it is prevented from wrapping",
            restrictions: ["enum"],
        },
        {
            name: "-ms-text-size-adjust",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "Renderers must use the default size adjustment when displaying on a small device.",
                },
                {
                    name: "none",
                    description: "Renderers must not do size adjustment when displaying on a small device.",
                },
            ],
            relevance: 50,
            description: "Specifies a size adjustment for displaying text content in mobile browsers.",
            restrictions: ["enum", "percentage"],
        },
        {
            name: "-ms-text-underline-position",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "alphabetic",
                    description: "The underline is aligned with the alphabetic baseline. In this case the underline is likely to cross some descenders.",
                },
                {
                    name: "auto",
                    description: "The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over.",
                },
                {
                    name: "over",
                    description: "The underline is aligned with the 'top' (right in vertical writing) edge of the element's em-box. In this mode, an overline also switches sides.",
                },
                {
                    name: "under",
                    description: "The underline is aligned with the 'bottom' (left in vertical writing) edge of the element's em-box. In this case the underline usually does not cross the descenders. This is sometimes called 'accounting' underline.",
                },
            ],
            relevance: 50,
            description: "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements.This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
            restrictions: ["enum"],
        },
        {
            name: "-ms-touch-action",
            browsers: ["IE10"],
            values: [
                {
                    name: "auto",
                    description: "The element is a passive element, with several exceptions.",
                },
                {
                    name: "double-tap-zoom",
                    description: "The element will zoom on double-tap.",
                },
                {
                    name: "manipulation",
                    description: "The element is a manipulation-causing element.",
                },
                {
                    name: "none",
                    description: "The element is a manipulation-blocking element.",
                },
                {
                    name: "pan-x",
                    description: "The element permits touch-driven panning on the horizontal axis. The touch pan is performed on the nearest ancestor with horizontally scrollable content.",
                },
                {
                    name: "pan-y",
                    description: "The element permits touch-driven panning on the vertical axis. The touch pan is performed on the nearest ancestor with vertically scrollable content.",
                },
                {
                    name: "pinch-zoom",
                    description: "The element permits pinch-zooming. The pinch-zoom is performed on the nearest ancestor with zoomable content.",
                },
            ],
            relevance: 50,
            description: "Gets or sets a value that indicates whether and how a given region can be manipulated by the user.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-touch-select",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "grippers",
                    description: "Grippers are always on.",
                },
                {
                    name: "none",
                    description: "Grippers are always off.",
                },
            ],
            status: "nonstandard",
            syntax: "grippers | none",
            relevance: 0,
            description: "Gets or sets a value that toggles the 'gripper' visual elements that enable touch text selection.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-transform",
            browsers: ["IE9-9"],
            values: [
                {
                    name: "matrix()",
                    description: "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]",
                },
                {
                    name: "matrix3d()",
                    description: "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order.",
                },
                {
                    name: "none",
                },
                {
                    name: "rotate()",
                    description: "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property.",
                },
                {
                    name: "rotate3d()",
                    description: "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters.",
                },
                {
                    name: "rotateX('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the X axis.",
                },
                {
                    name: "rotateY('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Y axis.",
                },
                {
                    name: "rotateZ('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Z axis.",
                },
                {
                    name: "scale()",
                    description: "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first.",
                },
                {
                    name: "scale3d()",
                    description: "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters.",
                },
                {
                    name: "scaleX()",
                    description: "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter.",
                },
                {
                    name: "scaleY()",
                    description: "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter.",
                },
                {
                    name: "scaleZ()",
                    description: "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter.",
                },
                {
                    name: "skew()",
                    description: "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis).",
                },
                {
                    name: "skewX()",
                    description: "Specifies a skew transformation along the X axis by the given angle.",
                },
                {
                    name: "skewY()",
                    description: "Specifies a skew transformation along the Y axis by the given angle.",
                },
                {
                    name: "translate()",
                    description: "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter.",
                },
                {
                    name: "translate3d()",
                    description: "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively.",
                },
                {
                    name: "translateX()",
                    description: "Specifies a translation by the given amount in the X direction.",
                },
                {
                    name: "translateY()",
                    description: "Specifies a translation by the given amount in the Y direction.",
                },
                {
                    name: "translateZ()",
                    description: "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0.",
                },
            ],
            relevance: 50,
            description: "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-transform-origin",
            browsers: ["IE9-9"],
            relevance: 50,
            description: "Establishes the origin of transformation for an element.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "-ms-transform-origin-x",
            browsers: ["IE10"],
            relevance: 50,
            description: "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "-ms-transform-origin-y",
            browsers: ["IE10"],
            relevance: 50,
            description: "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "-ms-transform-origin-z",
            browsers: ["IE10"],
            relevance: 50,
            description: "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "-ms-user-select",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "element",
                },
                {
                    name: "none",
                },
                {
                    name: "text",
                },
            ],
            status: "nonstandard",
            syntax: "none | element | text",
            relevance: 0,
            description: "Controls the appearance of selection.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-word-break",
            browsers: ["IE8"],
            values: [
                {
                    name: "break-all",
                    description: "Lines may break between any two grapheme clusters for non-CJK scripts.",
                },
                {
                    name: "keep-all",
                    description: "Block characters can no longer create implied break points.",
                },
                {
                    name: "normal",
                    description: "Breaks non-CJK scripts according to their own rules.",
                },
            ],
            relevance: 50,
            description: "Specifies line break opportunities for non-CJK scripts.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-word-wrap",
            browsers: ["IE8"],
            values: [
                {
                    name: "break-word",
                    description: "An unbreakable 'word' may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line.",
                },
                {
                    name: "normal",
                    description: "Lines may break only at allowed break points.",
                },
            ],
            relevance: 50,
            description: "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-wrap-flow",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "auto",
                    description: "For floats an exclusion is created, for all other elements an exclusion is not created.",
                },
                {
                    name: "both",
                    description: "Inline flow content can flow on all sides of the exclusion.",
                },
                {
                    name: "clear",
                    description: "Inline flow content can only wrap on top and bottom of the exclusion and must leave the areas to the start and end edges of the exclusion box empty.",
                },
                {
                    name: "end",
                    description: "Inline flow content can wrap on the end side of the exclusion area but must leave the area to the start edge of the exclusion area empty.",
                },
                {
                    name: "maximum",
                    description: "Inline flow content can wrap on the side of the exclusion with the largest available space for the given line, and must leave the other side of the exclusion empty.",
                },
                {
                    name: "minimum",
                    description: "Inline flow content can flow around the edge of the exclusion with the smallest available space within the flow content's containing block, and must leave the other edge of the exclusion empty.",
                },
                {
                    name: "start",
                    description: "Inline flow content can wrap on the start edge of the exclusion area but must leave the area to end edge of the exclusion area empty.",
                },
            ],
            status: "nonstandard",
            syntax: "auto | both | start | end | maximum | clear",
            relevance: 0,
            description: "An element becomes an exclusion when its 'wrap-flow' property has a computed value other than 'auto'.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-wrap-margin",
            browsers: ["E", "IE10"],
            status: "nonstandard",
            syntax: "<length>",
            relevance: 0,
            description: "Gets or sets a value that is used to offset the inner wrap shape from other shapes.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "-ms-wrap-through",
            browsers: ["E", "IE10"],
            values: [
                {
                    name: "none",
                    description: "The exclusion element does not inherit its parent node's wrapping context. Its descendants are only subject to exclusion shapes defined inside the element.",
                },
                {
                    name: "wrap",
                    description: "The exclusion element inherits its parent node's wrapping context. Its descendant inline content wraps around exclusions defined outside the element.",
                },
            ],
            status: "nonstandard",
            syntax: "wrap | none",
            relevance: 0,
            description: "Specifies if an element inherits its parent wrapping context. In other words if it is subject to the exclusions defined outside the element.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-writing-mode",
            browsers: ["IE8"],
            values: [
                {
                    name: "bt-lr",
                },
                {
                    name: "bt-rl",
                },
                {
                    name: "lr-bt",
                },
                {
                    name: "lr-tb",
                },
                {
                    name: "rl-bt",
                },
                {
                    name: "rl-tb",
                },
                {
                    name: "tb-lr",
                },
                {
                    name: "tb-rl",
                },
            ],
            relevance: 50,
            description: "Shorthand property for both 'direction' and 'block-progression'.",
            restrictions: ["enum"],
        },
        {
            name: "-ms-zoom",
            browsers: ["IE8"],
            values: [
                {
                    name: "normal",
                },
            ],
            relevance: 50,
            description: "Sets or retrieves the magnification scale of the object.",
            restrictions: ["enum", "integer", "number", "percentage"],
        },
        {
            name: "-ms-zoom-animation",
            browsers: ["IE10"],
            values: [
                {
                    name: "default",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            description: "Gets or sets a value that indicates whether an animation is used when zooming.",
            restrictions: ["enum"],
        },
        {
            name: "nav-down",
            browsers: ["O9.5"],
            values: [
                {
                    name: "auto",
                    description: "The user agent automatically determines which element to navigate the focus to in response to directional navigational input.",
                },
                {
                    name: "current",
                    description: "Indicates that the user agent should target the frame that the element is in.",
                },
                {
                    name: "root",
                    description: "Indicates that the user agent should target the full window.",
                },
            ],
            relevance: 50,
            description: "Provides an way to control directional focus navigation.",
            restrictions: ["enum", "identifier", "string"],
        },
        {
            name: "nav-index",
            browsers: ["O9.5"],
            values: [
                {
                    name: "auto",
                    description: "The element's sequential navigation order is assigned automatically by the user agent.",
                },
            ],
            relevance: 50,
            description: "Provides an input-method-neutral way of specifying the sequential navigation order (also known as 'tabbing order').",
            restrictions: ["number"],
        },
        {
            name: "nav-left",
            browsers: ["O9.5"],
            values: [
                {
                    name: "auto",
                    description: "The user agent automatically determines which element to navigate the focus to in response to directional navigational input.",
                },
                {
                    name: "current",
                    description: "Indicates that the user agent should target the frame that the element is in.",
                },
                {
                    name: "root",
                    description: "Indicates that the user agent should target the full window.",
                },
            ],
            relevance: 50,
            description: "Provides an way to control directional focus navigation.",
            restrictions: ["enum", "identifier", "string"],
        },
        {
            name: "nav-right",
            browsers: ["O9.5"],
            values: [
                {
                    name: "auto",
                    description: "The user agent automatically determines which element to navigate the focus to in response to directional navigational input.",
                },
                {
                    name: "current",
                    description: "Indicates that the user agent should target the frame that the element is in.",
                },
                {
                    name: "root",
                    description: "Indicates that the user agent should target the full window.",
                },
            ],
            relevance: 50,
            description: "Provides an way to control directional focus navigation.",
            restrictions: ["enum", "identifier", "string"],
        },
        {
            name: "nav-up",
            browsers: ["O9.5"],
            values: [
                {
                    name: "auto",
                    description: "The user agent automatically determines which element to navigate the focus to in response to directional navigational input.",
                },
                {
                    name: "current",
                    description: "Indicates that the user agent should target the frame that the element is in.",
                },
                {
                    name: "root",
                    description: "Indicates that the user agent should target the full window.",
                },
            ],
            relevance: 50,
            description: "Provides an way to control directional focus navigation.",
            restrictions: ["enum", "identifier", "string"],
        },
        {
            name: "negative",
            browsers: ["FF33"],
            atRule: "@counter-style",
            syntax: "<symbol> <symbol>?",
            relevance: 50,
            description: "@counter-style descriptor. Defines how to alter the representation when the counter value is negative.",
            restrictions: ["image", "identifier", "string"],
        },
        {
            name: "-o-animation",
            browsers: ["O12"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "backwards",
                    description: "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",
                },
                {
                    name: "both",
                    description: "Both forwards and backwards fill modes are applied.",
                },
                {
                    name: "forwards",
                    description: "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",
                },
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
                {
                    name: "none",
                    description: "No animation is performed",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            relevance: 50,
            description: "Shorthand property combines six of the animation properties into a single property.",
            restrictions: ["time", "enum", "timing-function", "identifier", "number"],
        },
        {
            name: "-o-animation-delay",
            browsers: ["O12"],
            relevance: 50,
            description: "Defines when the animation will start.",
            restrictions: ["time"],
        },
        {
            name: "-o-animation-direction",
            browsers: ["O12"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            relevance: 50,
            description: "Defines whether or not the animation should play in reverse on alternate cycles.",
            restrictions: ["enum"],
        },
        {
            name: "-o-animation-duration",
            browsers: ["O12"],
            relevance: 50,
            description: "Defines the length of time that an animation takes to complete one cycle.",
            restrictions: ["time"],
        },
        {
            name: "-o-animation-fill-mode",
            browsers: ["O12"],
            values: [
                {
                    name: "backwards",
                    description: "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",
                },
                {
                    name: "both",
                    description: "Both forwards and backwards fill modes are applied.",
                },
                {
                    name: "forwards",
                    description: "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",
                },
                {
                    name: "none",
                    description: "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes.",
                },
            ],
            relevance: 50,
            description: "Defines what values are applied by the animation outside the time it is executing.",
            restrictions: ["enum"],
        },
        {
            name: "-o-animation-iteration-count",
            browsers: ["O12"],
            values: [
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
            ],
            relevance: 50,
            description: "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            restrictions: ["number", "enum"],
        },
        {
            name: "-o-animation-name",
            browsers: ["O12"],
            values: [
                {
                    name: "none",
                    description: "No animation is performed",
                },
            ],
            relevance: 50,
            description: "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            restrictions: ["identifier", "enum"],
        },
        {
            name: "-o-animation-play-state",
            browsers: ["O12"],
            values: [
                {
                    name: "paused",
                    description: "A running animation will be paused.",
                },
                {
                    name: "running",
                    description: "Resume playback of a paused animation.",
                },
            ],
            relevance: 50,
            description: "Defines whether the animation is running or paused.",
            restrictions: ["enum"],
        },
        {
            name: "-o-animation-timing-function",
            browsers: ["O12"],
            relevance: 50,
            description: "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            restrictions: ["timing-function"],
        },
        {
            name: "object-fit",
            browsers: ["E79", "FF36", "S10", "C32", "O19"],
            values: [
                {
                    name: "contain",
                    description: "The replaced content is sized to maintain its aspect ratio while fitting within the element's content box: its concrete object size is resolved as a contain constraint against the element's used width and height.",
                },
                {
                    name: "cover",
                    description: "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element's used width and height.",
                },
                {
                    name: "fill",
                    description: "The replaced content is sized to fill the element's content box: the object's concrete object size is the element's used width and height.",
                },
                {
                    name: "none",
                    description: "The replaced content is not resized to fit inside the element's content box",
                },
                {
                    name: "scale-down",
                    description: "Size the content as if 'none' or 'contain' were specified, whichever would result in a smaller concrete object size.",
                },
            ],
            syntax: "fill | contain | cover | none | scale-down",
            relevance: 71,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/object-fit",
                },
            ],
            description: "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
            restrictions: ["enum"],
        },
        {
            name: "object-position",
            browsers: ["E79", "FF36", "S10", "C32", "O19"],
            syntax: "<position>",
            relevance: 57,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/object-position",
                },
            ],
            description: "Determines the alignment of the replaced element inside its box.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "-o-border-image",
            browsers: ["O11.6"],
            values: [
                {
                    name: "auto",
                    description: "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead.",
                },
                {
                    name: "fill",
                    description: "Causes the middle part of the border-image to be preserved.",
                },
                {
                    name: "none",
                },
                {
                    name: "repeat",
                    description: "The image is tiled (repeated) to fill the area.",
                },
                {
                    name: "round",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.",
                },
                {
                    name: "space",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.",
                },
                {
                    name: "stretch",
                    description: "The image is stretched to fill the area.",
                },
            ],
            relevance: 50,
            description: "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            restrictions: ["length", "percentage", "number", "image", "enum"],
        },
        {
            name: "-o-object-fit",
            browsers: ["O10.6"],
            values: [
                {
                    name: "contain",
                    description: "The replaced content is sized to maintain its aspect ratio while fitting within the element's content box: its concrete object size is resolved as a contain constraint against the element's used width and height.",
                },
                {
                    name: "cover",
                    description: "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element's used width and height.",
                },
                {
                    name: "fill",
                    description: "The replaced content is sized to fill the element's content box: the object's concrete object size is the element's used width and height.",
                },
                {
                    name: "none",
                    description: "The replaced content is not resized to fit inside the element's content box",
                },
                {
                    name: "scale-down",
                    description: "Size the content as if 'none' or 'contain' were specified, whichever would result in a smaller concrete object size.",
                },
            ],
            relevance: 50,
            description: "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
            restrictions: ["enum"],
        },
        {
            name: "-o-object-position",
            browsers: ["O10.6"],
            relevance: 50,
            description: "Determines the alignment of the replaced element inside its box.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "opacity",
            browsers: ["E12", "FF1", "S2", "C1", "IE9", "O9"],
            syntax: "<alpha-value>",
            relevance: 93,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/opacity",
                },
            ],
            description: "Opacity of an element's text, where 1 is opaque and 0 is entirely transparent.",
            restrictions: ["number(0-1)"],
        },
        {
            name: "order",
            browsers: ["E12", "FF20", "S9", "C29", "IE11", "O12.1"],
            syntax: "<integer>",
            relevance: 67,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/order",
                },
            ],
            description: "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
            restrictions: ["integer"],
        },
        {
            name: "orphans",
            browsers: ["E12", "S1.3", "C25", "IE8", "O9.2"],
            syntax: "<integer>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/orphans",
                },
            ],
            description: "Specifies the minimum number of line boxes in a block container that must be left in a fragment before a fragmentation break.",
            restrictions: ["integer"],
        },
        {
            name: "-o-table-baseline",
            browsers: ["O9.6"],
            relevance: 50,
            description: "Determines which row of a inline-table should be used as baseline of inline-table.",
            restrictions: ["integer"],
        },
        {
            name: "-o-tab-size",
            browsers: ["O10.6"],
            relevance: 50,
            description: "This property determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
            restrictions: ["integer", "length"],
        },
        {
            name: "-o-text-overflow",
            browsers: ["O10"],
            values: [
                {
                    name: "clip",
                    description: "Clip inline content that overflows. Characters may be only partially rendered.",
                },
                {
                    name: "ellipsis",
                    description: "Render an ellipsis character (U+2026) to represent clipped inline content.",
                },
            ],
            relevance: 50,
            description: "Text can overflow for example when it is prevented from wrapping",
            restrictions: ["enum"],
        },
        {
            name: "-o-transform",
            browsers: ["O10.5"],
            values: [
                {
                    name: "matrix()",
                    description: "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]",
                },
                {
                    name: "matrix3d()",
                    description: "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order.",
                },
                {
                    name: "none",
                },
                {
                    name: "rotate()",
                    description: "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property.",
                },
                {
                    name: "rotate3d()",
                    description: "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters.",
                },
                {
                    name: "rotateX('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the X axis.",
                },
                {
                    name: "rotateY('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Y axis.",
                },
                {
                    name: "rotateZ('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Z axis.",
                },
                {
                    name: "scale()",
                    description: "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first.",
                },
                {
                    name: "scale3d()",
                    description: "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters.",
                },
                {
                    name: "scaleX()",
                    description: "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter.",
                },
                {
                    name: "scaleY()",
                    description: "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter.",
                },
                {
                    name: "scaleZ()",
                    description: "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter.",
                },
                {
                    name: "skew()",
                    description: "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis).",
                },
                {
                    name: "skewX()",
                    description: "Specifies a skew transformation along the X axis by the given angle.",
                },
                {
                    name: "skewY()",
                    description: "Specifies a skew transformation along the Y axis by the given angle.",
                },
                {
                    name: "translate()",
                    description: "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter.",
                },
                {
                    name: "translate3d()",
                    description: "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively.",
                },
                {
                    name: "translateX()",
                    description: "Specifies a translation by the given amount in the X direction.",
                },
                {
                    name: "translateY()",
                    description: "Specifies a translation by the given amount in the Y direction.",
                },
                {
                    name: "translateZ()",
                    description: "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0.",
                },
            ],
            relevance: 50,
            description: "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            restrictions: ["enum"],
        },
        {
            name: "-o-transform-origin",
            browsers: ["O10.5"],
            relevance: 50,
            description: "Establishes the origin of transformation for an element.",
            restrictions: ["positon", "length", "percentage"],
        },
        {
            name: "-o-transition",
            browsers: ["O11.5"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            relevance: 50,
            description: "Shorthand property combines four of the transition properties into a single property.",
            restrictions: ["time", "property", "timing-function", "enum"],
        },
        {
            name: "-o-transition-delay",
            browsers: ["O11.5"],
            relevance: 50,
            description: "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            restrictions: ["time"],
        },
        {
            name: "-o-transition-duration",
            browsers: ["O11.5"],
            relevance: 50,
            description: "Specifies how long the transition from the old value to the new value should take.",
            restrictions: ["time"],
        },
        {
            name: "-o-transition-property",
            browsers: ["O11.5"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            relevance: 50,
            description: "Specifies the name of the CSS property to which the transition is applied.",
            restrictions: ["property"],
        },
        {
            name: "-o-transition-timing-function",
            browsers: ["O11.5"],
            relevance: 50,
            description: "Describes how the intermediate values used during a transition will be calculated.",
            restrictions: ["timing-function"],
        },
        {
            name: "offset-block-end",
            browsers: ["FF41"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well.",
                },
            ],
            relevance: 50,
            description: "Logical 'bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "offset-block-start",
            browsers: ["FF41"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well.",
                },
            ],
            relevance: 50,
            description: "Logical 'top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "offset-inline-end",
            browsers: ["FF41"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well.",
                },
            ],
            relevance: 50,
            description: "Logical 'right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "offset-inline-start",
            browsers: ["FF41"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well.",
                },
            ],
            relevance: 50,
            description: "Logical 'left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "outline",
            browsers: ["E94", "FF88", "S16.4", "C94", "IE8", "O80"],
            values: [
                {
                    name: "auto",
                    description: "Permits the user agent to render a custom outline style, typically the default platform style.",
                },
                {
                    name: "invert",
                    browsers: ["E94", "FF88", "S16.4", "C94", "IE8", "O80"],
                    description: "Performs a color inversion on the pixels on the screen.",
                },
            ],
            syntax: "[ <'outline-width'> || <'outline-style'> || <'outline-color'> ]",
            relevance: 88,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/outline",
                },
            ],
            description: "Shorthand property for 'outline-style', 'outline-width', and 'outline-color'.",
            restrictions: ["length", "line-width", "line-style", "color", "enum"],
        },
        {
            name: "outline-color",
            browsers: ["E12", "FF1.5", "S1.2", "C1", "IE8", "O7"],
            values: [
                {
                    name: "invert",
                    browsers: ["E12", "FF1.5", "S1.2", "C1", "IE8", "O7"],
                    description: "Performs a color inversion on the pixels on the screen.",
                },
            ],
            syntax: "auto | <color>",
            relevance: 62,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/outline-color",
                },
            ],
            description: "The color of the outline.",
            restrictions: ["enum", "color"],
        },
        {
            name: "outline-offset",
            browsers: ["E15", "FF1.5", "S1.2", "C1", "O9.5"],
            syntax: "<length>",
            relevance: 70,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/outline-offset",
                },
            ],
            description: "Offset the outline and draw it beyond the border edge.",
            restrictions: ["length"],
        },
        {
            name: "outline-style",
            browsers: ["E12", "FF1.5", "S1.2", "C1", "IE8", "O7"],
            values: [
                {
                    name: "auto",
                    description: "Permits the user agent to render a custom outline style, typically the default platform style.",
                },
            ],
            syntax: "auto | <'border-style'>",
            relevance: 59,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/outline-style",
                },
            ],
            description: "Style of the outline.",
            restrictions: ["line-style", "enum"],
        },
        {
            name: "outline-width",
            browsers: ["E12", "FF1.5", "S1.2", "C1", "IE8", "O7"],
            syntax: "<line-width>",
            relevance: 63,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/outline-width",
                },
            ],
            description: "Width of the outline.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "overflow",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "auto",
                    description: "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes.",
                },
                {
                    name: "hidden",
                    description: "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region.",
                },
                {
                    name: "-moz-hidden-unscrollable",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
                    description: "Same as the standardized 'clip', except doesn't establish a block formatting context.",
                },
                {
                    name: "scroll",
                    description: "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped.",
                },
                {
                    name: "visible",
                    description: "Content is not clipped, i.e., it may be rendered outside the content box.",
                },
            ],
            syntax: "[ visible | hidden | clip | scroll | auto ]{1,2}",
            relevance: 93,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow",
                },
            ],
            description: "Shorthand for setting 'overflow-x' and 'overflow-y'.",
            restrictions: ["enum"],
        },
        {
            name: "overflow-wrap",
            browsers: ["E18", "FF49", "S7", "C23", "IE5.5", "O12.1"],
            values: [
                {
                    name: "break-word",
                    description: "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line.",
                },
                {
                    name: "normal",
                    description: "Lines may break only at allowed break points.",
                },
                {
                    name: "anywhere",
                    description: "There is a soft wrap opportunity around every typographic character unit, including around any punctuation character or preserved white spaces, or in the middle of words, disregarding any prohibition against line breaks, even those introduced by characters with the GL, WJ, or ZWJ line breaking classes or mandated by the word-break property.",
                },
            ],
            syntax: "normal | break-word | anywhere",
            relevance: 66,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow-wrap",
                },
            ],
            description: "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.",
            restrictions: ["enum"],
        },
        {
            name: "overflow-x",
            browsers: ["E12", "FF3.5", "S3", "C1", "IE5", "O9.5"],
            values: [
                {
                    name: "auto",
                    description: "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes.",
                },
                {
                    name: "hidden",
                    description: "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region.",
                },
                {
                    name: "scroll",
                    description: "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped.",
                },
                {
                    name: "visible",
                    description: "Content is not clipped, i.e., it may be rendered outside the content box.",
                },
            ],
            syntax: "visible | hidden | clip | scroll | auto",
            relevance: 81,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow-x",
                },
            ],
            description: "Specifies the handling of overflow in the horizontal direction.",
            restrictions: ["enum"],
        },
        {
            name: "overflow-y",
            browsers: ["E12", "FF3.5", "S3", "C1", "IE5", "O9.5"],
            values: [
                {
                    name: "auto",
                    description: "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes.",
                },
                {
                    name: "hidden",
                    description: "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region.",
                },
                {
                    name: "scroll",
                    description: "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped.",
                },
                {
                    name: "visible",
                    description: "Content is not clipped, i.e., it may be rendered outside the content box.",
                },
            ],
            syntax: "visible | hidden | clip | scroll | auto",
            relevance: 83,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow-y",
                },
            ],
            description: "Specifies the handling of overflow in the vertical direction.",
            restrictions: ["enum"],
        },
        {
            name: "pad",
            browsers: ["FF33"],
            atRule: "@counter-style",
            syntax: "<integer> && <symbol>",
            relevance: 50,
            description: '@counter-style descriptor. Specifies a "fixed-width" counter style, where representations shorter than the pad value are padded with a particular <symbol>',
            restrictions: ["integer", "image", "string", "identifier"],
        },
        {
            name: "padding",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [],
            syntax: "[ <length> | <percentage> ]{1,4}",
            relevance: 95,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding",
                },
            ],
            description: "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-bottom",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<length> | <percentage>",
            relevance: 88,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-bottom",
                },
            ],
            description: "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-block-end",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'padding-left'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-block-end",
                },
            ],
            description: "Logical 'padding-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-block-start",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'padding-left'>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-block-start",
                },
            ],
            description: "Logical 'padding-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-inline-end",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'padding-left'>",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-inline-end",
                },
            ],
            description: "Logical 'padding-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-inline-start",
            browsers: ["E79", "FF41", "S12.1", "C69", "O56"],
            syntax: "<'padding-left'>",
            relevance: 57,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-inline-start",
                },
            ],
            description: "Logical 'padding-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-left",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<length> | <percentage>",
            relevance: 90,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-left",
                },
            ],
            description: "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-right",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<length> | <percentage>",
            relevance: 89,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-right",
                },
            ],
            description: "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "padding-top",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            syntax: "<length> | <percentage>",
            relevance: 89,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-top",
                },
            ],
            description: "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "page-break-after",
            browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break after the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page break after generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page break after the generated box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks after the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks after the generated box so that the next page is formatted as a right page.",
                },
            ],
            syntax: "auto | always | avoid | left | right | recto | verso",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/page-break-after",
                },
            ],
            description: "Defines rules for page breaks after an element.",
            restrictions: ["enum"],
        },
        {
            name: "page-break-before",
            browsers: ["E12", "FF1", "S1.2", "C1", "IE4", "O7"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break before the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page break before the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page break before the generated box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks before the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks before the generated box so that the next page is formatted as a right page.",
                },
            ],
            syntax: "auto | always | avoid | left | right | recto | verso",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/page-break-before",
                },
            ],
            description: "Defines rules for page breaks before an element.",
            restrictions: ["enum"],
        },
        {
            name: "page-break-inside",
            browsers: ["E12", "FF19", "S1.3", "C1", "IE8", "O7"],
            values: [
                {
                    name: "auto",
                    description: "Neither force nor forbid a page break inside the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page break inside the generated box.",
                },
            ],
            syntax: "auto | avoid",
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/page-break-inside",
                },
            ],
            description: "Defines rules for page breaks inside an element.",
            restrictions: ["enum"],
        },
        {
            name: "paint-order",
            browsers: ["E123", "FF60", "S11", "C123", "O109"],
            values: [
                {
                    name: "fill",
                },
                {
                    name: "markers",
                },
                {
                    name: "normal",
                    description: "The element is painted with the standard order of painting operations: the 'fill' is painted first, then its 'stroke' and finally its markers.",
                },
                {
                    name: "stroke",
                },
            ],
            syntax: "normal | [ fill || stroke || markers ]",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/paint-order",
                },
            ],
            description: "Controls the order that the three paint operations that shapes and text are rendered with: their fill, their stroke and any markers they might have.",
            restrictions: ["enum"],
        },
        {
            name: "perspective",
            browsers: ["E12", "FF16", "S9", "C36", "IE10", "O23"],
            values: [
                {
                    name: "none",
                    description: "No perspective transform is applied.",
                },
            ],
            syntax: "none | <length>",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/perspective",
                },
            ],
            description: "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            restrictions: ["length", "enum"],
        },
        {
            name: "perspective-origin",
            browsers: ["E12", "FF16", "S9", "C36", "IE10", "O23"],
            syntax: "<position>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/perspective-origin",
                },
            ],
            description: "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            restrictions: ["position", "percentage", "length"],
        },
        {
            name: "pointer-events",
            browsers: ["E12", "FF1.5", "S4", "C1", "IE11", "O9"],
            values: [
                {
                    name: "all",
                    description: "The given element can be the target element for pointer events whenever the pointer is over either the interior or the perimeter of the element.",
                },
                {
                    name: "fill",
                    description: "The given element can be the target element for pointer events whenever the pointer is over the interior of the element.",
                },
                {
                    name: "none",
                    description: "The given element does not receive pointer events.",
                },
                {
                    name: "painted",
                    description: 'The given element can be the target element for pointer events when the pointer is over a "painted" area. ',
                },
                {
                    name: "stroke",
                    description: "The given element can be the target element for pointer events whenever the pointer is over the perimeter of the element.",
                },
                {
                    name: "visible",
                    description: "The given element can be the target element for pointer events when the 'visibility' property is set to visible and the pointer is over either the interior or the perimeter of the element.",
                },
                {
                    name: "visibleFill",
                    description: "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over the interior of the element.",
                },
                {
                    name: "visiblePainted",
                    description: "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over a 'painted' area.",
                },
                {
                    name: "visibleStroke",
                    description: "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over the perimeter of the element.",
                },
            ],
            syntax: "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/pointer-events",
                },
            ],
            description: "Specifies under what circumstances a given element can be the target element for a pointer event.",
            restrictions: ["enum"],
        },
        {
            name: "position",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
            values: [
                {
                    name: "absolute",
                    description: "The box's position (and possibly size) is specified with the 'top', 'right', 'bottom', and 'left' properties. These properties specify offsets with respect to the box's 'containing block'.",
                },
                {
                    name: "fixed",
                    description: "The box's position is calculated according to the 'absolute' model, but in addition, the box is fixed with respect to some reference. As with the 'absolute' model, the box's margins do not collapse with any other margins.",
                },
                {
                    name: "-ms-page",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
                    description: "The box's position is calculated according to the 'absolute' model.",
                },
                {
                    name: "relative",
                    description: "The box's position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position.",
                },
                {
                    name: "static",
                    description: "The box is a normal box, laid out according to the normal flow. The 'top', 'right', 'bottom', and 'left' properties do not apply.",
                },
                {
                    name: "sticky",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
                    description: "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes.",
                },
                {
                    name: "-webkit-sticky",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
                    description: "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes.",
                },
            ],
            syntax: "static | relative | absolute | sticky | fixed",
            relevance: 95,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/position",
                },
            ],
            description: "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.",
            restrictions: ["enum"],
        },
        {
            name: "prefix",
            browsers: ["FF33"],
            atRule: "@counter-style",
            syntax: "<symbol>",
            relevance: 50,
            description: "@counter-style descriptor. Specifies a <symbol> that is prepended to the marker representation.",
            restrictions: ["image", "string", "identifier"],
        },
        {
            name: "quotes",
            browsers: ["E12", "FF1.5", "S9", "C11", "IE8", "O4"],
            values: [
                {
                    name: "none",
                    description: "The 'open-quote' and 'close-quote' values of the 'content' property produce no quotations marks, as if they were 'no-open-quote' and 'no-close-quote' respectively.",
                },
            ],
            syntax: "none | auto | [ <string> <string> ]+",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/quotes",
                },
            ],
            description: "Specifies quotation marks for any number of embedded quotations.",
            restrictions: ["string"],
        },
        {
            name: "range",
            browsers: ["FF33"],
            values: [
                {
                    name: "auto",
                    description: "The range depends on the counter system.",
                },
                {
                    name: "infinite",
                    description: "If used as the first value in a range, it represents negative infinity; if used as the second value, it represents positive infinity.",
                },
            ],
            atRule: "@counter-style",
            syntax: "[ [ <integer> | infinite ]{2} ]# | auto",
            relevance: 50,
            description: "@counter-style descriptor. Defines the ranges over which the counter style is defined.",
            restrictions: ["integer", "enum"],
        },
        {
            name: "resize",
            browsers: ["E79", "FF4", "S3", "C1", "O12.1"],
            values: [
                {
                    name: "both",
                    description: "The UA presents a bidirectional resizing mechanism to allow the user to adjust both the height and the width of the element.",
                },
                {
                    name: "horizontal",
                    description: "The UA presents a unidirectional horizontal resizing mechanism to allow the user to adjust only the width of the element.",
                },
                {
                    name: "none",
                    description: "The UA does not present a resizing mechanism on the element, and the user is given no direct manipulation mechanism to resize the element.",
                },
                {
                    name: "vertical",
                    description: "The UA presents a unidirectional vertical resizing mechanism to allow the user to adjust only the height of the element.",
                },
            ],
            syntax: "none | both | horizontal | vertical | block | inline",
            relevance: 66,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/resize",
                },
            ],
            description: "Specifies whether or not an element is resizable by the user, and if so, along which axis/axes.",
            restrictions: ["enum"],
        },
        {
            name: "right",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O5"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 91,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/right",
                },
            ],
            description: "Specifies how far an absolutely positioned box's right margin edge is offset to the left of the right edge of the box's 'containing block'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "ruby-align",
            browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
            values: [
                {
                    name: "auto",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "The user agent determines how the ruby contents are aligned. This is the initial value.",
                },
                {
                    name: "center",
                    description: "The ruby content is centered within its box.",
                },
                {
                    name: "distribute-letter",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with the first and last ruby text glyphs lining up with the corresponding first and last base glyphs. If the width of the ruby text is at least the width of the base, then the letters of the base are evenly distributed across the width of the ruby text.",
                },
                {
                    name: "distribute-space",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with a certain amount of white space preceding the first and following the last character in the ruby text. That amount of white space is normally equal to half the amount of inter-character space of the ruby text.",
                },
                {
                    name: "left",
                    description: "The ruby text content is aligned with the start edge of the base.",
                },
                {
                    name: "line-edge",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "If the ruby text is not adjacent to a line edge, it is aligned as in 'auto'. If it is adjacent to a line edge, then it is still aligned as in auto, but the side of the ruby text that touches the end of the line is lined up with the corresponding edge of the base.",
                },
                {
                    name: "right",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "The ruby text content is aligned with the end edge of the base.",
                },
                {
                    name: "start",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "The ruby text content is aligned with the start edge of the base.",
                },
                {
                    name: "space-between",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "The ruby content expands as defined for normal text justification (as defined by 'text-justify'),",
                },
                {
                    name: "space-around",
                    browsers: ["E128", "FF38", "S18.2", "C128", "O114"],
                    description: "As for 'space-between' except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content.",
                },
            ],
            syntax: "start | center | space-between | space-around",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/ruby-align",
                },
            ],
            description: "Specifies how text is distributed within the various ruby boxes when their contents do not exactly fill their respective boxes.",
            restrictions: ["enum"],
        },
        {
            name: "ruby-overhang",
            browsers: ["S18.2"],
            values: [
                {
                    name: "auto",
                    description: "The ruby text can overhang text adjacent to the base on either side. This is the initial value.",
                },
                {
                    name: "end",
                    description: "The ruby text can overhang the text that follows it.",
                },
                {
                    name: "none",
                    description: "The ruby text cannot overhang any text adjacent to its base, only its own base.",
                },
                {
                    name: "start",
                    description: "The ruby text can overhang the text that precedes it.",
                },
            ],
            relevance: 50,
            description: "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
            restrictions: ["enum"],
        },
        {
            name: "ruby-position",
            browsers: ["E84", "FF38", "S18.2", "C84", "O70"],
            values: [
                {
                    name: "after",
                    description: "The ruby text appears after the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text.",
                },
                {
                    name: "before",
                    description: "The ruby text appears before the base. This is the most common setting used in ideographic East Asian writing systems.",
                },
                {
                    name: "inline",
                },
                {
                    name: "right",
                    description: "The ruby text appears on the right of the base. Unlike 'before' and 'after', this value is not relative to the text flow direction.",
                },
            ],
            syntax: "[ alternate || [ over | under ] ] | inter-character",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/ruby-position",
                },
            ],
            description: "Used by the parent of elements with display: ruby-text to control the position of the ruby text with respect to its base.",
            restrictions: ["enum"],
        },
        {
            name: "ruby-span",
            browsers: ["FF10"],
            values: [
                {
                    name: "attr(x)",
                    description: "The value of attribute 'x' is a string value. The string value is evaluated as a <number> to determine the number of ruby base elements to be spanned by the annotation element.",
                },
                {
                    name: "none",
                    description: "No spanning. The computed value is '1'.",
                },
            ],
            relevance: 50,
            description: "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
            restrictions: ["enum"],
        },
        {
            name: "scrollbar-3dlight-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "scrollbar-arrow-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the arrow elements of a scroll arrow.",
            restrictions: ["color"],
        },
        {
            name: "scrollbar-base-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
            restrictions: ["color"],
        },
        {
            name: "scrollbar-darkshadow-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the gutter of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "scrollbar-face-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "scrollbar-highlight-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "scrollbar-shadow-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "scrollbar-track-color",
            browsers: ["IE6"],
            relevance: 50,
            description: "Determines the color of the track element of a scroll bar.",
            restrictions: ["color"],
        },
        {
            name: "scroll-behavior",
            browsers: ["E79", "FF36", "S15.4", "C61", "O48"],
            values: [
                {
                    name: "auto",
                    description: "Scrolls in an instant fashion.",
                },
                {
                    name: "smooth",
                    description: "Scrolls in a smooth fashion using a user-agent-defined timing function and time period.",
                },
            ],
            syntax: "auto | smooth",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-behavior",
                },
            ],
            description: "Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs.",
            restrictions: ["enum"],
        },
        {
            name: "scroll-snap-coordinate",
            browsers: ["FF39"],
            values: [
                {
                    name: "none",
                    description: "Specifies that this element does not contribute a snap point.",
                },
            ],
            status: "obsolete",
            syntax: "none | <position>#",
            relevance: 0,
            description: "Defines the x and y coordinate within the element which will align with the nearest ancestor scroll container's snap-destination for the respective axis.",
            restrictions: ["position", "length", "percentage", "enum"],
        },
        {
            name: "scroll-snap-destination",
            browsers: ["FF39"],
            status: "obsolete",
            syntax: "<position>",
            relevance: 0,
            description: "Define the x and y coordinate within the scroll container's visual viewport which element snap points will align with.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "scroll-snap-points-x",
            browsers: ["FF39"],
            values: [
                {
                    name: "none",
                    description: "No snap points are defined by this scroll container.",
                },
                {
                    name: "repeat()",
                    description: "Defines an interval at which snap points are defined, starting from the container's relevant start edge.",
                },
            ],
            status: "obsolete",
            syntax: "none | repeat( <length-percentage> )",
            relevance: 0,
            description: "Defines the positioning of snap points along the x axis of the scroll container it is applied to.",
            restrictions: ["enum"],
        },
        {
            name: "scroll-snap-points-y",
            browsers: ["FF39"],
            values: [
                {
                    name: "none",
                    description: "No snap points are defined by this scroll container.",
                },
                {
                    name: "repeat()",
                    description: "Defines an interval at which snap points are defined, starting from the container's relevant start edge.",
                },
            ],
            status: "obsolete",
            syntax: "none | repeat( <length-percentage> )",
            relevance: 0,
            description: "Defines the positioning of snap points along the y axis of the scroll container it is applied to.",
            restrictions: ["enum"],
        },
        {
            name: "scroll-snap-type",
            browsers: ["E79", "FF99", "S11", "C69", "IE10", "O56"],
            values: [
                {
                    name: "none",
                    description: "The visual viewport of this scroll container must ignore snap points, if any, when scrolled.",
                },
                {
                    name: "mandatory",
                    description: "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations.",
                },
                {
                    name: "proximity",
                    description: "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll.",
                },
            ],
            syntax: "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type",
                },
            ],
            description: "Defines how strictly snap points are enforced on the scroll container.",
            restrictions: ["enum"],
        },
        {
            name: "shape-image-threshold",
            browsers: ["E79", "FF62", "S10.1", "C37", "O24"],
            syntax: "<alpha-value>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold",
                },
            ],
            description: "Defines the alpha channel threshold used to extract the shape using an image. A value of 0.5 means that the shape will enclose all the pixels that are more than 50% opaque.",
            restrictions: ["number"],
        },
        {
            name: "shape-margin",
            browsers: ["E79", "FF62", "S10.1", "C37", "O24"],
            syntax: "<length-percentage>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/shape-margin",
                },
            ],
            description: "Adds a margin to a 'shape-outside'. This defines a new shape that is the smallest contour that includes all the points that are the 'shape-margin' distance outward in the perpendicular direction from a point on the underlying shape.",
            restrictions: ["url", "length", "percentage"],
        },
        {
            name: "shape-outside",
            browsers: ["E79", "FF62", "S10.1", "C37", "O24"],
            values: [
                {
                    name: "margin-box",
                    description: "The background is painted within (clipped to) the margin box.",
                },
                {
                    name: "none",
                    description: "The float area is unaffected.",
                },
            ],
            syntax: "none | [ <shape-box> || <basic-shape> ] | <image>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/shape-outside",
                },
            ],
            description: "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
            restrictions: ["image", "box", "shape", "enum"],
        },
        {
            name: "shape-rendering",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "auto",
                    description: "Suppresses aural rendering.",
                },
                {
                    name: "crispEdges",
                    description: "Emphasize the contrast between clean edges of artwork over rendering speed and geometric precision.",
                },
                {
                    name: "geometricPrecision",
                    description: "Emphasize geometric precision over speed and crisp edges.",
                },
                {
                    name: "optimizeSpeed",
                    description: "Emphasize rendering speed over geometric precision and crisp edges.",
                },
            ],
            syntax: "auto | optimizeSpeed | crispEdges | geometricPrecision",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/shape-rendering",
                },
            ],
            description: "Provides hints about what tradeoffs to make as it renders vector graphics elements such as <path> elements and basic shapes such as circles and rectangles.",
            restrictions: ["enum"],
        },
        {
            name: "size",
            browsers: ["C", "O8"],
            atRule: "@page",
            syntax: "<length>{1,2} | auto | [ <page-size> || [ portrait | landscape ] ]",
            relevance: 53,
            description: "The size CSS at-rule descriptor, used with the @page at-rule, defines the size and orientation of the box which is used to represent a page. Most of the time, this size corresponds to the target size of the printed page if applicable.",
            restrictions: ["length"],
        },
        {
            name: "src",
            values: [
                {
                    name: "url()",
                    description: "Reference font by URL",
                },
                {
                    name: "format()",
                    description: "Optional hint describing the format of the font resource.",
                },
                {
                    name: "local()",
                    description: "Format-specific string that identifies a locally available copy of a given font.",
                },
            ],
            atRule: "@font-face",
            syntax: "[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#",
            relevance: 86,
            description: "@font-face descriptor. Specifies the resource containing font data. It is required, whether the font is downloadable or locally installed.",
            restrictions: ["enum", "url", "identifier"],
        },
        {
            name: "stop-color",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stop-color",
                },
            ],
            description: "Indicates what color to use at that gradient stop.",
            restrictions: ["color"],
        },
        {
            name: "stop-opacity",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            relevance: 52,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stop-opacity",
                },
            ],
            description: "Defines the opacity of a given gradient stop.",
            restrictions: ["number(0-1)"],
        },
        {
            name: "stroke",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "url()",
                    description: "A URL reference to a paint server element, which is an element that defines a paint server: 'hatch', 'linearGradient', 'mesh', 'pattern', 'radialGradient' and 'solidcolor'.",
                },
                {
                    name: "none",
                    description: "No paint is applied in this layer.",
                },
            ],
            syntax: "",
            relevance: 69,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke",
                },
            ],
            description: "Paints along the outline of the given graphical element.",
            restrictions: ["color", "enum", "url"],
        },
        {
            name: "stroke-dasharray",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "none",
                    description: "Indicates that no dashing is used.",
                },
            ],
            syntax: "none | <dasharray>",
            relevance: 62,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke-dasharray",
                },
            ],
            description: "Controls the pattern of dashes and gaps used to stroke paths.",
            restrictions: ["length", "percentage", "number", "enum"],
        },
        {
            name: "stroke-dashoffset",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            syntax: "<length-percentage> | <number>",
            relevance: 63,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke-dashoffset",
                },
            ],
            description: "Specifies the distance into the dash pattern to start the dash.",
            restrictions: ["percentage", "length"],
        },
        {
            name: "stroke-linecap",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "butt",
                    description: "Indicates that the stroke for each subpath does not extend beyond its two endpoints.",
                },
                {
                    name: "round",
                    description: "Indicates that at each end of each subpath, the shape representing the stroke will be extended by a half circle with a radius equal to the stroke width.",
                },
                {
                    name: "square",
                    description: "Indicates that at the end of each subpath, the shape representing the stroke will be extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width.",
                },
            ],
            syntax: "butt | round | square",
            relevance: 54,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke-linecap",
                },
            ],
            description: "Specifies the shape to be used at the end of open subpaths when they are stroked.",
            restrictions: ["enum"],
        },
        {
            name: "stroke-linejoin",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "bevel",
                    description: "Indicates that a bevelled corner is to be used to join path segments.",
                },
                {
                    name: "miter",
                    description: "Indicates that a sharp corner is to be used to join path segments.",
                },
                {
                    name: "round",
                    description: "Indicates that a round corner is to be used to join path segments.",
                },
            ],
            syntax: "miter | miter-clip | round | bevel | arcs",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke-linejoin",
                },
            ],
            description: "Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.",
            restrictions: ["enum"],
        },
        {
            name: "stroke-miterlimit",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            syntax: "<number>",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke-miterlimit",
                },
            ],
            description: "When two line segments meet at a sharp angle and miter joins have been specified for 'stroke-linejoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path.",
            restrictions: ["number"],
        },
        {
            name: "stroke-opacity",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            syntax: "<'opacity'>",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke-opacity",
                },
            ],
            description: "Specifies the opacity of the painting operation used to stroke the current object.",
            restrictions: ["number(0-1)"],
        },
        {
            name: "stroke-width",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            syntax: "<length-percentage> | <number>",
            relevance: 70,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/stroke-width",
                },
            ],
            description: "Specifies the width of the stroke on the current object.",
            restrictions: ["percentage", "length"],
        },
        {
            name: "suffix",
            browsers: ["FF33"],
            atRule: "@counter-style",
            syntax: "<symbol>",
            relevance: 50,
            description: "@counter-style descriptor. Specifies a <symbol> that is appended to the marker representation.",
            restrictions: ["image", "string", "identifier"],
        },
        {
            name: "system",
            browsers: ["FF33"],
            values: [
                {
                    name: "additive",
                    description: 'Represents "sign-value" numbering systems, which, rather than using reusing digits in different positions to change their value, define additional digits with much larger values, so that the value of the number can be obtained by adding all the digits together.',
                },
                {
                    name: "alphabetic",
                    description: 'Interprets the list of counter symbols as digits to an alphabetic numbering system, similar to the default lower-alpha counter style, which wraps from "a", "b", "c", to "aa", "ab", "ac".',
                },
                {
                    name: "cyclic",
                    description: "Cycles repeatedly through its provided symbols, looping back to the beginning when it reaches the end of the list.",
                },
                {
                    name: "extends",
                    description: "Use the algorithm of another counter style, but alter other aspects.",
                },
                {
                    name: "fixed",
                    description: "Runs through its list of counter symbols once, then falls back.",
                },
                {
                    name: "numeric",
                    description: "interprets the list of counter symbols as digits to a \"place-value\" numbering system, similar to the default 'decimal' counter style.",
                },
                {
                    name: "symbolic",
                    description: "Cycles repeatedly through its provided symbols, doubling, tripling, etc. the symbols on each successive pass through the list.",
                },
            ],
            atRule: "@counter-style",
            syntax: "cyclic | numeric | alphabetic | symbolic | additive | [ fixed <integer>? ] | [ extends <counter-style-name> ]",
            relevance: 50,
            description: "@counter-style descriptor. Specifies which algorithm will be used to construct the counter's representation based on the counter value.",
            restrictions: ["enum", "integer"],
        },
        {
            name: "symbols",
            browsers: ["FF33"],
            atRule: "@counter-style",
            syntax: "<symbol>+",
            relevance: 50,
            description: "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor.",
            restrictions: ["image", "string", "identifier"],
        },
        {
            name: "table-layout",
            browsers: ["E12", "FF1", "S1", "C14", "IE5", "O7"],
            values: [
                {
                    name: "auto",
                    description: "Use any automatic table layout algorithm.",
                },
                {
                    name: "fixed",
                    description: "Use the fixed table layout algorithm.",
                },
            ],
            syntax: "auto | fixed",
            relevance: 59,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/table-layout",
                },
            ],
            description: "Controls the algorithm used to lay out the table cells, rows, and columns.",
            restrictions: ["enum"],
        },
        {
            name: "tab-size",
            browsers: ["E79", "FF91", "S7", "C21", "O15"],
            syntax: "<integer> | <length>",
            relevance: 53,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/tab-size",
                },
            ],
            description: "Determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
            restrictions: ["integer", "length"],
        },
        {
            name: "text-align",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "center",
                    description: "The inline contents are centered within the line box.",
                },
                {
                    name: "end",
                    browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
                    description: "The inline contents are aligned to the end edge of the line box.",
                },
                {
                    name: "justify",
                    description: "The text is justified according to the method specified by the 'text-justify' property.",
                },
                {
                    name: "left",
                    description: "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text.",
                },
                {
                    name: "right",
                    description: "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text.",
                },
                {
                    name: "start",
                    browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
                    description: "The inline contents are aligned to the start edge of the line box.",
                },
            ],
            syntax: "start | end | left | right | center | justify | match-parent",
            relevance: 93,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-align",
                },
            ],
            description: "Describes how inline contents of a block are horizontally aligned if the contents do not completely fill the line box.",
            restrictions: ["string"],
        },
        {
            name: "text-align-last",
            browsers: ["E12", "FF49", "S16", "C47", "IE5.5", "O34"],
            values: [
                {
                    name: "auto",
                    description: "Content on the affected line is aligned per 'text-align' unless 'text-align' is set to 'justify', in which case it is 'start-aligned'.",
                },
                {
                    name: "center",
                    description: "The inline contents are centered within the line box.",
                },
                {
                    name: "justify",
                    description: "The text is justified according to the method specified by the 'text-justify' property.",
                },
                {
                    name: "left",
                    description: "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text.",
                },
                {
                    name: "right",
                    description: "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text.",
                },
            ],
            syntax: "auto | start | end | left | right | center | justify",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-align-last",
                },
            ],
            description: "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            restrictions: ["enum"],
        },
        {
            name: "text-anchor",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "end",
                    description: "The rendered characters are aligned such that the end of the resulting rendered text is at the initial current text position.",
                },
                {
                    name: "middle",
                    description: "The rendered characters are aligned such that the geometric middle of the resulting rendered text is at the initial current text position.",
                },
                {
                    name: "start",
                    description: "The rendered characters are aligned such that the start of the resulting rendered text is at the initial current text position.",
                },
            ],
            syntax: "start | middle | end",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-anchor",
                },
            ],
            description: "Used to align (start-, middle- or end-alignment) a string of text relative to a given point.",
            restrictions: ["enum"],
        },
        {
            name: "text-decoration",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [
                {
                    name: "dashed",
                    description: "Produces a dashed line style.",
                },
                {
                    name: "dotted",
                    description: "Produces a dotted line.",
                },
                {
                    name: "double",
                    description: "Produces a double line.",
                },
                {
                    name: "line-through",
                    description: "Each line of text has a line through the middle.",
                },
                {
                    name: "none",
                    description: "Produces no line.",
                },
                {
                    name: "overline",
                    description: "Each line of text has a line above it.",
                },
                {
                    name: "solid",
                    description: "Produces a solid line.",
                },
                {
                    name: "underline",
                    description: "Each line of text is underlined.",
                },
                {
                    name: "wavy",
                    description: "Produces a wavy line.",
                },
            ],
            syntax: "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>",
            relevance: 91,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration",
                },
            ],
            description: "Decorations applied to font used for an element's text.",
            restrictions: ["enum", "color"],
        },
        {
            name: "text-decoration-color",
            browsers: ["E79", "FF36", "S12.1", "C57", "O44"],
            syntax: "<color>",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-color",
                },
            ],
            description: "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
            restrictions: ["color"],
        },
        {
            name: "text-decoration-line",
            browsers: ["E79", "FF36", "S12.1", "C57", "O44"],
            values: [
                {
                    name: "line-through",
                    description: "Each line of text has a line through the middle.",
                },
                {
                    name: "none",
                    description: "Neither produces nor inhibits text decoration.",
                },
                {
                    name: "overline",
                    description: "Each line of text has a line above it.",
                },
                {
                    name: "underline",
                    description: "Each line of text is underlined.",
                },
            ],
            syntax: "none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error",
            relevance: 58,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-line",
                },
            ],
            description: "Specifies what line decorations, if any, are added to the element.",
            restrictions: ["enum"],
        },
        {
            name: "text-decoration-style",
            browsers: ["E79", "FF36", "S12.1", "C57", "O44"],
            values: [
                {
                    name: "dashed",
                    description: "Produces a dashed line style.",
                },
                {
                    name: "dotted",
                    description: "Produces a dotted line.",
                },
                {
                    name: "double",
                    description: "Produces a double line.",
                },
                {
                    name: "none",
                    description: "Produces no line.",
                },
                {
                    name: "solid",
                    description: "Produces a solid line.",
                },
                {
                    name: "wavy",
                    description: "Produces a wavy line.",
                },
            ],
            syntax: "solid | double | dotted | dashed | wavy",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-style",
                },
            ],
            description: "Specifies the line style for underline, line-through and overline text decoration.",
            restrictions: ["enum"],
        },
        {
            name: "text-indent",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            values: [],
            syntax: "<length-percentage> && hanging? && each-line?",
            relevance: 67,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-indent",
                },
            ],
            description: "Specifies the indentation applied to lines of inline content in a block. The indentation only affects the first line of inline content in the block unless the 'hanging' keyword is specified, in which case it affects all lines except the first.",
            restrictions: ["percentage", "length"],
        },
        {
            name: "text-justify",
            browsers: ["E79", "FF55", "C32", "IE11", "O19"],
            values: [
                {
                    name: "auto",
                    description: "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality.",
                },
                {
                    name: "distribute",
                    description: "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property.",
                },
                {
                    name: "distribute-all-lines",
                },
                {
                    name: "inter-cluster",
                    description: "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai.",
                },
                {
                    name: "inter-ideograph",
                    description: "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages.",
                },
                {
                    name: "inter-word",
                    description: "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean.",
                },
                {
                    name: "kashida",
                    description: "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation.",
                },
                {
                    name: "newspaper",
                },
            ],
            syntax: "auto | inter-character | inter-word | none",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-justify",
                },
            ],
            description: "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
            restrictions: ["enum"],
        },
        {
            name: "text-orientation",
            browsers: ["E79", "FF41", "S14", "C48", "O35"],
            values: [
                {
                    name: "sideways",
                    browsers: ["E79", "FF41", "S14", "C48", "O35"],
                    description: "This value is equivalent to 'sideways-right' in 'vertical-rl' writing mode and equivalent to 'sideways-left' in 'vertical-lr' writing mode.",
                },
                {
                    name: "sideways-right",
                    browsers: ["E79", "FF41", "S14", "C48", "O35"],
                    description: "In vertical writing modes, this causes text to be set as if in a horizontal layout, but rotated 90° clockwise.",
                },
                {
                    name: "upright",
                    description: "In vertical writing modes, characters from horizontal-only scripts are rendered upright, i.e. in their standard horizontal orientation.",
                },
            ],
            syntax: "mixed | upright | sideways",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-orientation",
                },
            ],
            description: "Specifies the orientation of text within a line.",
            restrictions: ["enum"],
        },
        {
            name: "text-overflow",
            browsers: ["E12", "FF7", "S1.3", "C1", "IE6", "O11"],
            values: [
                {
                    name: "clip",
                    description: "Clip inline content that overflows. Characters may be only partially rendered.",
                },
                {
                    name: "ellipsis",
                    description: "Render an ellipsis character (U+2026) to represent clipped inline content.",
                },
            ],
            syntax: "[ clip | ellipsis | <string> ]{1,2}",
            relevance: 81,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-overflow",
                },
            ],
            description: "Text can overflow for example when it is prevented from wrapping.",
            restrictions: ["enum", "string"],
        },
        {
            name: "text-rendering",
            browsers: ["E79", "FF1", "S5", "C4", "O15"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "geometricPrecision",
                    description: "Indicates that the user agent shall emphasize geometric precision over legibility and rendering speed.",
                },
                {
                    name: "optimizeLegibility",
                    description: "Indicates that the user agent shall emphasize legibility over rendering speed and geometric precision.",
                },
                {
                    name: "optimizeSpeed",
                    description: "Indicates that the user agent shall emphasize rendering speed over legibility and geometric precision.",
                },
            ],
            syntax: "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
            relevance: 67,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-rendering",
                },
            ],
            description: "The creator of SVG content might want to provide a hint to the implementation about what tradeoffs to make as it renders text. The 'text-rendering' property provides these hints.",
            restrictions: ["enum"],
        },
        {
            name: "text-shadow",
            browsers: ["E12", "FF3.5", "S1.1", "C2", "IE10", "O9.5"],
            values: [
                {
                    name: "none",
                    description: "No shadow.",
                },
            ],
            syntax: "none | <shadow-t>#",
            relevance: 71,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-shadow",
                },
            ],
            description: "Enables shadow effects to be applied to the text of the element.",
            restrictions: ["length", "color"],
        },
        {
            name: "text-transform",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O7"],
            values: [
                {
                    name: "capitalize",
                    description: "Puts the first typographic letter unit of each word in titlecase.",
                },
                {
                    name: "lowercase",
                    description: "Puts all letters in lowercase.",
                },
                {
                    name: "none",
                    description: "No effects.",
                },
                {
                    name: "uppercase",
                    description: "Puts all letters in uppercase.",
                },
            ],
            syntax: "none | capitalize | uppercase | lowercase | full-width | full-size-kana",
            relevance: 85,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-transform",
                },
            ],
            description: "Controls capitalization effects of an element's text.",
            restrictions: ["enum"],
        },
        {
            name: "text-underline-position",
            browsers: ["E12", "FF74", "S12.1", "C33", "IE6", "O20"],
            values: [
                {
                    name: "above",
                },
                {
                    name: "auto",
                    description: "The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over.",
                },
                {
                    name: "below",
                    description: "The underline is aligned with the under edge of the element's content box.",
                },
            ],
            syntax: "auto | from-font | [ under || [ left | right ] ]",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-underline-position",
                },
            ],
            description: "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements. This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
            restrictions: ["enum"],
        },
        {
            name: "top",
            browsers: ["E12", "FF1", "S1", "C1", "IE5", "O6"],
            values: [
                {
                    name: "auto",
                    description: "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well",
                },
            ],
            syntax: "<length> | <percentage> | auto",
            relevance: 95,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/top",
                },
            ],
            description: "Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's 'containing block'.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "touch-action",
            browsers: ["E12", "FF52", "S13", "C36", "IE11", "O23"],
            values: [
                {
                    name: "auto",
                    description: "The user agent may determine any permitted touch behaviors for touches that begin on the element.",
                },
                {
                    name: "cross-slide-x",
                    browsers: ["E12", "FF52", "S13", "C36", "IE11", "O23"],
                },
                {
                    name: "cross-slide-y",
                    browsers: ["E12", "FF52", "S13", "C36", "IE11", "O23"],
                },
                {
                    name: "double-tap-zoom",
                    browsers: ["E12", "FF52", "S13", "C36", "IE11", "O23"],
                },
                {
                    name: "manipulation",
                    description: "The user agent may consider touches that begin on the element only for the purposes of scrolling and continuous zooming.",
                },
                {
                    name: "none",
                    description: "Touches that begin on the element must not trigger default touch behaviors.",
                },
                {
                    name: "pan-x",
                    description: "The user agent may consider touches that begin on the element only for the purposes of horizontally scrolling the element's nearest ancestor with horizontally scrollable content.",
                },
                {
                    name: "pan-y",
                    description: "The user agent may consider touches that begin on the element only for the purposes of vertically scrolling the element's nearest ancestor with vertically scrollable content.",
                },
                {
                    name: "pinch-zoom",
                    browsers: ["E12", "FF52", "S13", "C36", "IE11", "O23"],
                },
            ],
            syntax: "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
            relevance: 69,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/touch-action",
                },
            ],
            description: "Determines whether touch input may trigger default behavior supplied by user agent.",
            restrictions: ["enum"],
        },
        {
            name: "transform",
            browsers: ["E12", "FF16", "S9", "C36", "IE10", "O23"],
            values: [
                {
                    name: "matrix()",
                    description: "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]",
                },
                {
                    name: "matrix3d()",
                    description: "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order.",
                },
                {
                    name: "none",
                },
                {
                    name: "perspective()",
                    description: "Specifies a perspective projection matrix.",
                },
                {
                    name: "rotate()",
                    description: "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property.",
                },
                {
                    name: "rotate3d()",
                    description: "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters.",
                },
                {
                    name: "rotateX('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the X axis.",
                },
                {
                    name: "rotateY('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Y axis.",
                },
                {
                    name: "rotateZ('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Z axis.",
                },
                {
                    name: "scale()",
                    description: "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first.",
                },
                {
                    name: "scale3d()",
                    description: "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters.",
                },
                {
                    name: "scaleX()",
                    description: "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter.",
                },
                {
                    name: "scaleY()",
                    description: "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter.",
                },
                {
                    name: "scaleZ()",
                    description: "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter.",
                },
                {
                    name: "skew()",
                    description: "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis).",
                },
                {
                    name: "skewX()",
                    description: "Specifies a skew transformation along the X axis by the given angle.",
                },
                {
                    name: "skewY()",
                    description: "Specifies a skew transformation along the Y axis by the given angle.",
                },
                {
                    name: "translate()",
                    description: "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter.",
                },
                {
                    name: "translate3d()",
                    description: "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively.",
                },
                {
                    name: "translateX()",
                    description: "Specifies a translation by the given amount in the X direction.",
                },
                {
                    name: "translateY()",
                    description: "Specifies a translation by the given amount in the Y direction.",
                },
                {
                    name: "translateZ()",
                    description: "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0.",
                },
            ],
            syntax: "none | <transform-list>",
            relevance: 91,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transform",
                },
            ],
            description: "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            restrictions: ["enum"],
        },
        {
            name: "transform-origin",
            browsers: ["E12", "FF16", "S9", "C36", "IE10", "O23"],
            syntax: "[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?",
            relevance: 75,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transform-origin",
                },
            ],
            description: "Establishes the origin of transformation for an element.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "transform-style",
            browsers: ["E12", "FF16", "S9", "C36", "O23"],
            values: [
                {
                    name: "flat",
                    description: "All children of this element are rendered flattened into the 2D plane of the element.",
                },
                {
                    name: "preserve-3d",
                    browsers: ["E12", "FF16", "S9", "C36", "O23"],
                    description: "Flattening is not performed, so children maintain their position in 3D space.",
                },
            ],
            syntax: "flat | preserve-3d",
            relevance: 55,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transform-style",
                },
            ],
            description: "Defines how nested elements are rendered in 3D space.",
            restrictions: ["enum"],
        },
        {
            name: "transition",
            browsers: ["E12", "FF16", "S9", "C26", "IE10", "O12.1"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            syntax: "<single-transition>#",
            relevance: 89,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transition",
                },
            ],
            description: "Shorthand property combines four of the transition properties into a single property.",
            restrictions: ["time", "property", "timing-function", "enum"],
        },
        {
            name: "transition-delay",
            browsers: ["E12", "FF16", "S9", "C26", "IE10", "O12.1"],
            syntax: "<time>#",
            relevance: 64,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transition-delay",
                },
            ],
            description: "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            restrictions: ["time"],
        },
        {
            name: "transition-duration",
            browsers: ["E12", "FF16", "S9", "C26", "IE10", "O12.1"],
            syntax: "<time>#",
            relevance: 69,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transition-duration",
                },
            ],
            description: "Specifies how long the transition from the old value to the new value should take.",
            restrictions: ["time"],
        },
        {
            name: "transition-property",
            browsers: ["E12", "FF16", "S9", "C26", "IE10", "O12.1"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            syntax: "none | <single-transition-property>#",
            relevance: 68,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transition-property",
                },
            ],
            description: "Specifies the name of the CSS property to which the transition is applied.",
            restrictions: ["property"],
        },
        {
            name: "transition-timing-function",
            browsers: ["E12", "FF16", "S9", "C26", "IE10", "O12.1"],
            syntax: "<easing-function>#",
            relevance: 67,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transition-timing-function",
                },
            ],
            description: "Describes how the intermediate values used during a transition will be calculated.",
            restrictions: ["timing-function"],
        },
        {
            name: "unicode-bidi",
            browsers: ["E12", "FF1", "S1.3", "C2", "IE5.5", "O9.2"],
            values: [
                {
                    name: "bidi-override",
                    description: "Inside the element, reordering is strictly in sequence according to the 'direction' property; the implicit part of the bidirectional algorithm is ignored.",
                },
                {
                    name: "embed",
                    description: "If the element is inline-level, this value opens an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the 'direction' property.",
                },
                {
                    name: "isolate",
                    browsers: ["E12", "FF1", "S1.3", "C2", "IE5.5", "O9.2"],
                    description: "The contents of the element are considered to be inside a separate, independent paragraph.",
                },
                {
                    name: "isolate-override",
                    browsers: ["E12", "FF1", "S1.3", "C2", "IE5.5", "O9.2"],
                    description: "This combines the isolation behavior of 'isolate' with the directional override behavior of 'bidi-override'",
                },
                {
                    name: "normal",
                    description: "The element does not open an additional level of embedding with respect to the bidirectional algorithm. For inline-level elements, implicit reordering works across element boundaries.",
                },
                {
                    name: "plaintext",
                    browsers: ["E12", "FF1", "S1.3", "C2", "IE5.5", "O9.2"],
                    description: "For the purposes of the Unicode bidirectional algorithm, the base directionality of each bidi paragraph for which the element forms the containing block is determined not by the element's computed 'direction'.",
                },
            ],
            syntax: "normal | embed | isolate | bidi-override | isolate-override | plaintext",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/unicode-bidi",
                },
            ],
            description: "The level of embedding with respect to the bidirectional algorithm.",
            restrictions: ["enum"],
        },
        {
            name: "unicode-range",
            values: [
                {
                    name: "U+26",
                    description: "Ampersand.",
                },
                {
                    name: "U+20-24F, U+2B0-2FF, U+370-4FF, U+1E00-1EFF, U+2000-20CF, U+2100-23FF, U+2500-26FF, U+E000-F8FF, U+FB00-FB4F",
                    description: "WGL4 character set (Pan-European).",
                },
                {
                    name: "U+20-17F, U+2B0-2FF, U+2000-206F, U+20A0-20CF, U+2100-21FF, U+2600-26FF",
                    description: "The Multilingual European Subset No. 1. Latin. Covers ~44 languages.",
                },
                {
                    name: "U+20-2FF, U+370-4FF, U+1E00-20CF, U+2100-23FF, U+2500-26FF, U+FB00-FB4F, U+FFF0-FFFD",
                    description: "The Multilingual European Subset No. 2. Latin, Greek, and Cyrillic. Covers ~128 language.",
                },
                {
                    name: "U+20-4FF, U+530-58F, U+10D0-10FF, U+1E00-23FF, U+2440-245F, U+2500-26FF, U+FB00-FB4F, U+FE20-FE2F, U+FFF0-FFFD",
                    description: "The Multilingual European Subset No. 3. Covers all characters belonging to European scripts.",
                },
                {
                    name: "U+00-7F",
                    description: "Basic Latin (ASCII).",
                },
                {
                    name: "U+80-FF",
                    description: "Latin-1 Supplement. Accented characters for Western European languages, common punctuation characters, multiplication and division signs.",
                },
                {
                    name: "U+100-17F",
                    description: "Latin Extended-A. Accented characters for for Czech, Dutch, Polish, and Turkish.",
                },
                {
                    name: "U+180-24F",
                    description: "Latin Extended-B. Croatian, Slovenian, Romanian, Non-European and historic latin, Khoisan, Pinyin, Livonian, Sinology.",
                },
                {
                    name: "U+1E00-1EFF",
                    description: "Latin Extended Additional. Vietnamese, German captial sharp s, Medievalist, Latin general use.",
                },
                {
                    name: "U+250-2AF",
                    description: "International Phonetic Alphabet Extensions.",
                },
                {
                    name: "U+370-3FF",
                    description: "Greek and Coptic.",
                },
                {
                    name: "U+1F00-1FFF",
                    description: "Greek Extended. Accented characters for polytonic Greek.",
                },
                {
                    name: "U+400-4FF",
                    description: "Cyrillic.",
                },
                {
                    name: "U+500-52F",
                    description: "Cyrillic Supplement. Extra letters for Komi, Khanty, Chukchi, Mordvin, Kurdish, Aleut, Chuvash, Abkhaz, Azerbaijani, and Orok.",
                },
                {
                    name: "U+00-52F, U+1E00-1FFF, U+2200-22FF",
                    description: "Latin, Greek, Cyrillic, some punctuation and symbols.",
                },
                {
                    name: "U+530-58F",
                    description: "Armenian.",
                },
                {
                    name: "U+590-5FF",
                    description: "Hebrew.",
                },
                {
                    name: "U+600-6FF",
                    description: "Arabic.",
                },
                {
                    name: "U+750-77F",
                    description: "Arabic Supplement. Additional letters for African languages, Khowar, Torwali, Burushaski, and early Persian.",
                },
                {
                    name: "U+8A0-8FF",
                    description: "Arabic Extended-A. Additional letters for African languages, European and Central Asian languages, Rohingya, Tamazight, Arwi, and Koranic annotation signs.",
                },
                {
                    name: "U+700-74F",
                    description: "Syriac.",
                },
                {
                    name: "U+900-97F",
                    description: "Devanagari.",
                },
                {
                    name: "U+980-9FF",
                    description: "Bengali.",
                },
                {
                    name: "U+A00-A7F",
                    description: "Gurmukhi.",
                },
                {
                    name: "U+A80-AFF",
                    description: "Gujarati.",
                },
                {
                    name: "U+B00-B7F",
                    description: "Oriya.",
                },
                {
                    name: "U+B80-BFF",
                    description: "Tamil.",
                },
                {
                    name: "U+C00-C7F",
                    description: "Telugu.",
                },
                {
                    name: "U+C80-CFF",
                    description: "Kannada.",
                },
                {
                    name: "U+D00-D7F",
                    description: "Malayalam.",
                },
                {
                    name: "U+D80-DFF",
                    description: "Sinhala.",
                },
                {
                    name: "U+118A0-118FF",
                    description: "Warang Citi.",
                },
                {
                    name: "U+E00-E7F",
                    description: "Thai.",
                },
                {
                    name: "U+1A20-1AAF",
                    description: "Tai Tham.",
                },
                {
                    name: "U+AA80-AADF",
                    description: "Tai Viet.",
                },
                {
                    name: "U+E80-EFF",
                    description: "Lao.",
                },
                {
                    name: "U+F00-FFF",
                    description: "Tibetan.",
                },
                {
                    name: "U+1000-109F",
                    description: "Myanmar (Burmese).",
                },
                {
                    name: "U+10A0-10FF",
                    description: "Georgian.",
                },
                {
                    name: "U+1200-137F",
                    description: "Ethiopic.",
                },
                {
                    name: "U+1380-139F",
                    description: "Ethiopic Supplement. Extra Syllables for Sebatbeit, and Tonal marks",
                },
                {
                    name: "U+2D80-2DDF",
                    description: "Ethiopic Extended. Extra Syllables for Me'en, Blin, and Sebatbeit.",
                },
                {
                    name: "U+AB00-AB2F",
                    description: "Ethiopic Extended-A. Extra characters for Gamo-Gofa-Dawro, Basketo, and Gumuz.",
                },
                {
                    name: "U+1780-17FF",
                    description: "Khmer.",
                },
                {
                    name: "U+1800-18AF",
                    description: "Mongolian.",
                },
                {
                    name: "U+1B80-1BBF",
                    description: "Sundanese.",
                },
                {
                    name: "U+1CC0-1CCF",
                    description: "Sundanese Supplement. Punctuation.",
                },
                {
                    name: "U+4E00-9FD5",
                    description: "CJK (Chinese, Japanese, Korean) Unified Ideographs. Most common ideographs for modern Chinese and Japanese.",
                },
                {
                    name: "U+3400-4DB5",
                    description: "CJK Unified Ideographs Extension A. Rare ideographs.",
                },
                {
                    name: "U+2F00-2FDF",
                    description: "Kangxi Radicals.",
                },
                {
                    name: "U+2E80-2EFF",
                    description: "CJK Radicals Supplement. Alternative forms of Kangxi Radicals.",
                },
                {
                    name: "U+1100-11FF",
                    description: "Hangul Jamo.",
                },
                {
                    name: "U+AC00-D7AF",
                    description: "Hangul Syllables.",
                },
                {
                    name: "U+3040-309F",
                    description: "Hiragana.",
                },
                {
                    name: "U+30A0-30FF",
                    description: "Katakana.",
                },
                {
                    name: "U+A5, U+4E00-9FFF, U+30??, U+FF00-FF9F",
                    description: "Japanese Kanji, Hiragana and Katakana characters plus Yen/Yuan symbol.",
                },
                {
                    name: "U+A4D0-A4FF",
                    description: "Lisu.",
                },
                {
                    name: "U+A000-A48F",
                    description: "Yi Syllables.",
                },
                {
                    name: "U+A490-A4CF",
                    description: "Yi Radicals.",
                },
                {
                    name: "U+2000-206F",
                    description: "General Punctuation.",
                },
                {
                    name: "U+3000-303F",
                    description: "CJK Symbols and Punctuation.",
                },
                {
                    name: "U+2070-209F",
                    description: "Superscripts and Subscripts.",
                },
                {
                    name: "U+20A0-20CF",
                    description: "Currency Symbols.",
                },
                {
                    name: "U+2100-214F",
                    description: "Letterlike Symbols.",
                },
                {
                    name: "U+2150-218F",
                    description: "Number Forms.",
                },
                {
                    name: "U+2190-21FF",
                    description: "Arrows.",
                },
                {
                    name: "U+2200-22FF",
                    description: "Mathematical Operators.",
                },
                {
                    name: "U+2300-23FF",
                    description: "Miscellaneous Technical.",
                },
                {
                    name: "U+E000-F8FF",
                    description: "Private Use Area.",
                },
                {
                    name: "U+FB00-FB4F",
                    description: "Alphabetic Presentation Forms. Ligatures for latin, Armenian, and Hebrew.",
                },
                {
                    name: "U+FB50-FDFF",
                    description: "Arabic Presentation Forms-A. Contextual forms / ligatures for Persian, Urdu, Sindhi, Central Asian languages, etc, Arabic pedagogical symbols, word ligatures.",
                },
                {
                    name: "U+1F600-1F64F",
                    description: "Emoji: Emoticons.",
                },
                {
                    name: "U+2600-26FF",
                    description: "Emoji: Miscellaneous Symbols.",
                },
                {
                    name: "U+1F300-1F5FF",
                    description: "Emoji: Miscellaneous Symbols and Pictographs.",
                },
                {
                    name: "U+1F900-1F9FF",
                    description: "Emoji: Supplemental Symbols and Pictographs.",
                },
                {
                    name: "U+1F680-1F6FF",
                    description: "Emoji: Transport and Map Symbols.",
                },
            ],
            atRule: "@font-face",
            syntax: "<unicode-range>#",
            relevance: 72,
            description: "@font-face descriptor. Defines the set of Unicode codepoints that may be supported by the font face for which it is declared.",
            restrictions: ["unicode-range"],
        },
        {
            name: "user-select",
            browsers: ["E79", "FF69", "S3", "C54", "IE10", "O41"],
            values: [
                {
                    name: "all",
                    description: "The content of the element must be selected atomically",
                },
                {
                    name: "auto",
                },
                {
                    name: "contain",
                    description: "UAs must not allow a selection which is started in this element to be extended outside of this element.",
                },
                {
                    name: "none",
                    description: "The UA must not allow selections to be started in this element.",
                },
                {
                    name: "text",
                    description: "The element imposes no constraint on the selection.",
                },
            ],
            syntax: "auto | text | none | contain | all",
            relevance: 82,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/user-select",
                },
            ],
            description: "Controls the appearance of selection.",
            restrictions: ["enum"],
        },
        {
            name: "vertical-align",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
            values: [
                {
                    name: "auto",
                    description: "Align the dominant baseline of the parent box with the equivalent, or heuristically reconstructed, baseline of the element inline box.",
                },
                {
                    name: "baseline",
                    description: "Align the 'alphabetic' baseline of the element with the 'alphabetic' baseline of the parent element.",
                },
                {
                    name: "bottom",
                    description: "Align the after edge of the extended inline box with the after-edge of the line box.",
                },
                {
                    name: "middle",
                    description: "Align the 'middle' baseline of the inline element with the middle baseline of the parent.",
                },
                {
                    name: "sub",
                    description: "Lower the baseline of the box to the proper position for subscripts of the parent's box. (This value has no effect on the font size of the element's text.)",
                },
                {
                    name: "super",
                    description: "Raise the baseline of the box to the proper position for superscripts of the parent's box. (This value has no effect on the font size of the element's text.)",
                },
                {
                    name: "text-bottom",
                    description: "Align the bottom of the box with the after-edge of the parent element's font.",
                },
                {
                    name: "text-top",
                    description: "Align the top of the box with the before-edge of the parent element's font.",
                },
                {
                    name: "top",
                    description: "Align the before edge of the extended inline box with the before-edge of the line box.",
                },
                {
                    name: "-webkit-baseline-middle",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
                },
            ],
            syntax: "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
            relevance: 90,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/vertical-align",
                },
            ],
            description: "Affects the vertical positioning of the inline boxes generated by an inline-level element inside a line box.",
            restrictions: ["percentage", "length"],
        },
        {
            name: "visibility",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
            values: [
                {
                    name: "collapse",
                    description: "Table-specific. If used on elements other than rows, row groups, columns, or column groups, 'collapse' has the same meaning as 'hidden'.",
                },
                {
                    name: "hidden",
                    description: "The generated box is invisible (fully transparent, nothing is drawn), but still affects layout.",
                },
                {
                    name: "visible",
                    description: "The generated box is visible.",
                },
            ],
            syntax: "visible | hidden | collapse",
            relevance: 87,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/visibility",
                },
            ],
            description: "Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the 'display' property to 'none' to suppress box generation altogether).",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-animation",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "backwards",
                    description: "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",
                },
                {
                    name: "both",
                    description: "Both forwards and backwards fill modes are applied.",
                },
                {
                    name: "forwards",
                    description: "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",
                },
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
                {
                    name: "none",
                    description: "No animation is performed",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            relevance: 50,
            description: "Shorthand property combines six of the animation properties into a single property.",
            restrictions: ["time", "enum", "timing-function", "identifier", "number"],
        },
        {
            name: "-webkit-animation-delay",
            browsers: ["C", "S5"],
            relevance: 50,
            description: "Defines when the animation will start.",
            restrictions: ["time"],
        },
        {
            name: "-webkit-animation-direction",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "alternate",
                    description: "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                },
                {
                    name: "alternate-reverse",
                    description: "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                },
                {
                    name: "normal",
                    description: "Normal playback.",
                },
                {
                    name: "reverse",
                    description: "All iterations of the animation are played in the reverse direction from the way they were specified.",
                },
            ],
            relevance: 50,
            description: "Defines whether or not the animation should play in reverse on alternate cycles.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-animation-duration",
            browsers: ["C", "S5"],
            relevance: 50,
            description: "Defines the length of time that an animation takes to complete one cycle.",
            restrictions: ["time"],
        },
        {
            name: "-webkit-animation-fill-mode",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "backwards",
                    description: "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",
                },
                {
                    name: "both",
                    description: "Both forwards and backwards fill modes are applied.",
                },
                {
                    name: "forwards",
                    description: "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",
                },
                {
                    name: "none",
                    description: "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes.",
                },
            ],
            relevance: 50,
            description: "Defines what values are applied by the animation outside the time it is executing.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-animation-iteration-count",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "infinite",
                    description: "Causes the animation to repeat forever.",
                },
            ],
            relevance: 50,
            description: "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            restrictions: ["number", "enum"],
        },
        {
            name: "-webkit-animation-name",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "none",
                    description: "No animation is performed",
                },
            ],
            relevance: 50,
            description: "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            restrictions: ["identifier", "enum"],
        },
        {
            name: "-webkit-animation-play-state",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "paused",
                    description: "A running animation will be paused.",
                },
                {
                    name: "running",
                    description: "Resume playback of a paused animation.",
                },
            ],
            relevance: 50,
            description: "Defines whether the animation is running or paused.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-animation-timing-function",
            browsers: ["C", "S5"],
            relevance: 50,
            description: "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            restrictions: ["timing-function"],
        },
        {
            name: "-webkit-appearance",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "button",
                },
                {
                    name: "button-bevel",
                },
                {
                    name: "caps-lock-indicator",
                },
                {
                    name: "caret",
                },
                {
                    name: "checkbox",
                },
                {
                    name: "default-button",
                },
                {
                    name: "listbox",
                },
                {
                    name: "listitem",
                },
                {
                    name: "media-fullscreen-button",
                },
                {
                    name: "media-mute-button",
                },
                {
                    name: "media-play-button",
                },
                {
                    name: "media-seek-back-button",
                },
                {
                    name: "media-seek-forward-button",
                },
                {
                    name: "media-slider",
                },
                {
                    name: "media-sliderthumb",
                },
                {
                    name: "menulist",
                },
                {
                    name: "menulist-button",
                },
                {
                    name: "menulist-text",
                },
                {
                    name: "menulist-textfield",
                },
                {
                    name: "none",
                },
                {
                    name: "push-button",
                },
                {
                    name: "radio",
                },
                {
                    name: "scrollbarbutton-down",
                },
                {
                    name: "scrollbarbutton-left",
                },
                {
                    name: "scrollbarbutton-right",
                },
                {
                    name: "scrollbarbutton-up",
                },
                {
                    name: "scrollbargripper-horizontal",
                },
                {
                    name: "scrollbargripper-vertical",
                },
                {
                    name: "scrollbarthumb-horizontal",
                },
                {
                    name: "scrollbarthumb-vertical",
                },
                {
                    name: "scrollbartrack-horizontal",
                },
                {
                    name: "scrollbartrack-vertical",
                },
                {
                    name: "searchfield",
                },
                {
                    name: "searchfield-cancel-button",
                },
                {
                    name: "searchfield-decoration",
                },
                {
                    name: "searchfield-results-button",
                },
                {
                    name: "searchfield-results-decoration",
                },
                {
                    name: "slider-horizontal",
                },
                {
                    name: "sliderthumb-horizontal",
                },
                {
                    name: "sliderthumb-vertical",
                },
                {
                    name: "slider-vertical",
                },
                {
                    name: "square-button",
                },
                {
                    name: "textarea",
                },
                {
                    name: "textfield",
                },
            ],
            status: "nonstandard",
            syntax: "none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button",
            relevance: 0,
            description: "Changes the appearance of buttons and other controls to resemble native controls.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-backdrop-filter",
            browsers: ["S9"],
            values: [
                {
                    name: "none",
                    description: "No filter effects are applied.",
                },
                {
                    name: "blur()",
                    description: "Applies a Gaussian blur to the input image.",
                },
                {
                    name: "brightness()",
                    description: "Applies a linear multiplier to input image, making it appear more or less bright.",
                },
                {
                    name: "contrast()",
                    description: "Adjusts the contrast of the input.",
                },
                {
                    name: "drop-shadow()",
                    description: "Applies a drop shadow effect to the input image.",
                },
                {
                    name: "grayscale()",
                    description: "Converts the input image to grayscale.",
                },
                {
                    name: "hue-rotate()",
                    description: "Applies a hue rotation on the input image. ",
                },
                {
                    name: "invert()",
                    description: "Inverts the samples in the input image.",
                },
                {
                    name: "opacity()",
                    description: "Applies transparency to the samples in the input image.",
                },
                {
                    name: "saturate()",
                    description: "Saturates the input image.",
                },
                {
                    name: "sepia()",
                    description: "Converts the input image to sepia.",
                },
                {
                    name: "url()",
                    description: "A filter reference to a <filter> element.",
                },
            ],
            relevance: 50,
            description: "Applies a filter effect where the first filter in the list takes the element's background image as the input image.",
            restrictions: ["enum", "url"],
        },
        {
            name: "-webkit-backface-visibility",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "hidden",
                },
                {
                    name: "visible",
                },
            ],
            relevance: 50,
            description: "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-background-clip",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "Determines the background painting area.",
            restrictions: ["box"],
        },
        {
            name: "-webkit-background-composite",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "border",
                },
                {
                    name: "padding",
                },
            ],
            relevance: 50,
            restrictions: ["enum"],
        },
        {
            name: "-webkit-background-origin",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            restrictions: ["box"],
        },
        {
            name: "-webkit-border-image",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "auto",
                    description: "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead.",
                },
                {
                    name: "fill",
                    description: "Causes the middle part of the border-image to be preserved.",
                },
                {
                    name: "none",
                },
                {
                    name: "repeat",
                    description: "The image is tiled (repeated) to fill the area.",
                },
                {
                    name: "round",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.",
                },
                {
                    name: "space",
                    description: "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.",
                },
                {
                    name: "stretch",
                    description: "The image is stretched to fill the area.",
                },
                {
                    name: "url()",
                },
            ],
            relevance: 50,
            description: "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            restrictions: ["length", "percentage", "number", "url", "enum"],
        },
        {
            name: "-webkit-box-align",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "baseline",
                    description: "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used.",
                },
                {
                    name: "center",
                    description: "Any extra space is divided evenly, with half placed above the child and the other half placed after the child.",
                },
                {
                    name: "end",
                    description: "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element.",
                },
                {
                    name: "start",
                    description: "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element.",
                },
                {
                    name: "stretch",
                    description: "The height of each child is adjusted to that of the containing block.",
                },
            ],
            relevance: 50,
            description: "Specifies the alignment of nested elements within an outer flexible box element.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-box-direction",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "normal",
                    description: "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom.",
                },
                {
                    name: "reverse",
                    description: "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top.",
                },
            ],
            relevance: 50,
            description: "In webkit applications, -webkit-box-direction specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-box-flex",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "Specifies an element's flexibility.",
            restrictions: ["number"],
        },
        {
            name: "-webkit-box-flex-group",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
            restrictions: ["integer"],
        },
        {
            name: "-webkit-box-ordinal-group",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
            restrictions: ["integer"],
        },
        {
            name: "-webkit-box-orient",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "block-axis",
                    description: "Elements are oriented along the box's axis.",
                },
                {
                    name: "horizontal",
                    description: "The box displays its children from left to right in a horizontal line.",
                },
                {
                    name: "inline-axis",
                    description: "Elements are oriented vertically.",
                },
                {
                    name: "vertical",
                    description: "The box displays its children from stacked from top to bottom vertically.",
                },
            ],
            relevance: 50,
            description: "In webkit applications, -webkit-box-orient specifies whether a box lays out its contents horizontally or vertically.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-box-pack",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "center",
                    description: "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child.",
                },
                {
                    name: "end",
                    description: "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child.",
                },
                {
                    name: "justify",
                    description: "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start.",
                },
                {
                    name: "start",
                    description: "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child.",
                },
            ],
            relevance: 50,
            description: "Specifies alignment of child elements within the current element in the direction of orientation.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-box-reflect",
            browsers: ["E79", "S4", "C4", "O15"],
            values: [
                {
                    name: "above",
                    description: "The reflection appears above the border box.",
                },
                {
                    name: "below",
                    description: "The reflection appears below the border box.",
                },
                {
                    name: "left",
                    description: "The reflection appears to the left of the border box.",
                },
                {
                    name: "right",
                    description: "The reflection appears to the right of the border box.",
                },
            ],
            status: "nonstandard",
            syntax: "[ above | below | right | left ]? <length>? <image>?",
            relevance: 0,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-box-reflect",
                },
            ],
            description: "Defines a reflection of a border box.",
        },
        {
            name: "-webkit-box-sizing",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "border-box",
                    description: "The specified width and height (and respective min/max properties) on this element determine the border box of the element.",
                },
                {
                    name: "content-box",
                    description: "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element.",
                },
            ],
            relevance: 50,
            description: "Box Model addition in CSS3.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-break-after",
            browsers: ["S7"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break before/after the generated box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break before/after the generated box.",
                },
                {
                    name: "avoid-region",
                },
                {
                    name: "column",
                    description: "Always force a column break before/after the generated box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "page",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "region",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.",
                },
            ],
            relevance: 50,
            description: "Describes the page/column break behavior before the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-break-before",
            browsers: ["S7"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break before/after the generated box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break before/after the generated box.",
                },
                {
                    name: "avoid-region",
                },
                {
                    name: "column",
                    description: "Always force a column break before/after the generated box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "page",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "region",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.",
                },
            ],
            relevance: 50,
            description: "Describes the page/column break behavior before the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-break-inside",
            browsers: ["S7"],
            values: [
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break inside the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page/column break inside the generated box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break inside the generated box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break inside the generated box.",
                },
                {
                    name: "avoid-region",
                },
            ],
            relevance: 50,
            description: "Describes the page/column break behavior inside the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-column-break-after",
            browsers: ["E80", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break before/after the generated box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break before/after the generated box.",
                },
                {
                    name: "avoid-region",
                },
                {
                    name: "column",
                    description: "Always force a column break before/after the generated box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "page",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "region",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.",
                },
            ],
            relevance: 50,
            description: "Describes the page/column break behavior before the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-column-break-before",
            browsers: ["E80", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "always",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page/column break before/after the generated box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break before/after the generated box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break before/after the generated box.",
                },
                {
                    name: "avoid-region",
                },
                {
                    name: "column",
                    description: "Always force a column break before/after the generated box.",
                },
                {
                    name: "left",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.",
                },
                {
                    name: "page",
                    description: "Always force a page break before/after the generated box.",
                },
                {
                    name: "region",
                },
                {
                    name: "right",
                    description: "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.",
                },
            ],
            relevance: 50,
            description: "Describes the page/column break behavior before the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-column-break-inside",
            browsers: ["E80", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "auto",
                    description: "Neither force nor forbid a page/column break inside the generated box.",
                },
                {
                    name: "avoid",
                    description: "Avoid a page/column break inside the generated box.",
                },
                {
                    name: "avoid-column",
                    description: "Avoid a column break inside the generated box.",
                },
                {
                    name: "avoid-page",
                    description: "Avoid a page break inside the generated box.",
                },
                {
                    name: "avoid-region",
                },
            ],
            relevance: 50,
            description: "Describes the page/column break behavior inside the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-column-count",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "auto",
                    description: "Determines the number of columns by the 'column-width' property and the element width.",
                },
            ],
            relevance: 50,
            description: "Describes the optimal number of columns into which the content of the element will be flowed.",
            restrictions: ["integer"],
        },
        {
            name: "-webkit-column-gap",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "normal",
                    description: "User agent specific and typically equivalent to 1em.",
                },
            ],
            relevance: 50,
            description: "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            restrictions: ["length"],
        },
        {
            name: "-webkit-column-rule",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "This property is a shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            restrictions: ["length", "line-width", "line-style", "color"],
        },
        {
            name: "-webkit-column-rule-color",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "Sets the color of the column rule",
            restrictions: ["color"],
        },
        {
            name: "-webkit-column-rule-style",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "Sets the style of the rule between columns of an element.",
            restrictions: ["line-style"],
        },
        {
            name: "-webkit-column-rule-width",
            browsers: ["C", "S3"],
            relevance: 50,
            description: "Sets the width of the rule between columns. Negative values are not allowed.",
            restrictions: ["length", "line-width"],
        },
        {
            name: "-webkit-columns",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "auto",
                    description: "The width depends on the values of other properties.",
                },
            ],
            relevance: 50,
            description: "A shorthand property which sets both 'column-width' and 'column-count'.",
            restrictions: ["length", "integer"],
        },
        {
            name: "-webkit-column-span",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "all",
                    description: "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear.",
                },
                {
                    name: "none",
                    description: "The element does not span multiple columns.",
                },
            ],
            relevance: 50,
            description: "Describes the page/column break behavior after the generated box.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-column-width",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "auto",
                    description: "The width depends on the values of other properties.",
                },
            ],
            relevance: 50,
            description: "This property describes the width of columns in multicol elements.",
            restrictions: ["length"],
        },
        {
            name: "-webkit-filter",
            browsers: ["C18", "O15", "S6"],
            values: [
                {
                    name: "none",
                    description: "No filter effects are applied.",
                },
                {
                    name: "blur()",
                    description: "Applies a Gaussian blur to the input image.",
                },
                {
                    name: "brightness()",
                    description: "Applies a linear multiplier to input image, making it appear more or less bright.",
                },
                {
                    name: "contrast()",
                    description: "Adjusts the contrast of the input.",
                },
                {
                    name: "drop-shadow()",
                    description: "Applies a drop shadow effect to the input image.",
                },
                {
                    name: "grayscale()",
                    description: "Converts the input image to grayscale.",
                },
                {
                    name: "hue-rotate()",
                    description: "Applies a hue rotation on the input image. ",
                },
                {
                    name: "invert()",
                    description: "Inverts the samples in the input image.",
                },
                {
                    name: "opacity()",
                    description: "Applies transparency to the samples in the input image.",
                },
                {
                    name: "saturate()",
                    description: "Saturates the input image.",
                },
                {
                    name: "sepia()",
                    description: "Converts the input image to sepia.",
                },
                {
                    name: "url()",
                    description: "A filter reference to a <filter> element.",
                },
            ],
            relevance: 50,
            description: "Processes an element's rendering before it is displayed in the document, by applying one or more filter effects.",
            restrictions: ["enum", "url"],
        },
        {
            name: "-webkit-flow-from",
            browsers: ["S6.1"],
            values: [
                {
                    name: "none",
                    description: "The block container is not a CSS Region.",
                },
            ],
            relevance: 50,
            description: "Makes a block container a region and associates it with a named flow.",
            restrictions: ["identifier"],
        },
        {
            name: "-webkit-flow-into",
            browsers: ["S6.1"],
            values: [
                {
                    name: "none",
                    description: "The element is not moved to a named flow and normal CSS processing takes place.",
                },
            ],
            relevance: 50,
            description: "Places an element or its contents into a named flow.",
            restrictions: ["identifier"],
        },
        {
            name: "-webkit-font-feature-settings",
            browsers: ["C16"],
            values: [
                {
                    name: '"c2cs"',
                },
                {
                    name: '"dlig"',
                },
                {
                    name: '"kern"',
                },
                {
                    name: '"liga"',
                },
                {
                    name: '"lnum"',
                },
                {
                    name: '"onum"',
                },
                {
                    name: '"smcp"',
                },
                {
                    name: '"swsh"',
                },
                {
                    name: '"tnum"',
                },
                {
                    name: "normal",
                    description: "No change in glyph substitution or positioning occurs.",
                },
                {
                    name: "off",
                },
                {
                    name: "on",
                },
            ],
            relevance: 50,
            description: "This property provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            restrictions: ["string", "integer"],
        },
        {
            name: "-webkit-hyphens",
            browsers: ["S5.1"],
            values: [
                {
                    name: "auto",
                    description: "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word.",
                },
                {
                    name: "manual",
                    description: "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities",
                },
                {
                    name: "none",
                    description: "Words are not broken at line breaks, even if characters inside the word suggest line break points.",
                },
            ],
            relevance: 50,
            description: "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-line-break",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "after-white-space",
                },
                {
                    name: "normal",
                },
            ],
            relevance: 50,
            description: "Specifies line-breaking rules for CJK (Chinese, Japanese, and Korean) text.",
        },
        {
            name: "-webkit-margin-bottom-collapse",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "collapse",
                },
                {
                    name: "discard",
                },
                {
                    name: "separate",
                },
            ],
            relevance: 50,
            restrictions: ["enum"],
        },
        {
            name: "-webkit-margin-collapse",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "collapse",
                },
                {
                    name: "discard",
                },
                {
                    name: "separate",
                },
            ],
            relevance: 50,
            restrictions: ["enum"],
        },
        {
            name: "-webkit-margin-start",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            restrictions: ["percentage", "length"],
        },
        {
            name: "-webkit-margin-top-collapse",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "collapse",
                },
                {
                    name: "discard",
                },
                {
                    name: "separate",
                },
            ],
            relevance: 50,
            restrictions: ["enum"],
        },
        {
            name: "-webkit-mask-clip",
            browsers: ["C", "O15", "S4"],
            status: "nonstandard",
            syntax: "[ <box> | border | padding | content | text ]#",
            relevance: 0,
            description: "Determines the mask painting area, which determines the area that is affected by the mask.",
            restrictions: ["box"],
        },
        {
            name: "-webkit-mask-image",
            browsers: ["C", "O15", "S4"],
            values: [
                {
                    name: "none",
                    description: "Counts as a transparent black image layer.",
                },
                {
                    name: "url()",
                    description: "Reference to a <mask element or to a CSS image.",
                },
            ],
            status: "nonstandard",
            syntax: "<mask-reference>#",
            relevance: 0,
            description: "Sets the mask layer image of an element.",
            restrictions: ["url", "image", "enum"],
        },
        {
            name: "-webkit-mask-origin",
            browsers: ["C", "O15", "S4"],
            status: "nonstandard",
            syntax: "[ <box> | border | padding | content ]#",
            relevance: 0,
            description: "Specifies the mask positioning area.",
            restrictions: ["box"],
        },
        {
            name: "-webkit-mask-repeat",
            browsers: ["C", "O15", "S4"],
            status: "nonstandard",
            syntax: "<repeat-style>#",
            relevance: 0,
            description: "Specifies how mask layer images are tiled after they have been sized and positioned.",
            restrictions: ["repeat"],
        },
        {
            name: "-webkit-mask-size",
            browsers: ["C", "O15", "S4"],
            values: [
                {
                    name: "auto",
                    description: "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%.",
                },
                {
                    name: "contain",
                    description: "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.",
                },
                {
                    name: "cover",
                    description: "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.",
                },
            ],
            status: "nonstandard",
            syntax: "<bg-size>#",
            relevance: 0,
            description: "Specifies the size of the mask layer images.",
            restrictions: ["length", "percentage", "enum"],
        },
        {
            name: "-webkit-nbsp-mode",
            browsers: ["S13.1"],
            values: [
                {
                    name: "normal",
                },
                {
                    name: "space",
                },
            ],
            relevance: 50,
            description: "Defines the behavior of nonbreaking spaces within text.",
        },
        {
            name: "-webkit-overflow-scrolling",
            browsers: ["C", "S5"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "touch",
                },
            ],
            status: "nonstandard",
            syntax: "auto | touch",
            relevance: 0,
            description: "Specifies whether to use native-style scrolling in an overflow:scroll element.",
        },
        {
            name: "-webkit-padding-start",
            browsers: ["C", "S3"],
            relevance: 50,
            restrictions: ["percentage", "length"],
        },
        {
            name: "-webkit-perspective",
            browsers: ["C", "S4"],
            values: [
                {
                    name: "none",
                    description: "No perspective transform is applied.",
                },
            ],
            relevance: 50,
            description: "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            restrictions: ["length"],
        },
        {
            name: "-webkit-perspective-origin",
            browsers: ["C", "S4"],
            relevance: 50,
            description: "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            restrictions: ["position", "percentage", "length"],
        },
        {
            name: "-webkit-region-fragment",
            browsers: ["S7"],
            values: [
                {
                    name: "auto",
                    description: "Content flows as it would in a regular content box.",
                },
                {
                    name: "break",
                    description: "If the content fits within the CSS Region, then this property has no effect.",
                },
            ],
            relevance: 50,
            description: "The 'region-fragment' property controls the behavior of the last region associated with a named flow.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-tap-highlight-color",
            browsers: ["E12", "C16", "O15"],
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-tap-highlight-color",
                },
            ],
            restrictions: ["color"],
        },
        {
            name: "-webkit-text-fill-color",
            browsers: ["E12", "FF49", "S3", "C1", "O15"],
            syntax: "<color>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color",
                },
            ],
            restrictions: ["color"],
        },
        {
            name: "-webkit-text-size-adjust",
            browsers: ["E", "C", "S3"],
            values: [
                {
                    name: "auto",
                    description: "Renderers must use the default size adjustment when displaying on a small device.",
                },
                {
                    name: "none",
                    description: "Renderers must not do size adjustment when displaying on a small device.",
                },
            ],
            relevance: 50,
            description: "Specifies a size adjustment for displaying text content in mobile browsers.",
            restrictions: ["percentage"],
        },
        {
            name: "-webkit-text-stroke",
            browsers: ["E15", "FF49", "S3", "C4", "O15"],
            syntax: "<length> || <color>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke",
                },
            ],
            restrictions: ["length", "line-width", "color", "percentage"],
        },
        {
            name: "-webkit-text-stroke-color",
            browsers: ["E15", "FF49", "S3", "C1", "O15"],
            syntax: "<color>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color",
                },
            ],
            restrictions: ["color"],
        },
        {
            name: "-webkit-text-stroke-width",
            browsers: ["E15", "FF49", "S3", "C1", "O15"],
            syntax: "<length>",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width",
                },
            ],
            restrictions: ["length", "line-width", "percentage"],
        },
        {
            name: "-webkit-touch-callout",
            browsers: ["S3"],
            values: [
                {
                    name: "none",
                },
            ],
            status: "nonstandard",
            syntax: "default | none",
            relevance: 0,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-touch-callout",
                },
            ],
            restrictions: ["enum"],
        },
        {
            name: "-webkit-transform",
            browsers: ["C", "O12", "S3.1"],
            values: [
                {
                    name: "matrix()",
                    description: "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]",
                },
                {
                    name: "matrix3d()",
                    description: "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order.",
                },
                {
                    name: "none",
                },
                {
                    name: "perspective()",
                    description: "Specifies a perspective projection matrix.",
                },
                {
                    name: "rotate()",
                    description: "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property.",
                },
                {
                    name: "rotate3d()",
                    description: "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters.",
                },
                {
                    name: "rotateX('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the X axis.",
                },
                {
                    name: "rotateY('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Y axis.",
                },
                {
                    name: "rotateZ('angle')",
                    description: "Specifies a clockwise rotation by the given angle about the Z axis.",
                },
                {
                    name: "scale()",
                    description: "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first.",
                },
                {
                    name: "scale3d()",
                    description: "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters.",
                },
                {
                    name: "scaleX()",
                    description: "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter.",
                },
                {
                    name: "scaleY()",
                    description: "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter.",
                },
                {
                    name: "scaleZ()",
                    description: "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter.",
                },
                {
                    name: "skew()",
                    description: "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis).",
                },
                {
                    name: "skewX()",
                    description: "Specifies a skew transformation along the X axis by the given angle.",
                },
                {
                    name: "skewY()",
                    description: "Specifies a skew transformation along the Y axis by the given angle.",
                },
                {
                    name: "translate()",
                    description: "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter.",
                },
                {
                    name: "translate3d()",
                    description: "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively.",
                },
                {
                    name: "translateX()",
                    description: "Specifies a translation by the given amount in the X direction.",
                },
                {
                    name: "translateY()",
                    description: "Specifies a translation by the given amount in the Y direction.",
                },
                {
                    name: "translateZ()",
                    description: "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0.",
                },
            ],
            relevance: 50,
            description: "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-transform-origin",
            browsers: ["C", "O15", "S3.1"],
            relevance: 50,
            description: "Establishes the origin of transformation for an element.",
            restrictions: ["position", "length", "percentage"],
        },
        {
            name: "-webkit-transform-origin-x",
            browsers: ["E80", "S13.1", "C80", "O67"],
            relevance: 50,
            description: "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "-webkit-transform-origin-y",
            browsers: ["E80", "S13.1", "C80", "O67"],
            relevance: 50,
            description: "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "-webkit-transform-origin-z",
            browsers: ["E80", "S13.1", "C80", "O67"],
            relevance: 50,
            description: "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "-webkit-transform-style",
            browsers: ["C", "S4"],
            values: [
                {
                    name: "flat",
                    description: "All children of this element are rendered flattened into the 2D plane of the element.",
                },
            ],
            relevance: 50,
            description: "Defines how nested elements are rendered in 3D space.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-transition",
            browsers: ["C", "O12", "S5"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            relevance: 50,
            description: "Shorthand property combines four of the transition properties into a single property.",
            restrictions: ["time", "property", "timing-function", "enum"],
        },
        {
            name: "-webkit-transition-delay",
            browsers: ["C", "O12", "S5"],
            relevance: 50,
            description: "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            restrictions: ["time"],
        },
        {
            name: "-webkit-transition-duration",
            browsers: ["C", "O12", "S5"],
            relevance: 50,
            description: "Specifies how long the transition from the old value to the new value should take.",
            restrictions: ["time"],
        },
        {
            name: "-webkit-transition-property",
            browsers: ["C", "O12", "S5"],
            values: [
                {
                    name: "all",
                    description: "Every property that is able to undergo a transition will do so.",
                },
                {
                    name: "none",
                    description: "No property will transition.",
                },
            ],
            relevance: 50,
            description: "Specifies the name of the CSS property to which the transition is applied.",
            restrictions: ["property"],
        },
        {
            name: "-webkit-transition-timing-function",
            browsers: ["C", "O12", "S5"],
            relevance: 50,
            description: "Describes how the intermediate values used during a transition will be calculated.",
            restrictions: ["timing-function"],
        },
        {
            name: "-webkit-user-drag",
            browsers: ["E80", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "element",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            restrictions: ["enum"],
        },
        {
            name: "-webkit-user-modify",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "read-only",
                },
                {
                    name: "read-write",
                },
                {
                    name: "read-write-plaintext-only",
                },
            ],
            status: "nonstandard",
            syntax: "read-only | read-write | read-write-plaintext-only",
            relevance: 0,
            description: "Determines whether a user can edit the content of an element.",
            restrictions: ["enum"],
        },
        {
            name: "-webkit-user-select",
            browsers: ["C", "S3"],
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
                {
                    name: "text",
                },
            ],
            relevance: 50,
            description: "Controls the appearance of selection.",
            restrictions: ["enum"],
        },
        {
            name: "widows",
            browsers: ["E12", "S1.3", "C25", "IE8", "O9.2"],
            syntax: "<integer>",
            relevance: 51,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/widows",
                },
            ],
            description: "Specifies the minimum number of line boxes of a block container that must be left in a fragment after a break.",
            restrictions: ["integer"],
        },
        {
            name: "width",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            values: [
                {
                    name: "auto",
                    description: "The width depends on the values of other properties.",
                },
                {
                    name: "fit-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
                    description: "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "max-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
                    description: "Use the max-content inline size or max-content block size, as appropriate to the writing mode.",
                },
                {
                    name: "min-content",
                    browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
                    description: "Use the min-content inline size or min-content block size, as appropriate to the writing mode.",
                },
            ],
            syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            relevance: 96,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/width",
                },
            ],
            description: "Specifies the width of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
            restrictions: ["length", "percentage"],
        },
        {
            name: "will-change",
            browsers: ["E79", "FF36", "S9.1", "C36", "O23"],
            values: [
                {
                    name: "auto",
                    description: "Expresses no particular intent.",
                },
                {
                    name: "contents",
                    description: "Indicates that the author expects to animate or change something about the element's contents in the near future.",
                },
                {
                    name: "scroll-position",
                    description: "Indicates that the author expects to animate or change the scroll position of the element in the near future.",
                },
            ],
            syntax: "auto | <animateable-feature>#",
            relevance: 66,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/will-change",
                },
            ],
            description: "Provides a rendering hint to the user agent, stating what kinds of changes the author expects to perform on the element.",
            restrictions: ["enum", "identifier"],
        },
        {
            name: "word-break",
            browsers: ["E12", "FF15", "S3", "C1", "IE5.5", "O15"],
            values: [
                {
                    name: "break-all",
                    description: "Lines may break between any two grapheme clusters for non-CJK scripts.",
                },
                {
                    name: "keep-all",
                    description: "Block characters can no longer create implied break points.",
                },
                {
                    name: "normal",
                    description: "Breaks non-CJK scripts according to their own rules.",
                },
            ],
            syntax: "normal | break-all | keep-all | break-word",
            relevance: 76,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/word-break",
                },
            ],
            description: "Specifies line break opportunities for non-CJK scripts.",
            restrictions: ["enum"],
        },
        {
            name: "word-spacing",
            browsers: ["E12", "FF1", "S1", "C1", "IE6", "O3.5"],
            values: [
                {
                    name: "normal",
                    description: "No additional spacing is applied. Computes to zero.",
                },
            ],
            syntax: "normal | <length>",
            relevance: 56,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/word-spacing",
                },
            ],
            description: 'Specifies additional spacing between "words".',
            restrictions: ["length", "percentage"],
        },
        {
            name: "word-wrap",
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            values: [
                {
                    name: "break-word",
                    description: "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line.",
                },
                {
                    name: "normal",
                    description: "Lines may break only at allowed break points.",
                },
            ],
            syntax: "normal | break-word",
            relevance: 77,
            description: "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
            restrictions: ["enum"],
        },
        {
            name: "writing-mode",
            browsers: ["E12", "FF41", "S10.1", "C48", "IE9", "O35"],
            values: [
                {
                    name: "horizontal-tb",
                    description: "Top-to-bottom block flow direction. The writing mode is horizontal.",
                },
                {
                    name: "sideways-lr",
                    browsers: ["E12", "FF41", "S10.1", "C48", "IE9", "O35"],
                    description: "Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal.",
                },
                {
                    name: "sideways-rl",
                    browsers: ["E12", "FF41", "S10.1", "C48", "IE9", "O35"],
                    description: "Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal.",
                },
                {
                    name: "vertical-lr",
                    description: "Left-to-right block flow direction. The writing mode is vertical.",
                },
                {
                    name: "vertical-rl",
                    description: "Right-to-left block flow direction. The writing mode is vertical.",
                },
            ],
            syntax: "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
            relevance: 50,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/writing-mode",
                },
            ],
            description: "This is a shorthand property for both 'direction' and 'block-progression'.",
            restrictions: ["enum"],
        },
        {
            name: "z-index",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O4"],
            values: [
                {
                    name: "auto",
                    description: "The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element.",
                },
            ],
            syntax: "auto | <integer>",
            relevance: 92,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/z-index",
                },
            ],
            description: "For a positioned box, the 'z-index' property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.",
            restrictions: ["integer"],
        },
        {
            name: "zoom",
            browsers: ["E12", "FF126", "S3.1", "C1", "IE5.5", "O15"],
            values: [
                {
                    name: "normal",
                },
            ],
            syntax: "normal | reset | <number> | <percentage>",
            relevance: 63,
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/zoom",
                },
            ],
            description: "Non-standard. Specifies the magnification scale of the object. See 'transform: scale()' for a standards-based alternative.",
            restrictions: ["enum", "integer", "number", "percentage"],
        },
        {
            name: "-ms-ime-align",
            status: "nonstandard",
            syntax: "auto | after",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "after",
                },
            ],
            relevance: 0,
            description: "Aligns the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active.",
        },
        {
            name: "-moz-binding",
            status: "nonstandard",
            syntax: "<url> | none",
            relevance: 0,
            description: "The -moz-binding CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.",
        },
        {
            name: "-moz-context-properties",
            status: "nonstandard",
            syntax: "none | [ fill | fill-opacity | stroke | stroke-opacity ]#",
            relevance: 0,
            description: "If you reference an SVG image in a webpage (such as with the <img> element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the -moz-context-properties property, and the image needs to opt in to using those properties by using values such as the context-fill value.\n\nThis feature is available since Firefox 55, but is only currently supported with SVG images loaded via chrome:// or resource:// URLs. To experiment with the feature in SVG on the Web it is necessary to set the svg.context-properties.content.enabled pref to true.",
        },
        {
            name: "-moz-float-edge",
            status: "obsolete",
            syntax: "border-box | content-box | margin-box | padding-box",
            values: [
                {
                    name: "border-box",
                },
                {
                    name: "content-box",
                },
                {
                    name: "margin-box",
                },
                {
                    name: "padding-box",
                },
            ],
            relevance: 0,
            browsers: ["FF1"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-moz-float-edge",
                },
            ],
            description: "The non-standard -moz-float-edge CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.",
        },
        {
            name: "-moz-force-broken-image-icon",
            status: "obsolete",
            syntax: "0 | 1",
            values: [
                {
                    name: "0",
                },
                {
                    name: "1",
                },
            ],
            relevance: 0,
            browsers: ["FF1"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-moz-force-broken-image-icon",
                },
            ],
            description: "The -moz-force-broken-image-icon extended CSS property can be used to force the broken image icon to be shown even when a broken image has an alt attribute.",
        },
        {
            name: "-moz-image-region",
            status: "nonstandard",
            syntax: "<shape> | auto",
            relevance: 0,
            browsers: ["FF1"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-moz-image-region",
                },
            ],
            description: "For certain XUL elements and pseudo-elements that use an image from the list-style-image property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.",
        },
        {
            name: "-moz-orient",
            status: "nonstandard",
            syntax: "inline | block | horizontal | vertical",
            values: [
                {
                    name: "inline",
                },
                {
                    name: "block",
                },
                {
                    name: "horizontal",
                },
                {
                    name: "vertical",
                },
            ],
            relevance: 0,
            browsers: ["FF6"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-moz-orient",
                },
            ],
            description: "The -moz-orient CSS property specifies the orientation of the element to which it's applied.",
        },
        {
            name: "-moz-outline-radius",
            status: "nonstandard",
            syntax: "<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?",
            relevance: 0,
            description: "In Mozilla applications like Firefox, the -moz-outline-radius CSS property can be used to give an element's outline rounded corners.",
        },
        {
            name: "-moz-outline-radius-bottomleft",
            status: "nonstandard",
            syntax: "<outline-radius>",
            relevance: 0,
            description: "In Mozilla applications, the -moz-outline-radius-bottomleft CSS property can be used to round the bottom-left corner of an element's outline.",
        },
        {
            name: "-moz-outline-radius-bottomright",
            status: "nonstandard",
            syntax: "<outline-radius>",
            relevance: 0,
            description: "In Mozilla applications, the -moz-outline-radius-bottomright CSS property can be used to round the bottom-right corner of an element's outline.",
        },
        {
            name: "-moz-outline-radius-topleft",
            status: "nonstandard",
            syntax: "<outline-radius>",
            relevance: 0,
            description: "In Mozilla applications, the -moz-outline-radius-topleft CSS property can be used to round the top-left corner of an element's outline.",
        },
        {
            name: "-moz-outline-radius-topright",
            status: "nonstandard",
            syntax: "<outline-radius>",
            relevance: 0,
            description: "In Mozilla applications, the -moz-outline-radius-topright CSS property can be used to round the top-right corner of an element's outline.",
        },
        {
            name: "-moz-stack-sizing",
            status: "nonstandard",
            syntax: "ignore | stretch-to-fit",
            values: [
                {
                    name: "ignore",
                },
                {
                    name: "stretch-to-fit",
                },
            ],
            relevance: 0,
            description: "-moz-stack-sizing is an extended CSS property. Normally, a stack will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.",
        },
        {
            name: "-moz-text-blink",
            status: "nonstandard",
            syntax: "none | blink",
            values: [
                {
                    name: "none",
                },
                {
                    name: "blink",
                },
            ],
            relevance: 0,
            description: "The -moz-text-blink non-standard Mozilla CSS extension specifies the blink mode.",
        },
        {
            name: "-moz-user-input",
            status: "obsolete",
            syntax: "auto | none | enabled | disabled",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
                {
                    name: "enabled",
                },
                {
                    name: "disabled",
                },
            ],
            relevance: 0,
            browsers: ["FF1"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-moz-user-input",
                },
            ],
            description: "In Mozilla applications, -moz-user-input determines if an element will accept user input.",
        },
        {
            name: "-moz-user-modify",
            status: "nonstandard",
            syntax: "read-only | read-write | write-only",
            values: [
                {
                    name: "read-only",
                },
                {
                    name: "read-write",
                },
                {
                    name: "write-only",
                },
            ],
            relevance: 0,
            description: "The -moz-user-modify property has no effect. It was originally planned to determine whether or not the content of an element can be edited by a user.",
        },
        {
            name: "-moz-window-dragging",
            status: "nonstandard",
            syntax: "drag | no-drag",
            values: [
                {
                    name: "drag",
                },
                {
                    name: "no-drag",
                },
            ],
            relevance: 0,
            description: "The -moz-window-dragging CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.",
        },
        {
            name: "-moz-window-shadow",
            status: "nonstandard",
            syntax: "default | menu | tooltip | sheet | none",
            values: [
                {
                    name: "default",
                },
                {
                    name: "menu",
                },
                {
                    name: "tooltip",
                },
                {
                    name: "sheet",
                },
                {
                    name: "none",
                },
            ],
            relevance: 0,
            description: "The -moz-window-shadow CSS property specifies whether a window will have a shadow. It only works on Mac OS X.",
        },
        {
            name: "-webkit-border-before",
            status: "nonstandard",
            syntax: "<'border-width'> || <'border-style'> || <color>",
            relevance: 0,
            browsers: ["E79", "S5.1", "C8", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-border-before",
                },
            ],
            description: "The -webkit-border-before CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.",
        },
        {
            name: "-webkit-border-before-color",
            status: "nonstandard",
            syntax: "<color>",
            relevance: 0,
            description: "The -webkit-border-before-color CSS property sets the color of the individual logical block start border in a single place in the style sheet.",
        },
        {
            name: "-webkit-border-before-style",
            status: "nonstandard",
            syntax: "<'border-style'>",
            relevance: 0,
            description: "The -webkit-border-before-style CSS property sets the style of the individual logical block start border in a single place in the style sheet.",
        },
        {
            name: "-webkit-border-before-width",
            status: "nonstandard",
            syntax: "<'border-width'>",
            relevance: 0,
            description: "The -webkit-border-before-width CSS property sets the width of the individual logical block start border in a single place in the style sheet.",
        },
        {
            name: "-webkit-line-clamp",
            syntax: "none | <integer>",
            relevance: 50,
            description: "The -webkit-line-clamp CSS property allows limiting of the contents of a block container to the specified number of lines.",
        },
        {
            name: "-webkit-mask",
            status: "nonstandard",
            syntax: "[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#",
            relevance: 0,
            description: "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points.",
        },
        {
            name: "-webkit-mask-attachment",
            status: "nonstandard",
            syntax: "<attachment>#",
            relevance: 0,
            description: "If a -webkit-mask-image is specified, -webkit-mask-attachment determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.",
        },
        {
            name: "-webkit-mask-composite",
            status: "nonstandard",
            syntax: "<composite-style>#",
            relevance: 0,
            browsers: ["E18", "S3.1", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite",
                },
            ],
            description: "The -webkit-mask-composite property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the -webkit-mask-image property.",
        },
        {
            name: "-webkit-mask-position",
            status: "nonstandard",
            syntax: "<position>#",
            relevance: 0,
            description: "The mask-position CSS property sets the initial position, relative to the mask position layer defined by mask-origin, for each defined mask image.",
        },
        {
            name: "-webkit-mask-position-x",
            status: "nonstandard",
            syntax: "[ <length-percentage> | left | center | right ]#",
            relevance: 0,
            browsers: ["E18", "FF49", "S3.1", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-x",
                },
            ],
            description: "The -webkit-mask-position-x CSS property sets the initial horizontal position of a mask image.",
        },
        {
            name: "-webkit-mask-position-y",
            status: "nonstandard",
            syntax: "[ <length-percentage> | top | center | bottom ]#",
            relevance: 0,
            browsers: ["E18", "FF49", "S3.1", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-y",
                },
            ],
            description: "The -webkit-mask-position-y CSS property sets the initial vertical position of a mask image.",
        },
        {
            name: "-webkit-mask-repeat-x",
            status: "nonstandard",
            syntax: "repeat | no-repeat | space | round",
            values: [
                {
                    name: "repeat",
                },
                {
                    name: "no-repeat",
                },
                {
                    name: "space",
                },
                {
                    name: "round",
                },
            ],
            relevance: 0,
            browsers: ["E79", "S5", "C3", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-x",
                },
            ],
            description: "The -webkit-mask-repeat-x property specifies whether and how a mask image is repeated (tiled) horizontally.",
        },
        {
            name: "-webkit-mask-repeat-y",
            status: "nonstandard",
            syntax: "repeat | no-repeat | space | round",
            values: [
                {
                    name: "repeat",
                },
                {
                    name: "no-repeat",
                },
                {
                    name: "space",
                },
                {
                    name: "round",
                },
            ],
            relevance: 0,
            browsers: ["E79", "S5", "C3", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-y",
                },
            ],
            description: "The -webkit-mask-repeat-y property specifies whether and how a mask image is repeated (tiled) vertically.",
        },
        {
            name: "accent-color",
            syntax: "auto | <color>",
            relevance: 50,
            browsers: ["E93", "FF92", "S15.4", "C93", "O79"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/accent-color",
                },
            ],
            description: "Sets the color of the elements accent",
        },
        {
            name: "align-tracks",
            status: "experimental",
            syntax: "[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#",
            relevance: 50,
            description: "The align-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.",
        },
        {
            name: "anchor-name",
            status: "experimental",
            syntax: "none | <dashed-ident>#",
            relevance: 50,
            browsers: ["E125", "C125", "O111"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/anchor-name",
                },
            ],
            description: "The anchor-name property declares that an element is an anchor element, and gives it a list of anchor names to be targeted by.",
        },
        {
            name: "anchor-scope",
            status: "experimental",
            syntax: "none | all | <dashed-ident>#",
            relevance: 50,
            browsers: ["C131"],
            description: "This property scopes the specified anchor names, and lookups for these anchor names, to this element’s subtree",
        },
        {
            name: "animation-composition",
            syntax: "<single-animation-composition>#",
            relevance: 50,
            browsers: ["E112", "FF115", "S16", "C112", "O98"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-composition",
                },
            ],
            description: "The composite operation to use when multiple animations affect the same property.",
        },
        {
            name: "animation-range",
            status: "experimental",
            syntax: "[ <'animation-range-start'> <'animation-range-end'>? ]#",
            relevance: 50,
            browsers: ["E115", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-range",
                },
            ],
            description: "The animation-range CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.",
        },
        {
            name: "animation-range-end",
            status: "experimental",
            syntax: "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
            relevance: 50,
            browsers: ["E115", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-range-end",
                },
            ],
            description: "The animation-range-end CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.",
        },
        {
            name: "animation-range-start",
            status: "experimental",
            syntax: "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
            relevance: 50,
            browsers: ["E115", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-range-start",
                },
            ],
            description: "The animation-range-start CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.",
        },
        {
            name: "animation-timeline",
            status: "experimental",
            syntax: "<single-animation-timeline>#",
            relevance: 50,
            browsers: ["E115", "FF110", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/animation-timeline",
                },
            ],
            description: "Specifies the names of one or more @scroll-timeline at-rules to describe the element's scroll animations.",
        },
        {
            name: "appearance",
            syntax: "none | auto | textfield | menulist-button | <compat-auto>",
            relevance: 71,
            browsers: ["E84", "FF80", "S15.4", "C84", "O70"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/appearance",
                },
            ],
            description: "Changes the appearance of buttons and other controls to resemble native controls.",
        },
        {
            name: "aspect-ratio",
            syntax: "auto || <ratio>",
            relevance: 60,
            browsers: ["E88", "FF89", "S15", "C88", "O74"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/aspect-ratio",
                },
            ],
            description: "The aspect-ratio   CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions.",
        },
        {
            name: "azimuth",
            status: "obsolete",
            syntax: "<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards",
            relevance: 0,
            description: "In combination with elevation, the azimuth CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.",
        },
        {
            name: "backdrop-filter",
            syntax: "none | <filter-function-list>",
            relevance: 60,
            browsers: ["E79", "FF103", "S18", "C76", "O63"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/backdrop-filter",
                },
            ],
            description: "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent.",
        },
        {
            name: "border-block",
            syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block",
                },
            ],
            description: "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.",
        },
        {
            name: "border-block-color",
            syntax: "<'border-top-color'>{1,2}",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-color",
                },
            ],
            description: "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-block-style",
            syntax: "<'border-top-style'>",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-style",
                },
            ],
            description: "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-block-width",
            syntax: "<'border-top-width'>",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-block-width",
                },
            ],
            description: "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-end-end-radius",
            syntax: "<length-percentage>{1,2}",
            relevance: 54,
            browsers: ["E89", "FF66", "S15", "C89", "O75"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius",
                },
            ],
            description: "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-end-start-radius",
            syntax: "<length-percentage>{1,2}",
            relevance: 54,
            browsers: ["E89", "FF66", "S15", "C89", "O75"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius",
                },
            ],
            description: "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-inline",
            syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline",
                },
            ],
            description: "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.",
        },
        {
            name: "border-inline-color",
            syntax: "<'border-top-color'>{1,2}",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-color",
                },
            ],
            description: "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-inline-style",
            syntax: "<'border-top-style'>",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-style",
                },
            ],
            description: "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-inline-width",
            syntax: "<'border-top-width'>",
            relevance: 50,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-width",
                },
            ],
            description: "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-start-end-radius",
            syntax: "<length-percentage>{1,2}",
            relevance: 54,
            browsers: ["E89", "FF66", "S15", "C89", "O75"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius",
                },
            ],
            description: "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation.",
        },
        {
            name: "border-start-start-radius",
            syntax: "<length-percentage>{1,2}",
            relevance: 54,
            browsers: ["E89", "FF66", "S15", "C89", "O75"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius",
                },
            ],
            description: "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation.",
        },
        {
            name: "box-align",
            status: "obsolete",
            syntax: "start | center | end | baseline | stretch",
            values: [
                {
                    name: "start",
                },
                {
                    name: "center",
                },
                {
                    name: "end",
                },
                {
                    name: "baseline",
                },
                {
                    name: "stretch",
                },
            ],
            relevance: 0,
            browsers: ["E12", "FF49", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-align",
                },
            ],
            description: "The box-align CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.",
        },
        {
            name: "box-direction",
            status: "obsolete",
            syntax: "normal | reverse | inherit",
            values: [
                {
                    name: "normal",
                },
                {
                    name: "reverse",
                },
                {
                    name: "inherit",
                },
            ],
            relevance: 0,
            browsers: ["E12", "FF49", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-direction",
                },
            ],
            description: "The box-direction CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
        },
        {
            name: "box-flex",
            status: "obsolete",
            syntax: "<number>",
            relevance: 0,
            browsers: ["E12", "FF49", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-flex",
                },
            ],
            description: "The -moz-box-flex and -webkit-box-flex CSS properties specify how a -moz-box or -webkit-box grows to fill the box that contains it, in the direction of the containing box's layout.",
        },
        {
            name: "box-flex-group",
            status: "obsolete",
            syntax: "<integer>",
            relevance: 0,
            browsers: ["S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-flex-group",
                },
            ],
            description: "The box-flex-group CSS property assigns the flexbox's child elements to a flex group.",
        },
        {
            name: "box-lines",
            status: "obsolete",
            syntax: "single | multiple",
            values: [
                {
                    name: "single",
                },
                {
                    name: "multiple",
                },
            ],
            relevance: 0,
            browsers: ["S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-lines",
                },
            ],
            description: "The box-lines CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).",
        },
        {
            name: "box-ordinal-group",
            status: "obsolete",
            syntax: "<integer>",
            relevance: 0,
            browsers: ["E12", "FF49", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group",
                },
            ],
            description: "The box-ordinal-group CSS property assigns the flexbox's child elements to an ordinal group.",
        },
        {
            name: "box-orient",
            status: "obsolete",
            syntax: "horizontal | vertical | inline-axis | block-axis | inherit",
            values: [
                {
                    name: "horizontal",
                },
                {
                    name: "vertical",
                },
                {
                    name: "inline-axis",
                },
                {
                    name: "block-axis",
                },
                {
                    name: "inherit",
                },
            ],
            relevance: 0,
            browsers: ["E12", "FF49", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-orient",
                },
            ],
            description: "The box-orient CSS property specifies whether an element lays out its contents horizontally or vertically.",
        },
        {
            name: "box-pack",
            status: "obsolete",
            syntax: "start | center | end | justify",
            values: [
                {
                    name: "start",
                },
                {
                    name: "center",
                },
                {
                    name: "end",
                },
                {
                    name: "justify",
                },
            ],
            relevance: 0,
            browsers: ["E12", "FF49", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/box-pack",
                },
            ],
            description: "The -moz-box-pack and -webkit-box-pack CSS properties specify how a -moz-box or -webkit-box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.",
        },
        {
            name: "caret",
            syntax: "<'caret-color'> || <'caret-shape'>",
            relevance: 50,
            description: "Shorthand for setting caret-color and caret-shape.",
        },
        {
            name: "caret-shape",
            syntax: "auto | bar | block | underscore",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "bar",
                },
                {
                    name: "block",
                },
                {
                    name: "underscore",
                },
            ],
            relevance: 50,
            description: "Specifies the desired shape of the text insertion caret.",
        },
        {
            name: "color-scheme",
            syntax: "normal | [ light | dark | <custom-ident> ]+ && only?",
            relevance: 57,
            browsers: ["E81", "FF96", "S13", "C81", "O68"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/color-scheme",
                },
            ],
            description: "The color-scheme CSS property allows an element to indicate which color schemes it can comfortably be rendered in.",
        },
        {
            name: "contain-intrinsic-size",
            syntax: "[ auto? [ none | <length> ] ]{1,2}",
            relevance: 50,
            browsers: ["E83", "FF107", "S17", "C83", "O69"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size",
                },
            ],
            description: "Size of an element when the element is subject to size containment.",
        },
        {
            name: "contain-intrinsic-block-size",
            syntax: "auto? [ none | <length> ]",
            relevance: 50,
            browsers: ["E95", "FF107", "S17", "C95", "O81"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-block-size",
                },
            ],
            description: "Block size of an element when the element is subject to size containment.",
        },
        {
            name: "contain-intrinsic-height",
            syntax: "auto? [ none | <length> ]",
            relevance: 50,
            browsers: ["E95", "FF107", "S17", "C95", "O81"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height",
                },
            ],
            description: "Height of an element when the element is subject to size containment.",
        },
        {
            name: "contain-intrinsic-inline-size",
            syntax: "auto? [ none | <length> ]",
            relevance: 50,
            browsers: ["E95", "FF107", "S17", "C95", "O81"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-inline-size",
                },
            ],
            description: "Inline size of an element when the element is subject to size containment.",
        },
        {
            name: "contain-intrinsic-width",
            syntax: "auto? [ none | <length> ]",
            relevance: 50,
            browsers: ["E95", "FF107", "S17", "C95", "O81"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width",
                },
            ],
            description: "Width of an element when the element is subject to size containment.",
        },
        {
            name: "container",
            syntax: "<'container-name'> [ / <'container-type'> ]?",
            relevance: 53,
            browsers: ["E105", "FF110", "S16", "C105", "O91"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/container",
                },
            ],
            description: "The container shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.",
        },
        {
            name: "container-name",
            syntax: "none | <custom-ident>+",
            relevance: 50,
            browsers: ["E105", "FF110", "S16", "C105", "O91"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/container-name",
                },
            ],
            description: "The container-name CSS property specifies a list of query container names used by the @container at-rule in a container query.",
        },
        {
            name: "container-type",
            syntax: "normal | size | inline-size",
            values: [
                {
                    name: "normal",
                },
                {
                    name: "size",
                },
                {
                    name: "inline-size",
                },
            ],
            relevance: 52,
            browsers: ["E105", "FF110", "S16", "C105", "O91"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/container-type",
                },
            ],
            description: "The container-type CSS property is used to define the type of containment used in a container query.",
        },
        {
            name: "content-visibility",
            syntax: "visible | auto | hidden",
            values: [
                {
                    name: "visible",
                },
                {
                    name: "auto",
                },
                {
                    name: "hidden",
                },
            ],
            relevance: 52,
            browsers: ["E85", "FF125", "S18", "C85", "O71"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/content-visibility",
                },
            ],
            description: "Controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed.",
        },
        {
            name: "counter-set",
            syntax: "[ <counter-name> <integer>? ]+ | none",
            relevance: 50,
            browsers: ["E85", "FF68", "S17.2", "C85", "O71"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/counter-set",
                },
            ],
            description: "The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.",
        },
        {
            name: "d",
            syntax: "none | path(<string>)",
            relevance: 50,
            browsers: ["E80", "FF97", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/d",
                },
            ],
            description: "The d CSS property defines a path to be drawn by the SVG path element. If present, it overrides the element's d attribute.",
        },
        {
            name: "cx",
            syntax: "<length> | <percentage>",
            relevance: 51,
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/cx",
                },
            ],
            description: "The cx CSS property defines the x-axis center point of an SVG circle or ellipse element. If present, it overrides the element's cx attribute.",
        },
        {
            name: "cy",
            syntax: "<length> | <percentage>",
            relevance: 51,
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/cy",
                },
            ],
            description: "The cy CSS property defines the y-axis center point of an SVG circle or ellipse elements. If present, it overrides the element's cy attribute.",
        },
        {
            name: "dominant-baseline",
            syntax: "auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "text-bottom",
                },
                {
                    name: "alphabetic",
                },
                {
                    name: "ideographic",
                },
                {
                    name: "middle",
                },
                {
                    name: "central",
                },
                {
                    name: "mathematical",
                },
                {
                    name: "hanging",
                },
                {
                    name: "text-top",
                },
            ],
            relevance: 50,
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/dominant-baseline",
                },
            ],
            description: "The dominant-baseline CSS property specifies the specific baseline used to align the box's text and inline-level contents. It also indicates the default alignment baseline of any boxes participating in baseline alignment in the box's alignment context. If present, it overrides the shape's dominant-baseline attribute.",
        },
        {
            name: "field-sizing",
            syntax: "content | fixed",
            values: [
                {
                    name: "content",
                },
                {
                    name: "fixed",
                },
            ],
            relevance: 50,
            browsers: ["E123", "C123", "O109"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/field-sizing",
                },
            ],
            description: "The field-sizing CSS property enables you to control the sizing behavior of elements that are given a default preferred size, such as form control elements. This property enables you to override the default sizing behavior, allowing form controls to adjust in size to fit their contents.",
        },
        {
            name: "font-optical-sizing",
            syntax: "auto | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            browsers: ["E17", "FF62", "S13.1", "C79", "O66"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing",
                },
            ],
            description: "The font-optical-sizing CSS property allows developers to control whether browsers render text with slightly differing visual representations to optimize viewing at different sizes, or not. This only works for fonts that have an optical size variation axis.",
        },
        {
            name: "font-palette",
            syntax: "normal | light | dark | <palette-identifier>",
            relevance: 50,
            browsers: ["E101", "FF107", "S15.4", "C101", "O87"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-palette",
                },
            ],
            description: "The font-palette CSS property allows specifying one of the many palettes contained in a font that a user agent should use for the font. Users can also override the values in a palette or create a new palette by using the @font-palette-values at-rule.",
        },
        {
            name: "font-variation-settings",
            atRule: "@font-face",
            syntax: "normal | [ <string> <number> ]#",
            relevance: 55,
            browsers: ["E17", "FF62", "S11", "C62", "O49"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variation-settings",
                },
            ],
            description: "The font-variation-settings CSS property provides low-level control over OpenType or TrueType font variations, by specifying the four letter axis names of the features you want to vary, along with their variation values.",
        },
        {
            name: "font-smooth",
            status: "nonstandard",
            syntax: "auto | never | always | <absolute-size> | <length>",
            relevance: 0,
            browsers: ["E79", "FF25", "S4", "C5", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-smooth",
                },
            ],
            description: "The font-smooth CSS property controls the application of anti-aliasing when fonts are rendered.",
        },
        {
            name: "font-synthesis-position",
            syntax: "auto | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            browsers: ["FF118"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position",
                },
            ],
            description: 'The font-synthesis-position CSS property lets you specify whether or not a browser may synthesize the subscript and superscript "position" typefaces when they are missing in a font family, while using font-variant-position to set the positions.',
        },
        {
            name: "font-synthesis-small-caps",
            syntax: "auto | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            browsers: ["E97", "FF111", "S16.4", "C97", "O83"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps",
                },
            ],
            description: "The font-synthesis-small-caps CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.",
        },
        {
            name: "font-synthesis-style",
            syntax: "auto | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            browsers: ["E97", "FF111", "S16.4", "C97", "O83"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style",
                },
            ],
            description: "The font-synthesis-style CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.",
        },
        {
            name: "font-synthesis-weight",
            syntax: "auto | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            browsers: ["E97", "FF111", "S16.4", "C97", "O83"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight",
                },
            ],
            description: "The font-synthesis-weight CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.",
        },
        {
            name: "font-variant-emoji",
            syntax: "normal | text | emoji | unicode",
            values: [
                {
                    name: "normal",
                },
                {
                    name: "text",
                },
                {
                    name: "emoji",
                },
                {
                    name: "unicode",
                },
            ],
            relevance: 50,
            browsers: ["E131", "FF108", "S17.5", "C131"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji",
                },
            ],
            description: "The font-variant-emoji CSS property specifies the default presentation style for displaying emojis.",
        },
        {
            name: "forced-color-adjust",
            syntax: "auto | none | preserve-parent-color",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
                {
                    name: "preserve-parent-color",
                },
            ],
            relevance: 58,
            browsers: ["E79", "FF113", "C89", "IE10", "O75"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust",
                },
            ],
            description: "Allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS",
        },
        {
            name: "gap",
            syntax: "<'row-gap'> <'column-gap'>?",
            relevance: 73,
            browsers: ["E16", "FF52", "S10.1", "C57", "O44"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/gap",
                },
            ],
            description: "The gap CSS property is a shorthand property for row-gap and column-gap specifying the gutters between grid rows and columns.",
        },
        {
            name: "hanging-punctuation",
            syntax: "none | [ first || [ force-end | allow-end ] || last ]",
            relevance: 50,
            browsers: ["S10"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation",
                },
            ],
            description: "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.",
        },
        {
            name: "hyphenate-character",
            syntax: "auto | <string>",
            relevance: 50,
            browsers: ["E106", "FF98", "S17", "C106", "O92"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/hyphenate-character",
                },
            ],
            description: "A hyphenate character used at the end of a line.",
        },
        {
            name: "hyphenate-limit-chars",
            syntax: "[ auto | <integer> ]{1,3}",
            relevance: 50,
            browsers: ["E109", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/hyphenate-limit-chars",
                },
            ],
            description: "The hyphenate-limit-chars CSS property specifies the minimum word length to allow hyphenation of words as well as the minimum number of characters before and after the hyphen.",
        },
        {
            name: "image-resolution",
            status: "experimental",
            syntax: "[ from-image || <resolution> ] && snap?",
            relevance: 50,
            description: "The image-resolution property specifies the intrinsic resolution of all raster images used in or on the element. It affects both content images (e.g. replaced elements and generated content) and decorative images (such as background-image). The intrinsic resolution of an image is used to determine the image’s intrinsic dimensions.",
        },
        {
            name: "initial-letter",
            syntax: "normal | [ <number> <integer>? ]",
            relevance: 50,
            browsers: ["E110", "S9", "C110", "O96"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/initial-letter",
                },
            ],
            description: "The initial-letter CSS property specifies styling for dropped, raised, and sunken initial letters.",
        },
        {
            name: "initial-letter-align",
            status: "experimental",
            syntax: "[ auto | alphabetic | hanging | ideographic ]",
            relevance: 50,
            description: "The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph.",
        },
        {
            name: "input-security",
            syntax: "auto | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
            ],
            relevance: 50,
            description: "Enables or disables the obscuring a sensitive test input.",
        },
        {
            name: "inset",
            syntax: "<'top'>{1,4}",
            relevance: 62,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inset",
                },
            ],
            description: "The inset CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "inset-block",
            syntax: "<'top'>{1,2}",
            relevance: 53,
            browsers: ["E87", "FF63", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inset-block",
                },
            ],
            description: "The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "inset-block-end",
            syntax: "<'top'>",
            relevance: 50,
            browsers: ["E87", "FF63", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inset-block-end",
                },
            ],
            description: "The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "inset-block-start",
            syntax: "<'top'>",
            relevance: 54,
            browsers: ["E87", "FF63", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inset-block-start",
                },
            ],
            description: "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "inset-inline",
            syntax: "<'top'>{1,2}",
            relevance: 53,
            browsers: ["E87", "FF63", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inset-inline",
                },
            ],
            description: "The inset-inline CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "inset-inline-end",
            syntax: "<'top'>",
            relevance: 54,
            browsers: ["E87", "FF63", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inset-inline-end",
                },
            ],
            description: "The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "inset-inline-start",
            syntax: "<'top'>",
            relevance: 55,
            browsers: ["E87", "FF63", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/inset-inline-start",
                },
            ],
            description: "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.",
        },
        {
            name: "interpolate-size",
            syntax: "numeric-only | allow-keywords",
            values: [
                {
                    name: "numeric-only",
                },
                {
                    name: "allow-keywords",
                },
            ],
            relevance: 50,
            browsers: ["C129", "O115"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/interpolate-size",
                },
            ],
            description: "The interpolate-size CSS property allows you to enable animations and transitions between a <length-percentage> value and an intrinsic size value such as auto, fit-content, or max-content.",
        },
        {
            name: "justify-tracks",
            status: "experimental",
            syntax: "[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#",
            relevance: 50,
            description: "The justify-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis",
        },
        {
            name: "line-clamp",
            syntax: "none | <integer>",
            relevance: 50,
            browsers: ["E17", "FF68", "S18.2", "C6", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp",
                },
            ],
            description: "The line-clamp property allows limiting the contents of a block container to the specified number of lines; remaining content is fragmented away and neither rendered nor measured. Optionally, it also allows inserting content into the last line box to indicate the continuity of truncated/interrupted content.",
        },
        {
            name: "line-height-step",
            status: "experimental",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "C60", "O47"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/line-height-step",
                },
            ],
            description: "The line-height-step CSS property defines the step units for line box heights. When the step unit is positive, line box heights are rounded up to the closest multiple of the unit. Negative values are invalid.",
        },
        {
            name: "margin-block",
            syntax: "<'margin-left'>{1,2}",
            relevance: 54,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-block",
                },
            ],
            description: "The margin-block CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.",
        },
        {
            name: "margin-inline",
            syntax: "<'margin-left'>{1,2}",
            relevance: 55,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-inline",
                },
            ],
            description: "The margin-inline CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.",
        },
        {
            name: "margin-trim",
            status: "experimental",
            syntax: "none | in-flow | all",
            values: [
                {
                    name: "none",
                },
                {
                    name: "in-flow",
                },
                {
                    name: "all",
                },
            ],
            relevance: 50,
            browsers: ["S16.4"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/margin-trim",
                },
            ],
            description: "The margin-trim property allows the container to trim the margins of its children where they adjoin the container’s edges.",
        },
        {
            name: "mask",
            syntax: "<mask-layer>#",
            relevance: 57,
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask",
                },
            ],
            description: "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points.",
        },
        {
            name: "mask-border",
            syntax: "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
            relevance: 50,
            browsers: ["E79", "S17.2", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-border",
                },
            ],
            description: "The mask-border CSS property lets you create a mask along the edge of an element's border.\n\nThis property is a shorthand for mask-border-source, mask-border-slice, mask-border-width, mask-border-outset, mask-border-repeat, and mask-border-mode. As with all shorthand properties, any omitted sub-values will be set to their initial value.",
        },
        {
            name: "mask-border-mode",
            syntax: "luminance | alpha",
            values: [
                {
                    name: "luminance",
                },
                {
                    name: "alpha",
                },
            ],
            relevance: 50,
            description: "The mask-border-mode CSS property specifies the blending mode used in a mask border.",
        },
        {
            name: "mask-border-outset",
            syntax: "[ <length> | <number> ]{1,4}",
            relevance: 50,
            browsers: ["E79", "S17.2", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-outset",
                },
            ],
            description: "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box.",
        },
        {
            name: "mask-border-repeat",
            syntax: "[ stretch | repeat | round | space ]{1,2}",
            relevance: 50,
            browsers: ["E79", "S17.2", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat",
                },
            ],
            description: "The mask-border-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.",
        },
        {
            name: "mask-border-slice",
            syntax: "<number-percentage>{1,4} fill?",
            relevance: 50,
            browsers: ["E79", "S17.2", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-slice",
                },
            ],
            description: "The mask-border-slice CSS property divides the image specified by mask-border-source into regions. These regions are used to form the components of an element's mask border.",
        },
        {
            name: "mask-border-source",
            syntax: "none | <image>",
            relevance: 50,
            browsers: ["E79", "S17.2", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-source",
                },
            ],
            description: "The mask-border-source CSS property specifies the source image used to create an element's mask border.\n\nThe mask-border-slice property is used to divide the source image into regions, which are then dynamically applied to the final mask border.",
        },
        {
            name: "mask-border-width",
            syntax: "[ <length-percentage> | <number> | auto ]{1,4}",
            relevance: 50,
            browsers: ["E79", "S17.2", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-width",
                },
            ],
            description: "The mask-border-width CSS property specifies the width of an element's mask border.",
        },
        {
            name: "mask-clip",
            syntax: "[ <geometry-box> | no-clip ]#",
            relevance: 50,
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-clip",
                },
            ],
            description: "The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.",
        },
        {
            name: "mask-composite",
            syntax: "<compositing-operator>#",
            relevance: 52,
            browsers: ["E120", "FF53", "S15.4", "C120", "O106"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/mask-composite",
                },
            ],
            description: "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it.",
        },
        {
            name: "masonry-auto-flow",
            status: "experimental",
            syntax: "[ pack | next ] || [ definite-first | ordered ]",
            relevance: 50,
            description: "The masonry-auto-flow CSS property modifies how items are placed when using masonry in CSS Grid Layout.",
        },
        {
            name: "math-depth",
            syntax: "auto-add | add(<integer>) | <integer>",
            relevance: 50,
            browsers: ["E109", "FF117", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/math-depth",
                },
            ],
            description: 'Describe a notion of "depth" for each element of a mathematical formula, with respect to the top-level container of that formula.',
        },
        {
            name: "math-shift",
            syntax: "normal | compact",
            values: [
                {
                    name: "normal",
                },
                {
                    name: "compact",
                },
            ],
            relevance: 50,
            browsers: ["E109", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/math-shift",
                },
            ],
            description: "Used for positioning superscript during the layout of MathML scripted elements.",
        },
        {
            name: "math-style",
            syntax: "normal | compact",
            values: [
                {
                    name: "normal",
                },
                {
                    name: "compact",
                },
            ],
            relevance: 50,
            browsers: ["E109", "FF117", "S14.1", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/math-style",
                },
            ],
            description: "The math-style property indicates whether MathML equations should render with normal or compact height.",
        },
        {
            name: "max-lines",
            status: "experimental",
            syntax: "none | <integer>",
            relevance: 50,
            description: "The max-lines property forces a break after a set number of lines",
        },
        {
            name: "offset",
            syntax: "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
            relevance: 50,
            browsers: ["E79", "FF72", "S16", "C55", "O42"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/offset",
                },
            ],
            description: "The offset CSS property is a shorthand property for animating an element along a defined path.",
        },
        {
            name: "offset-anchor",
            syntax: "auto | <position>",
            relevance: 50,
            browsers: ["E116", "FF72", "S16", "C116", "O102"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/offset-anchor",
                },
            ],
            description: "Defines an anchor point of the box positioned along the path. The anchor point specifies the point of the box which is to be considered as the point that is moved along the path.",
        },
        {
            name: "offset-distance",
            syntax: "<length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF72", "S16", "C55", "O42"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/offset-distance",
                },
            ],
            description: "The offset-distance CSS property specifies a position along an offset-path.",
        },
        {
            name: "offset-path",
            syntax: "none | <offset-path> || <coord-box>",
            relevance: 50,
            browsers: ["E79", "FF72", "S15.4", "C55", "O45"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/offset-path",
                },
            ],
            description: 'The offset-path CSS property specifies the offset path where the element gets positioned. The exact element’s position on the offset path is determined by the offset-distance property. An offset path is either a specified path with one or multiple sub-paths or the geometry of a not-styled basic shape. Each shape or path must define an initial position for the computed value of "0" for offset-distance and an initial direction which specifies the rotation of the object to the initial position.\n\nIn this specification, a direction (or rotation) of 0 degrees is equivalent to the direction of the positive x-axis in the object’s local coordinate system. In other words, a rotation of 0 degree points to the right side of the UA if the object and its ancestors have no transformation applied.',
        },
        {
            name: "offset-position",
            syntax: "normal | auto | <position>",
            relevance: 50,
            browsers: ["E116", "FF122", "S16", "C116", "O102"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/offset-position",
                },
            ],
            description: "Specifies the initial position of the offset path. If position is specified with static, offset-position would be ignored.",
        },
        {
            name: "offset-rotate",
            syntax: "[ auto | reverse ] || <angle>",
            relevance: 50,
            browsers: ["E79", "FF72", "S16", "C56", "O43"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/offset-rotate",
                },
            ],
            description: "The offset-rotate CSS property defines the direction of the element while positioning along the offset path.",
        },
        {
            name: "overflow-anchor",
            syntax: "auto | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "none",
                },
            ],
            relevance: 52,
            browsers: ["E79", "FF66", "Spreview", "C56", "O43"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow-anchor",
                },
            ],
            description: "The overflow-anchor CSS property provides a way to opt out browser scroll anchoring behavior which adjusts scroll position to minimize content shifts.",
        },
        {
            name: "overflow-block",
            syntax: "visible | hidden | clip | scroll | auto",
            values: [
                {
                    name: "visible",
                },
                {
                    name: "hidden",
                },
                {
                    name: "clip",
                },
                {
                    name: "scroll",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            browsers: ["FF69"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow-block",
                },
            ],
            description: "The overflow-block CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the block axis.",
        },
        {
            name: "overflow-clip-box",
            status: "nonstandard",
            syntax: "padding-box | content-box",
            values: [
                {
                    name: "padding-box",
                },
                {
                    name: "content-box",
                },
            ],
            relevance: 0,
            description: "The overflow-clip-box CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the overflow-clip-box-inline and overflow-clip-box-block properties.",
        },
        {
            name: "overflow-clip-margin",
            syntax: "<visual-box> || <length [0,∞]>",
            relevance: 50,
            browsers: ["E90", "FF102", "C90", "O76"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin",
                },
            ],
            description: "The overflow-clip-margin CSS property determines how far outside its bounds an element with overflow: clip may be painted before being clipped.",
        },
        {
            name: "overflow-inline",
            syntax: "visible | hidden | clip | scroll | auto",
            values: [
                {
                    name: "visible",
                },
                {
                    name: "hidden",
                },
                {
                    name: "clip",
                },
                {
                    name: "scroll",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            browsers: ["FF69"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overflow-inline",
                },
            ],
            description: "The overflow-inline CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the inline axis.",
        },
        {
            name: "overlay",
            status: "experimental",
            syntax: "none | auto",
            values: [
                {
                    name: "none",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            browsers: ["E117", "C117", "O103"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overlay",
                },
            ],
            description: 'The overlay CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal {{htmlelement("dialog")}} element) is actually rendered in the top layer. This property is only relevant within a list of transition-property values, and only if allow-discrete is set as the transition-behavior.',
        },
        {
            name: "overscroll-behavior",
            syntax: "[ contain | none | auto ]{1,2}",
            relevance: 50,
            browsers: ["E18", "FF59", "S16", "C63", "O50"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior",
                },
            ],
            description: "The overscroll-behavior CSS property is shorthand for the overscroll-behavior-x and overscroll-behavior-y properties, which allow you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached.",
        },
        {
            name: "overscroll-behavior-block",
            syntax: "contain | none | auto",
            values: [
                {
                    name: "contain",
                },
                {
                    name: "none",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            browsers: ["E79", "FF73", "S16", "C77", "O64"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block",
                },
            ],
            description: "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.",
        },
        {
            name: "overscroll-behavior-inline",
            syntax: "contain | none | auto",
            values: [
                {
                    name: "contain",
                },
                {
                    name: "none",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            browsers: ["E79", "FF73", "S16", "C77", "O64"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline",
                },
            ],
            description: "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.",
        },
        {
            name: "overscroll-behavior-x",
            syntax: "contain | none | auto",
            values: [
                {
                    name: "contain",
                },
                {
                    name: "none",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            browsers: ["E18", "FF59", "S16", "C63", "O50"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x",
                },
            ],
            description: "The overscroll-behavior-x CSS property is allows you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the x axis direction.",
        },
        {
            name: "overscroll-behavior-y",
            syntax: "contain | none | auto",
            values: [
                {
                    name: "contain",
                },
                {
                    name: "none",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            browsers: ["E18", "FF59", "S16", "C63", "O50"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y",
                },
            ],
            description: "The overscroll-behavior-y CSS property is allows you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the y axis direction.",
        },
        {
            name: "padding-block",
            syntax: "<'padding-left'>{1,2}",
            relevance: 56,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-block",
                },
            ],
            description: "The padding-block CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.",
        },
        {
            name: "padding-inline",
            syntax: "<'padding-left'>{1,2}",
            relevance: 57,
            browsers: ["E87", "FF66", "S14.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/padding-inline",
                },
            ],
            description: "The padding-inline CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.",
        },
        {
            name: "page",
            syntax: "auto | <custom-ident>",
            relevance: 50,
            browsers: ["E85", "FF110", "S13.1", "C85", "O71"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/page",
                },
            ],
            description: "The page CSS property is used to specify the named page, a specific type of page defined by the @page at-rule.",
        },
        {
            name: "place-content",
            syntax: "<'align-content'> <'justify-content'>?",
            relevance: 53,
            browsers: ["E79", "FF45", "S9", "C59", "O46"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/place-content",
                },
            ],
            description: "The place-content CSS shorthand property sets both the align-content and justify-content properties.",
        },
        {
            name: "place-items",
            syntax: "<'align-items'> <'justify-items'>?",
            relevance: 52,
            browsers: ["E79", "FF45", "S11", "C59", "O46"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/place-items",
                },
            ],
            description: "The CSS place-items shorthand property sets both the align-items and justify-items properties. The first value is the align-items property value, the second the justify-items one. If the second value is not present, the first value is also used for it.",
        },
        {
            name: "place-self",
            syntax: "<'align-self'> <'justify-self'>?",
            relevance: 53,
            browsers: ["E79", "FF45", "S11", "C59", "O46"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/place-self",
                },
            ],
            description: "The place-self CSS property is a shorthand property sets both the align-self and justify-self properties. The first value is the align-self property value, the second the justify-self one. If the second value is not present, the first value is also used for it.",
        },
        {
            name: "position-anchor",
            status: "experimental",
            syntax: "auto | <anchor-name>",
            relevance: 50,
            browsers: ["E125", "C125", "O111"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/position-anchor",
                },
            ],
            description: "The position-anchor property defines the default anchor specifier for all anchor functions on the element, allowing multiple elements to use the same set of anchor functions (and position options lists!) while changing which anchor element each is referring to.",
        },
        {
            name: "position-area",
            syntax: "none | <position-area>",
            relevance: 50,
            browsers: ["E129", "FF131", "C129", "O115"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/position-area",
                },
            ],
            description: "The position-area CSS property enables an anchor-positioned element to be positioned relative to the edges of its associated anchor element by placing the positioned element on one or more tiles of an implicit 3x3 grid, where the anchoring element is the center cell.",
        },
        {
            name: "position-try",
            status: "experimental",
            syntax: "<'position-try-order'>? <'position-try-fallbacks'>",
            relevance: 50,
            browsers: ["E125", "C125", "O111"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/position-try",
                },
            ],
            description: "This shorthand sets both position-try-options and position-try-order. If <'position-try-order'> is omitted, it’s set to the property’s initial value.",
        },
        {
            name: "position-try-fallbacks",
            status: "experimental",
            syntax: "none | [ [<dashed-ident> || <try-tactic>] | <'position-area'> ]#",
            relevance: 50,
            browsers: ["E128", "C128", "O114"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/position-try-fallbacks",
                },
            ],
            description: "The position-try-fallbacks CSS property enables you to specify a list of one or more alternative position try fallback options for anchor-positioned elements to be placed relative to their associated anchor elements. When the element would otherwise overflow its inset-modified containing block, the browser will try placing the positioned element in these different fallback positions, in the order provided, until it finds a value that stops it from overflowing its container or the viewport.",
        },
        {
            name: "position-try-order",
            status: "experimental",
            syntax: "normal | <try-size>",
            relevance: 50,
            browsers: ["E125", "C125", "O111"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/position-try-order",
                },
            ],
            description: "This property specifies the order in which the position options list will be tried.",
        },
        {
            name: "position-visibility",
            status: "experimental",
            syntax: "always | [ anchors-valid || anchors-visible || no-overflow ]",
            relevance: 50,
            browsers: ["E125", "C125", "O111"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/position-visibility",
                },
            ],
            description: "There are times when an element’s anchors are not appropriate for positioning the element with, and it would be better to simply not display the element at all. position-visibility provides several conditions where this could be the case.",
        },
        {
            name: "print-color-adjust",
            syntax: "economy | exact",
            values: [
                {
                    name: "economy",
                },
                {
                    name: "exact",
                },
            ],
            relevance: 50,
            browsers: ["E79", "FF97", "S15.4", "C17", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/print-color-adjust",
                },
            ],
            description: "Defines what optimization the user agent is allowed to do when adjusting the appearance for an output device.",
        },
        {
            name: "r",
            syntax: "<length> | <percentage>",
            relevance: 52,
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/r",
                },
            ],
            description: "The r CSS property defines the radius of a circle. It can only be used with the SVG circle element. If present, it overrides the circle's r attribute.",
        },
        {
            name: "rotate",
            syntax: "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
            relevance: 51,
            browsers: ["E104", "FF72", "S14.1", "C104", "O90"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/rotate",
                },
            ],
            description: "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.",
        },
        {
            name: "row-gap",
            syntax: "normal | <length-percentage>",
            relevance: 59,
            browsers: ["E16", "FF52", "S10.1", "C47", "O34"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/row-gap",
                },
            ],
            description: "The row-gap CSS property specifies the gutter between grid rows.",
        },
        {
            name: "ruby-merge",
            status: "experimental",
            syntax: "separate | collapse | auto",
            values: [
                {
                    name: "separate",
                },
                {
                    name: "collapse",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 50,
            description: "This property controls how ruby annotation boxes should be rendered when there are more than one in a ruby container box: whether each pair should be kept separate, the annotations should be collapsed and rendered as a group, or the separation should be determined based on the space available.",
        },
        {
            name: "rx",
            syntax: "<length> | <percentage>",
            relevance: 50,
            browsers: ["E80", "FF72", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/rx",
                },
            ],
            description: "The rx CSS property defines the x-axis, or horizontal, radius of an SVG ellipse and the horizontal curve of the corners of an SVG rect rectangle. If present, it overrides the shape's rx attribute.",
        },
        {
            name: "ry",
            syntax: "<length> | <percentage>",
            relevance: 50,
            browsers: ["E80", "FF72", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/ry",
                },
            ],
            description: "The ry CSS property defines the y-axis, or vertical, radius of an SVG ellipse and the vertical curve of the corners of an SVG rect rectangle. If present, it overrides the shape's ry attribute.",
        },
        {
            name: "scale",
            syntax: "none | [ <number> | <percentage> ]{1,3}",
            relevance: 52,
            browsers: ["E104", "FF72", "S14.1", "C104", "O90"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scale",
                },
            ],
            description: "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.",
        },
        {
            name: "scrollbar-color",
            syntax: "auto | <color>{2}",
            relevance: 54,
            browsers: ["E121", "FF64", "C121", "O107"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scrollbar-color",
                },
            ],
            description: "The scrollbar-color CSS property sets the color of the scrollbar track and thumb.",
        },
        {
            name: "scrollbar-gutter",
            syntax: "auto | stable && both-edges?",
            relevance: 52,
            browsers: ["E94", "FF97", "S18.2", "C94", "O80"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter",
                },
            ],
            description: "The scrollbar-gutter CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.",
        },
        {
            name: "scrollbar-width",
            syntax: "auto | thin | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "thin",
                },
                {
                    name: "none",
                },
            ],
            relevance: 66,
            browsers: ["E121", "FF64", "S18.2", "C121", "O107"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scrollbar-width",
                },
            ],
            description: "The scrollbar-width property allows the author to set the maximum thickness of an element’s scrollbars when they are shown. ",
        },
        {
            name: "scroll-margin",
            syntax: "<length>{1,4}",
            relevance: 50,
            browsers: ["E79", "FF90", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin",
                },
            ],
            description: "The scroll-margin property is a shorthand property which sets all of the scroll-margin longhands, assigning values much like the margin property does for the margin-* longhands.",
        },
        {
            name: "scroll-margin-block",
            syntax: "<length>{1,2}",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block",
                },
            ],
            description: "The scroll-margin-block property is a shorthand property which sets the scroll-margin longhands in the block dimension.",
        },
        {
            name: "scroll-margin-block-start",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start",
                },
            ],
            description: "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-margin-block-end",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end",
                },
            ],
            description: "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-margin-bottom",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom",
                },
            ],
            description: "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-margin-inline",
            syntax: "<length>{1,2}",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline",
                },
            ],
            description: "The scroll-margin-inline property is a shorthand property which sets the scroll-margin longhands in the inline dimension.",
        },
        {
            name: "scroll-margin-inline-start",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start",
                },
            ],
            description: "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-margin-inline-end",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end",
                },
            ],
            description: "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-margin-left",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left",
                },
            ],
            description: "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-margin-right",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right",
                },
            ],
            description: "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-margin-top",
            syntax: "<length>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top",
                },
            ],
            description: "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.",
        },
        {
            name: "scroll-padding",
            syntax: "[ auto | <length-percentage> ]{1,4}",
            relevance: 52,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding",
                },
            ],
            description: "The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-* longhands.",
        },
        {
            name: "scroll-padding-block",
            syntax: "[ auto | <length-percentage> ]{1,2}",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block",
                },
            ],
            description: "The scroll-padding-block property is a shorthand property which sets the scroll-padding longhands for the block dimension.",
        },
        {
            name: "scroll-padding-block-start",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start",
                },
            ],
            description: "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-padding-block-end",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end",
                },
            ],
            description: "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-padding-bottom",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom",
                },
            ],
            description: "The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-padding-inline",
            syntax: "[ auto | <length-percentage> ]{1,2}",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline",
                },
            ],
            description: "The scroll-padding-inline property is a shorthand property which sets the scroll-padding longhands for the inline dimension.",
        },
        {
            name: "scroll-padding-inline-start",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start",
                },
            ],
            description: "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-padding-inline-end",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S15", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end",
                },
            ],
            description: "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-padding-left",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left",
                },
            ],
            description: "The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-padding-right",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right",
                },
            ],
            description: "The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-padding-top",
            syntax: "auto | <length-percentage>",
            relevance: 50,
            browsers: ["E79", "FF68", "S14.1", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top",
                },
            ],
            description: "The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.",
        },
        {
            name: "scroll-snap-align",
            syntax: "[ none | start | end | center ]{1,2}",
            relevance: 53,
            browsers: ["E79", "FF68", "S11", "C69", "O56"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align",
                },
            ],
            description: "The scroll-snap-align property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.",
        },
        {
            name: "scroll-snap-stop",
            syntax: "normal | always",
            values: [
                {
                    name: "normal",
                },
                {
                    name: "always",
                },
            ],
            relevance: 51,
            browsers: ["E79", "FF103", "S15", "C75", "O62"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop",
                },
            ],
            description: 'The scroll-snap-stop CSS property defines whether the scroll container is allowed to "pass over" possible snap positions.',
        },
        {
            name: "scroll-snap-type-x",
            status: "obsolete",
            syntax: "none | mandatory | proximity",
            values: [
                {
                    name: "none",
                },
                {
                    name: "mandatory",
                },
                {
                    name: "proximity",
                },
            ],
            relevance: 0,
            description: "The scroll-snap-type-x CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent.",
        },
        {
            name: "scroll-snap-type-y",
            status: "obsolete",
            syntax: "none | mandatory | proximity",
            values: [
                {
                    name: "none",
                },
                {
                    name: "mandatory",
                },
                {
                    name: "proximity",
                },
            ],
            relevance: 0,
            description: "The scroll-snap-type-y CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent.",
        },
        {
            name: "scroll-timeline",
            status: "experimental",
            syntax: "[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#",
            relevance: 50,
            browsers: ["E115", "FF111", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline",
                },
            ],
            description: "Defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.",
        },
        {
            name: "scroll-timeline-axis",
            status: "experimental",
            syntax: "[ block | inline | x | y ]#",
            relevance: 50,
            browsers: ["E115", "FF111", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis",
                },
            ],
            description: "Specifies the scrollbar that will be used to provide the timeline for a scroll-timeline animation",
        },
        {
            name: "scroll-timeline-name",
            status: "experimental",
            syntax: "none | <dashed-ident>#",
            relevance: 50,
            browsers: ["E115", "FF111", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name",
                },
            ],
            description: "Defines a name that can be used to identify an element as the source of a scroll-timeline.",
        },
        {
            name: "text-combine-upright",
            syntax: "none | all | [ digits <integer>? ]",
            relevance: 50,
            browsers: ["E79", "FF48", "S15.4", "C48", "IE11", "O35"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-combine-upright",
                },
            ],
            description: "The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n\nThis is used to produce an effect that is known as tate-chū-yoko (縦中横) in Japanese, or as 直書橫向 in Chinese.",
        },
        {
            name: "text-decoration-skip",
            status: "experimental",
            syntax: "none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]",
            relevance: 52,
            browsers: ["S12.1", "C57", "O44"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip",
                },
            ],
            description: "The text-decoration-skip CSS property specifies what parts of the element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.",
        },
        {
            name: "text-decoration-skip-ink",
            syntax: "auto | all | none",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "all",
                },
                {
                    name: "none",
                },
            ],
            relevance: 51,
            browsers: ["E79", "FF70", "S15.4", "C64", "O50"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink",
                },
            ],
            description: "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.",
        },
        {
            name: "text-decoration-thickness",
            syntax: "auto | from-font | <length> | <percentage> ",
            relevance: 51,
            browsers: ["E89", "FF70", "S12.1", "C89", "O75"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness",
                },
            ],
            description: "The text-decoration-thickness CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.",
        },
        {
            name: "text-emphasis",
            syntax: "<'text-emphasis-style'> || <'text-emphasis-color'>",
            relevance: 50,
            browsers: ["E99", "FF46", "S7", "C99", "O85"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis",
                },
            ],
            description: "The text-emphasis CSS property is a shorthand property for setting text-emphasis-style and text-emphasis-color in one declaration. This property will apply the specified emphasis mark to each character of the element's text, except separator characters, like spaces,  and control characters.",
        },
        {
            name: "text-emphasis-color",
            syntax: "<color>",
            relevance: 50,
            browsers: ["E99", "FF46", "S7", "C99", "O85"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color",
                },
            ],
            description: "The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document. This value can also be set and reset using the text-emphasis shorthand.",
        },
        {
            name: "text-emphasis-position",
            syntax: "auto | [ over | under ] && [ right | left ]?",
            relevance: 50,
            browsers: ["E99", "FF46", "S7", "C99", "O85"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position",
                },
            ],
            description: "The text-emphasis-position CSS property describes where emphasis marks are drawn at. The effect of emphasis marks on the line height is the same as for ruby text: if there isn't enough place, the line height is increased.",
        },
        {
            name: "text-emphasis-style",
            syntax: "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
            relevance: 50,
            browsers: ["E99", "FF46", "S7", "C99", "O85"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style",
                },
            ],
            description: "The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand.",
        },
        {
            name: "text-size-adjust",
            status: "experimental",
            syntax: "none | auto | <percentage>",
            relevance: 59,
            browsers: ["E79", "C54", "O41"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-size-adjust",
                },
            ],
            description: "The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.",
        },
        {
            name: "text-spacing-trim",
            status: "experimental",
            syntax: "space-all | normal | space-first | trim-start | trim-both | trim-all | auto",
            values: [
                {
                    name: "space-all",
                },
                {
                    name: "normal",
                },
                {
                    name: "space-first",
                },
                {
                    name: "trim-start",
                },
                {
                    name: "trim-both",
                },
                {
                    name: "trim-all",
                },
                {
                    name: "auto",
                },
            ],
            relevance: 51,
            browsers: ["E123", "C123", "O109"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-spacing-trim",
                },
            ],
            description: "The text-spacing-trim CSS property controls the internal spacing set on Chinese/Japanese/Korean (CJK) punctuation characters between adjacent characters (kerning) and at the start or end of text lines.",
        },
        {
            name: "text-underline-offset",
            syntax: "auto | <length> | <percentage> ",
            relevance: 52,
            browsers: ["E87", "FF70", "S12.1", "C87", "O73"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-underline-offset",
                },
            ],
            description: "The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position.",
        },
        {
            name: "text-wrap",
            syntax: "<'text-wrap-mode> || <'text-wrap-style'>",
            relevance: 56,
            browsers: ["E114", "FF121", "S17.4", "C114", "O100"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-wrap",
                },
            ],
            description: "The text-wrap CSS property controls how text inside an element is wrapped.",
        },
        {
            name: "text-wrap-mode",
            syntax: "auto | wrap | nowrap",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "wrap",
                },
                {
                    name: "nowrap",
                },
            ],
            relevance: 50,
            browsers: ["FF124", "S17.4"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-wrap-mode",
                },
            ],
            description: 'The text-wrap-mode CSS property controls whether the text inside an element is wrapped. The different values provide alternate ways of wrapping the content of a block element. It can also be set, and reset, using the {{CSSXRef("text-wrap")}} shorthand.',
        },
        {
            name: "text-wrap-style",
            syntax: "auto | balance | stable | pretty",
            values: [
                {
                    name: "auto",
                },
                {
                    name: "balance",
                },
                {
                    name: "stable",
                },
                {
                    name: "pretty",
                },
            ],
            relevance: 50,
            browsers: ["E130", "FF124", "S17.5", "C130"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/text-wrap-style",
                },
            ],
            description: 'The text-wrap-style CSS property controls how text inside an element is wrapped. The different values provide alternate ways of wrapping the content of a block element. It can also be set, and reset, using the {{CSSXRef("text-wrap")}} shorthand.',
        },
        {
            name: "timeline-scope",
            status: "experimental",
            syntax: "none | <dashed-ident>#",
            relevance: 50,
            browsers: ["E116", "C116", "O102"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/timeline-scope",
                },
            ],
            description: "The timeline-scope CSS property modifies the scope of a named animation timeline.",
        },
        {
            name: "transform-box",
            syntax: "content-box | border-box | fill-box | stroke-box | view-box",
            values: [
                {
                    name: "content-box",
                },
                {
                    name: "border-box",
                },
                {
                    name: "fill-box",
                },
                {
                    name: "stroke-box",
                },
                {
                    name: "view-box",
                },
            ],
            relevance: 50,
            browsers: ["E79", "FF55", "S11", "C64", "O51"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transform-box",
                },
            ],
            description: "The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate.",
        },
        {
            name: "transition-behavior",
            syntax: "<transition-behavior-value>#",
            relevance: 50,
            browsers: ["E117", "FF129", "S17.4", "C117", "O103"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/transition-behavior",
                },
            ],
            description: "The transition-behavior CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.",
        },
        {
            name: "translate",
            syntax: "none | <length-percentage> [ <length-percentage> <length>? ]?",
            relevance: 50,
            browsers: ["E104", "FF72", "S14.1", "C104", "O90"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/translate",
                },
            ],
            description: "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.",
        },
        {
            name: "vector-effect",
            syntax: "none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position",
            values: [
                {
                    name: "none",
                },
                {
                    name: "non-scaling-stroke",
                },
                {
                    name: "non-scaling-size",
                },
                {
                    name: "non-rotation",
                },
                {
                    name: "fixed-position",
                },
            ],
            relevance: 50,
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/vector-effect",
                },
            ],
            description: "The vector-effect CSS property suppresses specific transformation effects in SVG, thus permitting effects like a road on a map staying the same width no matter how the map is zoomed, or allowing a diagram key to retain its position and size regardless of other transforms. It can only be used with SVG elements that accept the vector-effect attribute. When used, the CSS value overrides any values of the element's vector-effect attribute.",
        },
        {
            name: "view-timeline",
            status: "experimental",
            syntax: "[ <'view-timeline-name'> <'view-timeline-axis'>? ]#",
            relevance: 50,
            browsers: ["E115", "FF114", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/view-timeline",
                },
            ],
            description: "The view-timeline CSS shorthand property is used to define a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject.",
        },
        {
            name: "view-timeline-axis",
            status: "experimental",
            syntax: "[ block | inline | x | y ]#",
            relevance: 50,
            browsers: ["E115", "FF114", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis",
                },
            ],
            description: "The view-timeline-axis CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a named view progress timeline animation, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline-axis is set on the subject. See CSS scroll-driven animations for more details.",
        },
        {
            name: "view-timeline-inset",
            status: "experimental",
            syntax: "[ [ auto | <length-percentage> ]{1,2} ]#",
            relevance: 50,
            browsers: ["E115", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset",
                },
            ],
            description: "The view-timeline-inset CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a named view progress timeline animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.",
        },
        {
            name: "view-timeline-name",
            status: "experimental",
            syntax: "none | <dashed-ident>#",
            relevance: 50,
            browsers: ["E115", "FF111", "C115", "O101"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/view-timeline-name",
                },
            ],
            description: "The view-timeline-name CSS property is used to define the name of a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject.",
        },
        {
            name: "view-transition-name",
            syntax: "none | <custom-ident>",
            relevance: 50,
            browsers: ["E111", "S18", "C111", "O97"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/view-transition-name",
                },
            ],
            description: "The view-transition-name CSS property provides the selected element with a distinct identifying name (a custom-ident) and causes it to participate in a separate view transition from the root view transition — or no view transition if the none value is specified.",
        },
        {
            name: "white-space",
            syntax: "normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]",
            relevance: 89,
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O4"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/white-space",
                },
            ],
            description: "Specifies how whitespace is handled in an element.",
        },
        {
            name: "white-space-collapse",
            syntax: "collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces",
            values: [
                {
                    name: "collapse",
                },
                {
                    name: "discard",
                },
                {
                    name: "preserve",
                },
                {
                    name: "preserve-breaks",
                },
                {
                    name: "preserve-spaces",
                },
                {
                    name: "break-spaces",
                },
            ],
            relevance: 50,
            browsers: ["E114", "FF124", "S17.4", "C114", "O100"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/white-space-collapse",
                },
            ],
            description: "The white-space-collapse CSS property controls how white space inside an element is collapsed.",
        },
        {
            name: "x",
            syntax: "<length> | <percentage>",
            relevance: 51,
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/x",
                },
            ],
            description: "The x CSS property defines the x-axis coordinate of the top left corner of the SVG rect shape, image image, foreignObject viewport or nested svg viewport relative to the nearest <svg> ancestor's user coordinate system. If present, it overrides the element's x attribute.",
        },
        {
            name: "y",
            syntax: "<length> | <percentage>",
            relevance: 51,
            browsers: ["E80", "FF72", "S13.1", "C80", "O67"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/y",
                },
            ],
            description: "The y CSS property defines the y-axis coordinate of the top left corner of the SVG rect shape, image image, foreignObject viewport and nested svg viewport relative to the nearest <svg> ancestor's user coordinate system. If present, it overrides the element's y attribute.",
        },
        {
            name: "speak-as",
            atRule: "@counter-style",
            syntax: "auto | bullets | numbers | words | spell-out | <counter-style-name>",
            relevance: 50,
            browsers: ["S11.1"],
            description: "The speak-as descriptor specifies how a counter symbol constructed with a given @counter-style will be represented in the spoken form. For example, an author can specify a counter symbol to be either spoken as its numerical value or just represented with an audio cue.",
        },
        {
            name: "base-palette",
            atRule: "@font-palette-values",
            syntax: "light | dark | <integer [0,∞]>",
            relevance: 50,
            description: "The base-palette CSS descriptor is used to specify the name or index of a pre-defined palette to be used for creating a new palette. If the specified base-palette does not exist, then the palette defined at index 0 will be used.",
        },
        {
            name: "override-colors",
            atRule: "@font-palette-values",
            syntax: "[ <integer [0,∞]> <absolute-color-base> ]#",
            relevance: 50,
            description: "The override-colors CSS descriptor is used to override colors in the chosen base-palette for a color font.",
        },
        {
            name: "ascent-override",
            atRule: "@font-face",
            status: "experimental",
            syntax: "normal | <percentage>",
            relevance: 50,
            description: "Describes the ascent metric of a font.",
        },
        {
            name: "descent-override",
            atRule: "@font-face",
            status: "experimental",
            syntax: "normal | <percentage>",
            relevance: 50,
            description: "Describes the descent metric of a font.",
        },
        {
            name: "font-display",
            atRule: "@font-face",
            status: "experimental",
            syntax: "[ auto | block | swap | fallback | optional ]",
            relevance: 74,
            description: "The font-display descriptor determines how a font face is displayed based on whether and when it is downloaded and ready to use.",
        },
        {
            name: "line-gap-override",
            atRule: "@font-face",
            status: "experimental",
            syntax: "normal | <percentage>",
            relevance: 50,
            description: "Describes the line-gap metric of a font.",
        },
        {
            name: "size-adjust",
            atRule: "@font-face",
            status: "experimental",
            syntax: "<percentage>",
            relevance: 50,
            description: "A multiplier for glyph outlines and metrics of a font.",
        },
        {
            name: "bleed",
            atRule: "@page",
            syntax: "auto | <length>",
            relevance: 50,
            description: "The bleed CSS at-rule descriptor, used with the @page at-rule, specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled using the marks property.",
        },
        {
            name: "marks",
            atRule: "@page",
            syntax: "none | [ crop || cross ]",
            relevance: 50,
            description: "The marks CSS at-rule descriptor, used with the @page at-rule, adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets.",
        },
        {
            name: "page-orientation",
            atRule: "@page",
            syntax: "upright | rotate-left | rotate-right ",
            relevance: 51,
            description: "The page-orientation CSS descriptor for the @page at-rule controls the rotation of a printed page. It handles the flow of content across pages when the orientation of a page is changed. This behavior differs from the size descriptor in that a user can define the direction in which to rotate the page.",
        },
        {
            name: "syntax",
            atRule: "@property",
            status: "experimental",
            syntax: "<string>",
            relevance: 50,
            description: "Specifies the syntax of the custom property registration represented by the @property rule, controlling how the property’s value is parsed at computed value time.",
        },
        {
            name: "inherits",
            atRule: "@property",
            status: "experimental",
            syntax: "true | false",
            values: [
                {
                    name: "true",
                },
                {
                    name: "false",
                },
            ],
            relevance: 50,
            description: "Specifies the inherit flag of the custom property registration represented by the @property rule, controlling whether or not the property inherits by default.",
        },
        {
            name: "initial-value",
            atRule: "@property",
            status: "experimental",
            syntax: "<declaration-value>?",
            relevance: 50,
            description: "Specifies the initial value of the custom property registration represented by the @property rule, controlling the property’s initial value.",
        },
    ],
    atDirectives: [
        {
            name: "@charset",
            browsers: ["E12", "FF1.5", "S4", "C2", "IE5.5", "O9"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@charset",
                },
            ],
            description: "Defines character set of the document.",
        },
        {
            name: "@counter-style",
            browsers: ["E91", "FF33", "S17", "C91", "O77"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@counter-style",
                },
            ],
            description: "Defines a custom counter style.",
        },
        {
            name: "@font-face",
            browsers: ["E12", "FF3.5", "S3.1", "C1", "IE4", "O10"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@font-face",
                },
            ],
            description: "Allows for linking to fonts that are automatically activated when needed. This permits authors to work around the limitation of 'web-safe' fonts, allowing for consistent rendering independent of the fonts available in a given user's environment.",
        },
        {
            name: "@font-feature-values",
            browsers: ["E111", "FF34", "S9.1", "C111", "O97"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@font-feature-values",
                },
            ],
            description: "Defines named values for the indices used to select alternate glyphs for a given font family.",
        },
        {
            name: "@import",
            browsers: ["E12", "FF1", "S1", "C1", "IE5.5", "O3.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@import",
                },
            ],
            description: "Includes content of another file.",
        },
        {
            name: "@keyframes",
            browsers: ["E12", "FF16", "S9", "C43", "IE10", "O30"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@keyframes",
                },
            ],
            description: "Defines set of animation key frames.",
        },
        {
            name: "@layer",
            browsers: ["E99", "FF97", "S15.4", "C99", "O85"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@layer",
                },
            ],
            description: "Declare a cascade layer and the order of precedence in case of multiple cascade layers.",
        },
        {
            name: "@media",
            browsers: ["E12", "FF1", "S3", "C1", "IE6", "O9.2"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@media",
                },
            ],
            description: "Defines a stylesheet for a particular media type.",
        },
        {
            name: "@-moz-document",
            browsers: ["FF1.8"],
            description: "Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document.",
        },
        {
            name: "@-moz-keyframes",
            browsers: ["FF5"],
            description: "Defines set of animation key frames.",
        },
        {
            name: "@-ms-viewport",
            browsers: ["E", "IE10"],
            description: "Specifies the size, zoom factor, and orientation of the viewport.",
        },
        {
            name: "@namespace",
            browsers: ["E12", "FF1", "S1", "C1", "IE9", "O8"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@namespace",
                },
            ],
            description: "Declares a prefix and associates it with a namespace name.",
        },
        {
            name: "@-o-keyframes",
            browsers: ["O12"],
            description: "Defines set of animation key frames.",
        },
        {
            name: "@-o-viewport",
            browsers: ["O11"],
            description: "Specifies the size, zoom factor, and orientation of the viewport.",
        },
        {
            name: "@page",
            browsers: ["E12", "FF19", "C2", "IE8", "O6"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@page",
                },
            ],
            description: "Directive defines various page parameters.",
        },
        {
            name: "@property",
            browsers: ["E85", "FF128", "S16.4", "C85", "O71"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@property",
                },
            ],
            description: "Describes the aspect of custom properties and variables.",
        },
        {
            name: "@supports",
            browsers: ["E12", "FF22", "S9", "C28", "O12.1"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/@supports",
                },
            ],
            description: "A conditional group rule whose condition tests whether the user agent supports CSS property:value pairs.",
        },
        {
            name: "@-webkit-keyframes",
            browsers: ["C", "S4"],
            description: "Defines set of animation key frames.",
        },
    ],
    pseudoClasses: [
        {
            name: ":active",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:active",
                },
            ],
            description: "Applies while an element is being activated by the user. For example, between the times the user presses the mouse button and releases it.",
        },
        {
            name: ":any-link",
            browsers: ["E79", "FF50", "S9", "C65", "O52"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:any-link",
                },
            ],
            description: "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links.",
        },
        {
            name: ":checked",
            browsers: ["E12", "FF1", "S3.1", "C1", "IE9", "O9"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:checked",
                },
            ],
            description: "Radio and checkbox elements can be toggled by the user. Some menu items are 'checked' when the user selects them. When such elements are toggled 'on' the :checked pseudo-class applies.",
        },
        {
            name: ":corner-present",
            browsers: ["C", "S5"],
            description: "Non-standard. Indicates whether or not a scrollbar corner is present.",
        },
        {
            name: ":decrement",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will decrement the view's position when used.",
        },
        {
            name: ":default",
            browsers: ["E79", "FF4", "S5", "C10", "O10"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:default",
                },
            ],
            description: "Applies to the one or more UI elements that are the default among a set of similar elements. Typically applies to context menu items, buttons, and select lists/menus.",
        },
        {
            name: ":disabled",
            browsers: ["E12", "FF1", "S3.1", "C1", "IE9", "O9"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:disabled",
                },
            ],
            description: "Represents user interface elements that are in a disabled state; such elements have a corresponding enabled state.",
        },
        {
            name: ":double-button",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed together at the same end of the scrollbar.",
        },
        {
            name: ":empty",
            browsers: ["E12", "FF1", "S3.1", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:empty",
                },
            ],
            description: "Represents an element that has no children at all.",
        },
        {
            name: ":enabled",
            browsers: ["E12", "FF1", "S3.1", "C1", "IE9", "O9"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:enabled",
                },
            ],
            description: "Represents user interface elements that are in an enabled state; such elements have a corresponding disabled state.",
        },
        {
            name: ":end",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed after the thumb.",
        },
        {
            name: ":first",
            browsers: ["E12", "FF116", "S6", "C18", "IE8", "O9.2"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:first",
                },
            ],
            description: "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context.",
        },
        {
            name: ":first-child",
            browsers: ["E12", "FF3", "S3.1", "C4", "IE7", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:first-child",
                },
            ],
            description: "Same as :nth-child(1). Represents an element that is the first child of some other element.",
        },
        {
            name: ":first-of-type",
            browsers: ["E12", "FF3.5", "S3.1", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:first-of-type",
                },
            ],
            description: "Same as :nth-of-type(1). Represents an element that is the first sibling of its type in the list of children of its parent element.",
        },
        {
            name: ":focus",
            browsers: ["E12", "FF1", "S1", "C1", "IE8", "O7"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:focus",
                },
            ],
            description: "Applies while an element has the focus (accepts keyboard or mouse events, or other forms of input).",
        },
        {
            name: ":fullscreen",
            browsers: ["E12", "FF64", "S16.4", "C71", "IE11", "O58"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:fullscreen",
                },
            ],
            description: "Matches any element that has its fullscreen flag set.",
        },
        {
            name: ":future",
            browsers: ["E79", "S7", "C23", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:future",
                },
            ],
            description: "Represents any element that is defined to occur entirely after a :current element.",
        },
        {
            name: ":horizontal",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to any scrollbar pieces that have a horizontal orientation.",
        },
        {
            name: ":host",
            browsers: ["E79", "FF63", "S10", "C54", "O41"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:host",
                },
            ],
            description: "When evaluated in the context of a shadow tree, matches the shadow tree's host element.",
        },
        {
            name: ":host()",
            browsers: ["C35", "O22"],
            description: "When evaluated in the context of a shadow tree, it matches the shadow tree's host element if the host element, in its normal context, matches the selector argument.",
        },
        {
            name: ":host-context()",
            browsers: ["C35", "O22"],
            description: "Tests whether there is an ancestor, outside the shadow tree, which matches a particular selector.",
        },
        {
            name: ":hover",
            browsers: ["E12", "FF1", "S2", "C1", "IE4", "O4"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:hover",
                },
            ],
            description: "Applies while the user designates an element with a pointing device, but does not necessarily activate it. For example, a visual user agent could apply this pseudo-class when the cursor (mouse pointer) hovers over a box generated by the element.",
        },
        {
            name: ":increment",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will increment the view's position when used.",
        },
        {
            name: ":indeterminate",
            browsers: ["E12", "FF2", "S3", "C1", "IE10", "O9"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:indeterminate",
                },
            ],
            description: "Applies to UI elements whose value is in an indeterminate state.",
        },
        {
            name: ":in-range",
            browsers: ["E13", "FF29", "S5.1", "C10", "O11"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:in-range",
                },
            ],
            description: "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes.",
        },
        {
            name: ":invalid",
            browsers: ["E12", "FF4", "S5", "C10", "IE10", "O10"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:invalid",
                },
            ],
            description: "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification.",
        },
        {
            name: ":lang()",
            browsers: ["E", "C", "FF1", "IE8", "O8", "S3"],
            description: "Represents an element that is in language specified.",
        },
        {
            name: ":last-child",
            browsers: ["E12", "FF1", "S3.1", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:last-child",
                },
            ],
            description: "Same as :nth-last-child(1). Represents an element that is the last child of some other element.",
        },
        {
            name: ":last-of-type",
            browsers: ["E12", "FF3.5", "S3.1", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:last-of-type",
                },
            ],
            description: "Same as :nth-last-of-type(1). Represents an element that is the last sibling of its type in the list of children of its parent element.",
        },
        {
            name: ":left",
            browsers: ["E12", "S5", "C6", "IE8", "O9.2"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:left",
                },
            ],
            description: "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context.",
        },
        {
            name: ":link",
            browsers: ["E12", "FF1", "S1", "C1", "IE3", "O3.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:link",
                },
            ],
            description: "Applies to links that have not yet been visited.",
        },
        {
            name: ":matches()",
            browsers: ["S9"],
            description: "Takes a selector list as its argument. It represents an element that is represented by its argument.",
        },
        {
            name: ":-moz-any()",
            browsers: ["FF4"],
            description: "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches().",
        },
        {
            name: ":-moz-any-link",
            browsers: ["FF1"],
            description: "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links.",
        },
        {
            name: ":-moz-broken",
            browsers: ["FF3"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:-moz-broken",
                },
            ],
            description: "Non-standard. Matches elements representing broken images.",
        },
        {
            name: ":-moz-drag-over",
            browsers: ["FF1"],
            description: "Non-standard. Matches elements when a drag-over event applies to it.",
        },
        {
            name: ":-moz-first-node",
            browsers: ["FF72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:-moz-first-node",
                },
            ],
            description: "Non-standard. Represents an element that is the first child node of some other element.",
        },
        {
            name: ":-moz-focusring",
            browsers: ["FF4"],
            description: "Non-standard. Matches an element that has focus and focus ring drawing is enabled in the browser.",
        },
        {
            name: ":-moz-full-screen",
            browsers: ["FF9"],
            description: "Matches any element that has its fullscreen flag set. Standardized as :fullscreen.",
        },
        {
            name: ":-moz-last-node",
            browsers: ["FF72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:-moz-last-node",
                },
            ],
            description: "Non-standard. Represents an element that is the last child node of some other element.",
        },
        {
            name: ":-moz-loading",
            browsers: ["FF3"],
            description: "Non-standard. Matches elements, such as images, that haven't started loading yet.",
        },
        {
            name: ":-moz-only-whitespace",
            browsers: ["FF1"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:-moz-only-whitespace",
                },
            ],
            description: "The same as :empty, except that it additionally matches elements that only contain code points affected by whitespace processing. Standardized as :blank.",
        },
        {
            name: ":-moz-placeholder",
            browsers: ["FF4"],
            description: "Deprecated. Represents placeholder text in an input field. Use ::-moz-placeholder for Firefox 19+.",
        },
        {
            name: ":-moz-submit-invalid",
            browsers: ["FF88"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:-moz-submit-invalid",
                },
            ],
            description: "Non-standard. Represents any submit button when the contents of the associated form are not valid.",
        },
        {
            name: ":-moz-suppressed",
            browsers: ["FF3"],
            description: "Non-standard. Matches elements representing images that have been blocked from loading.",
        },
        {
            name: ":-moz-ui-invalid",
            browsers: ["FF4"],
            description: "Non-standard. Represents any validated form element whose value isn't valid ",
        },
        {
            name: ":-moz-ui-valid",
            browsers: ["FF4"],
            description: "Non-standard. Represents any validated form element whose value is valid ",
        },
        {
            name: ":-moz-user-disabled",
            browsers: ["FF3"],
            description: "Non-standard. Matches elements representing images that have been disabled due to the user's preferences.",
        },
        {
            name: ":-moz-window-inactive",
            browsers: ["FF4"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:-moz-window-inactive",
                },
            ],
            description: "Non-standard. Matches elements in an inactive window.",
        },
        {
            name: ":-ms-fullscreen",
            browsers: ["IE11"],
            description: "Matches any element that has its fullscreen flag set.",
        },
        {
            name: ":-ms-input-placeholder",
            browsers: ["IE10"],
            description: "Represents placeholder text in an input field. Note: for Edge use the pseudo-element ::-ms-input-placeholder. Standardized as ::placeholder.",
        },
        {
            name: ":-ms-keyboard-active",
            browsers: ["IE10"],
            description: "Windows Store apps only. Applies one or more styles to an element when it has focus and the user presses the space bar.",
        },
        {
            name: ":-ms-lang()",
            browsers: ["E", "IE10"],
            description: "Represents an element that is in the language specified. Accepts a comma separated list of language tokens.",
        },
        {
            name: ":no-button",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to track pieces. Applies when there is no button at that end of the track.",
        },
        {
            name: ":not()",
            browsers: ["E", "C", "FF1", "IE9", "O9.5", "S2"],
            description: "The negation pseudo-class, :not(X), is a functional notation taking a simple selector (excluding the negation pseudo-class itself) as an argument. It represents an element that is not represented by its argument.",
        },
        {
            name: ":nth-child()",
            browsers: ["E", "C", "FF3.5", "IE9", "O9.5", "S3.1"],
            description: "Represents an element that has an+b-1 siblings before it in the document tree, for any positive integer or zero value of n, and has a parent element.",
        },
        {
            name: ":nth-last-child()",
            browsers: ["E", "C", "FF3.5", "IE9", "O9.5", "S3.1"],
            description: "Represents an element that has an+b-1 siblings after it in the document tree, for any positive integer or zero value of n, and has a parent element.",
        },
        {
            name: ":nth-last-of-type()",
            browsers: ["E", "C", "FF3.5", "IE9", "O9.5", "S3.1"],
            description: "Represents an element that has an+b-1 siblings with the same expanded element name after it in the document tree, for any zero or positive integer value of n, and has a parent element.",
        },
        {
            name: ":nth-of-type()",
            browsers: ["E", "C", "FF3.5", "IE9", "O9.5", "S3.1"],
            description: "Represents an element that has an+b-1 siblings with the same expanded element name before it in the document tree, for any zero or positive integer value of n, and has a parent element.",
        },
        {
            name: ":only-child",
            browsers: ["E12", "FF1.5", "S3.1", "C2", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:only-child",
                },
            ],
            description: "Represents an element that has a parent element and whose parent element has no other element children. Same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity.",
        },
        {
            name: ":only-of-type",
            browsers: ["E12", "FF3.5", "S3.1", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:only-of-type",
                },
            ],
            description: "Matches every element that is the only child of its type, of its parent. Same as :first-of-type:last-of-type or :nth-of-type(1):nth-last-of-type(1), but with a lower specificity.",
        },
        {
            name: ":optional",
            browsers: ["E12", "FF4", "S5", "C10", "IE10", "O10"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:optional",
                },
            ],
            description: "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional.",
        },
        {
            name: ":out-of-range",
            browsers: ["E13", "FF29", "S5.1", "C10", "O11"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:out-of-range",
                },
            ],
            description: "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes.",
        },
        {
            name: ":past",
            browsers: ["E79", "S7", "C23", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:past",
                },
            ],
            description: "Represents any element that is defined to occur entirely prior to a :current element.",
        },
        {
            name: ":read-only",
            browsers: ["E13", "FF78", "S4", "C1", "O9"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:read-only",
                },
            ],
            description: "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only.",
        },
        {
            name: ":read-write",
            browsers: ["E13", "FF78", "S4", "C1", "O9"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:read-write",
                },
            ],
            description: "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only.",
        },
        {
            name: ":required",
            browsers: ["E12", "FF4", "S5", "C10", "IE10", "O10"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:required",
                },
            ],
            description: "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional.",
        },
        {
            name: ":right",
            browsers: ["E12", "S5", "C6", "IE8", "O9.2"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:right",
                },
            ],
            description: "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context.",
        },
        {
            name: ":root",
            browsers: ["E12", "FF1", "S1", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:root",
                },
            ],
            description: "Represents an element that is the root of the document. In HTML 4, this is always the HTML element.",
        },
        {
            name: ":scope",
            browsers: ["E79", "FF32", "S7", "C27", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:scope",
                },
            ],
            description: "Represents any element that is in the contextual reference element set.",
        },
        {
            name: ":single-button",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed separately at either end of the scrollbar.",
        },
        {
            name: ":start",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed before the thumb.",
        },
        {
            name: ":target",
            browsers: ["E12", "FF1", "S1.3", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:target",
                },
            ],
            description: "Some URIs refer to a location within a resource. This kind of URI ends with a 'number sign' (#) followed by an anchor identifier (called the fragment identifier).",
        },
        {
            name: ":valid",
            browsers: ["E12", "FF4", "S5", "C10", "IE10", "O10"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:valid",
                },
            ],
            description: "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification.",
        },
        {
            name: ":vertical",
            browsers: ["C", "S5"],
            description: "Non-standard. Applies to any scrollbar pieces that have a vertical orientation.",
        },
        {
            name: ":visited",
            browsers: ["E12", "FF1", "S1", "C1", "IE4", "O3.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:visited",
                },
            ],
            description: "Applies once the link has been visited by the user.",
        },
        {
            name: ":-webkit-any()",
            browsers: ["C", "S5"],
            description: "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches().",
        },
        {
            name: ":-webkit-full-screen",
            browsers: ["C", "S6"],
            description: "Matches any element that has its fullscreen flag set. Standardized as :fullscreen.",
        },
        {
            name: ":window-inactive",
            browsers: ["C", "S3"],
            description: "Non-standard. Applies to all scrollbar pieces. Indicates whether or not the window containing the scrollbar is currently active.",
        },
        {
            name: ":current",
            status: "experimental",
            description: "The :current CSS pseudo-class selector is a time-dimensional pseudo-class that represents the element, or an ancestor of the element, that is currently being displayed",
        },
        {
            name: ":blank",
            status: "experimental",
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:blank",
                },
            ],
            description: "The :blank CSS pseudo-class selects empty user input elements (eg. <input> or <textarea>).",
        },
        {
            name: ":defined",
            status: "experimental",
            browsers: ["E79", "FF63", "S10", "C54", "O41"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:defined",
                },
            ],
            description: "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method).",
        },
        {
            name: ":dir",
            browsers: ["E120", "FF49", "S16.4", "C120", "O106"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:dir",
                },
            ],
            description: "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them.",
        },
        {
            name: ":focus-visible",
            browsers: ["E86", "FF85", "S15.4", "C86", "O72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:focus-visible",
                },
            ],
            description: "The :focus-visible pseudo-class applies while an element matches the :focus pseudo-class and the UA determines via heuristics that the focus should be made evident on the element.",
        },
        {
            name: ":focus-within",
            browsers: ["E79", "FF52", "S10.1", "C60", "O47"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:focus-within",
                },
            ],
            description: "The :focus-within pseudo-class applies to any element for which the :focus pseudo class applies as well as to an element whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :focus.",
        },
        {
            name: ":has",
            status: "experimental",
            browsers: ["E105", "FF121", "S15.4", "C105", "O91"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:has",
                },
            ],
            description: ":The :has() CSS pseudo-class represents an element if any of the selectors passed as parameters (relative to the :scope of the given element), match at least one element.",
        },
        {
            name: ":is",
            status: "experimental",
            browsers: ["E88", "FF78", "S14", "C88", "O74"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:is",
                },
            ],
            description: "The :is() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. This is useful for writing large selectors in a more compact form.",
        },
        {
            name: ":local-link",
            status: "experimental",
            description: "The :local-link CSS pseudo-class represents an link to the same document",
        },
        {
            name: ":paused",
            status: "experimental",
            browsers: ["S15.4"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:paused",
                },
            ],
            description: "The :paused CSS pseudo-class selector is a resource state pseudo-class that will match an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “paused”.",
        },
        {
            name: ":placeholder-shown",
            status: "experimental",
            browsers: ["E79", "FF51", "S9", "C47", "IE10", "O34"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:placeholder-shown",
                },
            ],
            description: "The :placeholder-shown CSS pseudo-class represents any <input> or <textarea> element that is currently displaying placeholder text.",
        },
        {
            name: ":playing",
            status: "experimental",
            browsers: ["S15.4"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:playing",
                },
            ],
            description: "The :playing CSS pseudo-class selector is a resource state pseudo-class that will match an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “playing”. ",
        },
        {
            name: ":target-within",
            status: "experimental",
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:target-within",
                },
            ],
            description: "The :target-within CSS pseudo-class represents an element that is a target element or contains an element that is a target. A target element is a unique element with an id matching the URL's fragment.",
        },
        {
            name: ":user-invalid",
            status: "experimental",
            browsers: ["E119", "FF88", "S16.5", "C119", "O105"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:user-invalid",
                },
            ],
            description: "The :user-invalid CSS pseudo-class represents any validated form element whose value isn't valid based on their validation constraints, after the user has interacted with it.",
        },
        {
            name: ":user-valid",
            status: "experimental",
            browsers: ["E119", "FF88", "S16.5", "C119", "O105"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:user-valid",
                },
            ],
            description: "The :user-valid CSS pseudo-class represents any validated form element whose value validates correctly based on its validation constraints. However, unlike :valid it only matches once the user has interacted with it.",
        },
        {
            name: ":where",
            status: "experimental",
            browsers: ["E88", "FF78", "S14", "C88", "O74"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:where",
                },
            ],
            description: "The :where() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list.",
        },
        {
            name: ":picture-in-picture",
            status: "experimental",
            browsers: ["E110", "S13.1", "C110", "O96"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/:picture-in-picture",
                },
            ],
            description: "The :picture-in-picture CSS pseudo-class matches the element which is currently in picture-in-picture mode.",
        },
    ],
    pseudoElements: [
        {
            name: "::after",
            browsers: ["E12", "FF1.5", "S4", "C1", "IE9", "O7"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::after",
                },
            ],
            description: "Represents a styleable child pseudo-element immediately after the originating element's actual content.",
        },
        {
            name: "::backdrop",
            browsers: ["E79", "FF47", "S15.4", "C37", "IE11", "O24"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::backdrop",
                },
            ],
            description: "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen).",
        },
        {
            name: "::before",
            browsers: ["E12", "FF1.5", "S4", "C1", "IE9", "O7"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::before",
                },
            ],
            description: "Represents a styleable child pseudo-element immediately before the originating element's actual content.",
        },
        {
            name: "::content",
            browsers: ["C35", "O22"],
            description: "Deprecated. Matches the distribution list itself, on elements that have one. Use ::slotted for forward compatibility.",
        },
        {
            name: "::cue",
            browsers: ["E79", "FF55", "S7", "C26", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::cue",
                },
            ],
        },
        {
            name: "::cue()",
            browsers: ["C", "O16", "S6"],
        },
        {
            name: "::cue-region",
            browsers: ["C", "O16", "S6"],
        },
        {
            name: "::cue-region()",
            browsers: ["C", "O16", "S6"],
        },
        {
            name: "::first-letter",
            browsers: ["E12", "FF1", "S1", "C1", "IE9", "O7"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::first-letter",
                },
            ],
            description: "Represents the first letter of an element, if it is not preceded by any other content (such as images or inline tables) on its line.",
        },
        {
            name: "::first-line",
            browsers: ["E12", "FF1", "S1", "C1", "IE9", "O7"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::first-line",
                },
            ],
            description: "Describes the contents of the first formatted line of its originating element.",
        },
        {
            name: "::-moz-focus-inner",
            browsers: ["FF72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-moz-focus-inner",
                },
            ],
        },
        {
            name: "::-moz-focus-outer",
            browsers: ["FF4"],
        },
        {
            name: "::-moz-list-bullet",
            browsers: ["FF72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-moz-list-bullet",
                },
            ],
            description: "Used to style the bullet of a list element. Similar to the standardized ::marker.",
        },
        {
            name: "::-moz-list-number",
            browsers: ["FF72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-moz-list-number",
                },
            ],
            description: "Used to style the numbers of a list element. Similar to the standardized ::marker.",
        },
        {
            name: "::-moz-placeholder",
            browsers: ["FF19"],
            description: "Represents placeholder text in an input field",
        },
        {
            name: "::-moz-progress-bar",
            browsers: ["FF72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-moz-progress-bar",
                },
            ],
            description: "Represents the bar portion of a progress bar.",
        },
        {
            name: "::-moz-selection",
            browsers: ["FF1"],
            description: "Represents the portion of a document that has been highlighted by the user.",
        },
        {
            name: "::-ms-backdrop",
            browsers: ["IE11"],
            description: "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen).",
        },
        {
            name: "::-ms-browse",
            browsers: ["E", "IE10"],
            description: "Represents the browse button of an input type=file control.",
        },
        {
            name: "::-ms-check",
            browsers: ["E", "IE10"],
            description: "Represents the check of a checkbox or radio button input control.",
        },
        {
            name: "::-ms-clear",
            browsers: ["E", "IE10"],
            description: "Represents the clear button of a text input control",
        },
        {
            name: "::-ms-expand",
            browsers: ["E", "IE10"],
            description: "Represents the drop-down button of a select control.",
        },
        {
            name: "::-ms-fill",
            browsers: ["E", "IE10"],
            description: "Represents the bar portion of a progress bar.",
        },
        {
            name: "::-ms-fill-lower",
            browsers: ["E", "IE10"],
            description: "Represents the portion of the slider track from its smallest value up to the value currently selected by the thumb. In a left-to-right layout, this is the portion of the slider track to the left of the thumb.",
        },
        {
            name: "::-ms-fill-upper",
            browsers: ["E", "IE10"],
            description: "Represents the portion of the slider track from the value currently selected by the thumb up to the slider's largest value. In a left-to-right layout, this is the portion of the slider track to the right of the thumb.",
        },
        {
            name: "::-ms-reveal",
            browsers: ["E", "IE10"],
            description: "Represents the password reveal button of an input type=password control.",
        },
        {
            name: "::-ms-thumb",
            browsers: ["E", "IE10"],
            description: "Represents the portion of range input control (also known as a slider control) that the user drags.",
        },
        {
            name: "::-ms-ticks-after",
            browsers: ["E", "IE10"],
            description: "Represents the tick marks of a slider that begin just after the thumb and continue up to the slider's largest value. In a left-to-right layout, these are the ticks to the right of the thumb.",
        },
        {
            name: "::-ms-ticks-before",
            browsers: ["E", "IE10"],
            description: "Represents the tick marks of a slider that represent its smallest values up to the value currently selected by the thumb. In a left-to-right layout, these are the ticks to the left of the thumb.",
        },
        {
            name: "::-ms-tooltip",
            browsers: ["E", "IE10"],
            description: "Represents the tooltip of a slider (input type=range).",
        },
        {
            name: "::-ms-track",
            browsers: ["E", "IE10"],
            description: "Represents the track of a slider.",
        },
        {
            name: "::-ms-value",
            browsers: ["E", "IE10"],
            description: "Represents the content of a text or password input control, or a select control.",
        },
        {
            name: "::selection",
            browsers: ["E12", "FF62", "S1.1", "C1", "IE9", "O9.5"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::selection",
                },
            ],
            description: "Represents the portion of a document that has been highlighted by the user.",
        },
        {
            name: "::shadow",
            browsers: ["C35", "O22"],
            description: "Matches the shadow root if an element has a shadow tree.",
        },
        {
            name: "::-webkit-file-upload-button",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-inner-spin-button",
            browsers: ["E79", "S5", "C6", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-inner-spin-button",
                },
            ],
        },
        {
            name: "::-webkit-input-placeholder",
            browsers: ["C", "S4"],
        },
        {
            name: "::-webkit-keygen-select",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-meter-bar",
            browsers: ["E79", "S5.1", "C12", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-bar",
                },
            ],
        },
        {
            name: "::-webkit-meter-even-less-good-value",
            browsers: ["E79", "S5.1", "C12", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-even-less-good-value",
                },
            ],
        },
        {
            name: "::-webkit-meter-optimum-value",
            browsers: ["E79", "S5.1", "C12", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-optimum-value",
                },
            ],
        },
        {
            name: "::-webkit-meter-suboptimum-value",
            browsers: ["E79", "S5.1", "C12", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-suboptimum-value",
                },
            ],
        },
        {
            name: "::-webkit-outer-spin-button",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-progress-bar",
            browsers: ["E79", "S7", "C25", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-bar",
                },
            ],
        },
        {
            name: "::-webkit-progress-inner-element",
            browsers: ["E79", "S7", "C23", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-inner-element",
                },
            ],
        },
        {
            name: "::-webkit-progress-value",
            browsers: ["E79", "S7", "C25", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-value",
                },
            ],
        },
        {
            name: "::-webkit-resizer",
            browsers: ["E79", "S4", "C2", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar",
                },
            ],
        },
        {
            name: "::-webkit-scrollbar",
            browsers: ["E79", "S4", "C2", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar",
                },
            ],
        },
        {
            name: "::-webkit-scrollbar-button",
            browsers: ["E79", "S4", "C2", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar",
                },
            ],
        },
        {
            name: "::-webkit-scrollbar-corner",
            browsers: ["E79", "S4", "C2", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar",
                },
            ],
        },
        {
            name: "::-webkit-scrollbar-thumb",
            browsers: ["E79", "S4", "C2", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar",
                },
            ],
        },
        {
            name: "::-webkit-scrollbar-track",
            browsers: ["E79", "S4", "C2", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar",
                },
            ],
        },
        {
            name: "::-webkit-scrollbar-track-piece",
            browsers: ["E79", "S4", "C2", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar",
                },
            ],
        },
        {
            name: "::-webkit-search-cancel-button",
            browsers: ["E79", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-cancel-button",
                },
            ],
        },
        {
            name: "::-webkit-search-decoration",
            browsers: ["C", "S4"],
        },
        {
            name: "::-webkit-search-results-button",
            browsers: ["E79", "S3", "C1", "O15"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-results-button",
                },
            ],
        },
        {
            name: "::-webkit-search-results-decoration",
            browsers: ["C", "S4"],
        },
        {
            name: "::-webkit-slider-runnable-track",
            browsers: ["E83", "C83", "O69"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-slider-runnable-track",
                },
            ],
        },
        {
            name: "::-webkit-slider-thumb",
            browsers: ["E83", "C83", "O69"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-webkit-slider-thumb",
                },
            ],
        },
        {
            name: "::-webkit-textfield-decoration-container",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-validation-bubble",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-validation-bubble-arrow",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-validation-bubble-arrow-clipper",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-validation-bubble-heading",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-validation-bubble-message",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::-webkit-validation-bubble-text-block",
            browsers: ["C", "O", "S6"],
        },
        {
            name: "::target-text",
            status: "experimental",
            browsers: ["E89", "FF131", "S18.2", "C89", "O75"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::target-text",
                },
            ],
            description: "The ::target-text CSS pseudo-element represents the text that has been scrolled to if the browser supports scroll-to-text fragments. It allows authors to choose how to highlight that section of text.",
        },
        {
            name: "::-moz-range-progress",
            status: "nonstandard",
            browsers: ["FF22"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-progress",
                },
            ],
            description: 'The ::-moz-range-progress CSS pseudo-element is a Mozilla extension that represents the lower portion of the track (i.e., groove) in which the indicator slides in an <input> of type="range". This portion corresponds to values lower than the value currently selected by the thumb (i.e., virtual knob).',
        },
        {
            name: "::-moz-range-thumb",
            status: "nonstandard",
            browsers: ["FF21"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-thumb",
                },
            ],
            description: 'The ::-moz-range-thumb CSS pseudo-element is a Mozilla extension that represents the thumb (i.e., virtual knob) of an <input> of type="range". The user can move the thumb along the input\'s track to alter its numerical value.',
        },
        {
            name: "::-moz-range-track",
            status: "nonstandard",
            browsers: ["FF21"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-track",
                },
            ],
            description: 'The ::-moz-range-track CSS pseudo-element is a Mozilla extension that represents the track (i.e., groove) in which the indicator slides in an <input> of type="range".',
        },
        {
            name: "::-webkit-progress-inner-value",
            status: "nonstandard",
            description: "The ::-webkit-progress-value CSS pseudo-element represents the filled-in portion of the bar of a <progress> element. It is a child of the ::-webkit-progress-bar pseudo-element.\n\nIn order to let ::-webkit-progress-value take effect, -webkit-appearance needs to be set to none on the <progress> element.",
        },
        {
            name: "::grammar-error",
            status: "experimental",
            browsers: ["E121", "S17.4", "C121", "O107"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::grammar-error",
                },
            ],
            description: "The ::grammar-error CSS pseudo-element represents a text segment which the user agent has flagged as grammatically incorrect.",
        },
        {
            name: "::marker",
            browsers: ["E86", "FF68", "S11.1", "C86", "O72"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::marker",
                },
            ],
            description: "The ::marker CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number. It works on any element or pseudo-element set to display: list-item, such as the <li> and <summary> elements.",
        },
        {
            name: "::part",
            status: "experimental",
            browsers: ["E79", "FF72", "S13.1", "C73", "O60"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::part",
                },
            ],
            description: "The ::part CSS pseudo-element represents any element within a shadow tree that has a matching part attribute.",
        },
        {
            name: "::placeholder",
            browsers: ["E79", "FF51", "S10.1", "C57", "O44"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::placeholder",
                },
            ],
            description: "The ::placeholder CSS pseudo-element represents the placeholder text of a form element.",
        },
        {
            name: "::slotted",
            browsers: ["E79", "FF63", "S10", "C50", "O37"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::slotted",
                },
            ],
            description: "The :slotted() CSS pseudo-element represents any element that has been placed into a slot inside an HTML template.",
        },
        {
            name: "::spelling-error",
            status: "experimental",
            browsers: ["E121", "S17.4", "C121", "O107"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::spelling-error",
                },
            ],
            description: "The ::spelling-error CSS pseudo-element represents a text segment which the user agent has flagged as incorrectly spelled.",
        },
        {
            name: "::view-transition",
            status: "experimental",
            browsers: ["E109", "S18", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::view-transition",
                },
            ],
            description: "The ::view-transition CSS pseudo-element represents the root of the view transitions overlay, which contains all view transitions and sits over the top of all other page content.",
        },
        {
            name: "::view-transition-group",
            status: "experimental",
            browsers: ["E109", "S18", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::view-transition-group",
                },
            ],
            description: "The ::view-transition-group CSS pseudo-element represents a single view transition group.",
        },
        {
            name: "::view-transition-image-pair",
            status: "experimental",
            browsers: ["E109", "S18", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::view-transition-image-pair",
                },
            ],
            description: 'The ::view-transition-image-pair CSS pseudo-element represents a container for a view transition\'s "old" and "new" view states — before and after the transition.',
        },
        {
            name: "::view-transition-new",
            status: "experimental",
            browsers: ["E109", "S18", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::view-transition-new",
                },
            ],
            description: 'The ::view-transition-new CSS pseudo-element represents the "new" view state of a view transition — a live representation of the new view, after the transition.',
        },
        {
            name: "::view-transition-old",
            status: "experimental",
            browsers: ["E109", "S18", "C109", "O95"],
            references: [
                {
                    name: "MDN Reference",
                    url: "https://developer.mozilla.org/docs/Web/CSS/::view-transition-old",
                },
            ],
            description: 'The ::view-transition-old CSS pseudo-element represents the "old" view state of a view transition — a static screenshot of the old view, before the transition.',
        },
    ],
};
//# sourceMappingURL=webCustomData.js.map

}),
"../vscode-css-languageservice/lib/esm/languageFacts/builtinData.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  basicShapeFunctions: function() { return basicShapeFunctions; },
  boxKeywords: function() { return boxKeywords; },
  cssWideFunctions: function() { return cssWideFunctions; },
  cssWideKeywords: function() { return cssWideKeywords; },
  geometryBoxKeywords: function() { return geometryBoxKeywords; },
  html5Tags: function() { return html5Tags; },
  imageFunctions: function() { return imageFunctions; },
  lineStyleKeywords: function() { return lineStyleKeywords; },
  lineWidthKeywords: function() { return lineWidthKeywords; },
  pageBoxDirectives: function() { return pageBoxDirectives; },
  positionKeywords: function() { return positionKeywords; },
  repeatStyleKeywords: function() { return repeatStyleKeywords; },
  svgElements: function() { return svgElements; },
  transitionTimingFunctions: function() { return transitionTimingFunctions; },
  units: function() { return units; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

const positionKeywords = {
    bottom: "Computes to ‘100%’ for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.",
    center: "Computes to ‘50%’ (‘left 50%’) for the horizontal position if the horizontal position is not otherwise specified, or ‘50%’ (‘top 50%’) for the vertical position if it is.",
    left: "Computes to ‘0%’ for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.",
    right: "Computes to ‘100%’ for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.",
    top: "Computes to ‘0%’ for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.",
};
const repeatStyleKeywords = {
    "no-repeat": "Placed once and not repeated in this direction.",
    repeat: "Repeated in this direction as often as needed to cover the background painting area.",
    "repeat-x": "Computes to ‘repeat no-repeat’.",
    "repeat-y": "Computes to ‘no-repeat repeat’.",
    round: "Repeated as often as will fit within the background positioning area. If it doesn’t fit a whole number of times, it is rescaled so that it does.",
    space: "Repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area.",
};
const lineStyleKeywords = {
    dashed: "A series of square-ended dashes.",
    dotted: "A series of round dots.",
    double: "Two parallel solid lines with some space between them.",
    groove: "Looks as if it were carved in the canvas.",
    hidden: "Same as ‘none’, but has different behavior in the border conflict resolution rules for border-collapsed tables.",
    inset: "Looks as if the content on the inside of the border is sunken into the canvas.",
    none: "No border. Color and width are ignored.",
    outset: "Looks as if the content on the inside of the border is coming out of the canvas.",
    ridge: "Looks as if it were coming out of the canvas.",
    solid: "A single line segment.",
};
const lineWidthKeywords = ["medium", "thick", "thin"];
const boxKeywords = {
    "border-box": "The background is painted within (clipped to) the border box.",
    "content-box": "The background is painted within (clipped to) the content box.",
    "padding-box": "The background is painted within (clipped to) the padding box.",
};
const geometryBoxKeywords = {
    "margin-box": "Uses the margin box as reference box.",
    "fill-box": "Uses the object bounding box as reference box.",
    "stroke-box": "Uses the stroke bounding box as reference box.",
    "view-box": "Uses the nearest SVG viewport as reference box.",
};
const cssWideKeywords = {
    initial: "Represents the value specified as the property’s initial value.",
    inherit: "Represents the computed value of the property on the element’s parent.",
    unset: "Acts as either `inherit` or `initial`, depending on whether the property is inherited or not.",
};
const cssWideFunctions = {
    "var()": "Evaluates the value of a custom variable.",
    "calc()": "Evaluates an mathematical expression. The following operators can be used: + - * /.",
};
const imageFunctions = {
    "url()": "Reference an image file by URL",
    "image()": "Provide image fallbacks and annotations.",
    "-webkit-image-set()": "Provide multiple resolutions. Remember to use unprefixed image-set() in addition.",
    "image-set()": "Provide multiple resolutions of an image and const the UA decide which is most appropriate in a given situation.",
    "-moz-element()": "Use an element in the document as an image. Remember to use unprefixed element() in addition.",
    "element()": "Use an element in the document as an image.",
    "cross-fade()": "Indicates the two images to be combined and how far along in the transition the combination is.",
    "-webkit-gradient()": "Deprecated. Use modern linear-gradient() or radial-gradient() instead.",
    "-webkit-linear-gradient()": "Linear gradient. Remember to use unprefixed version in addition.",
    "-moz-linear-gradient()": "Linear gradient. Remember to use unprefixed version in addition.",
    "-o-linear-gradient()": "Linear gradient. Remember to use unprefixed version in addition.",
    "linear-gradient()": "A linear gradient is created by specifying a straight gradient line, and then several colors placed along that line.",
    "-webkit-repeating-linear-gradient()": "Repeating Linear gradient. Remember to use unprefixed version in addition.",
    "-moz-repeating-linear-gradient()": "Repeating Linear gradient. Remember to use unprefixed version in addition.",
    "-o-repeating-linear-gradient()": "Repeating Linear gradient. Remember to use unprefixed version in addition.",
    "repeating-linear-gradient()": "Same as linear-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.",
    "-webkit-radial-gradient()": "Radial gradient. Remember to use unprefixed version in addition.",
    "-moz-radial-gradient()": "Radial gradient. Remember to use unprefixed version in addition.",
    "radial-gradient()": "Colors emerge from a single point and smoothly spread outward in a circular or elliptical shape.",
    "-webkit-repeating-radial-gradient()": "Repeating radial gradient. Remember to use unprefixed version in addition.",
    "-moz-repeating-radial-gradient()": "Repeating radial gradient. Remember to use unprefixed version in addition.",
    "repeating-radial-gradient()": "Same as radial-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.",
};
const transitionTimingFunctions = {
    ease: "Equivalent to cubic-bezier(0.25, 0.1, 0.25, 1.0).",
    "ease-in": "Equivalent to cubic-bezier(0.42, 0, 1.0, 1.0).",
    "ease-in-out": "Equivalent to cubic-bezier(0.42, 0, 0.58, 1.0).",
    "ease-out": "Equivalent to cubic-bezier(0, 0, 0.58, 1.0).",
    linear: "Equivalent to cubic-bezier(0.0, 0.0, 1.0, 1.0).",
    "step-end": "Equivalent to steps(1, end).",
    "step-start": "Equivalent to steps(1, start).",
    "steps()": "The first parameter specifies the number of intervals in the function. The second parameter, which is optional, is either the value “start” or “end”.",
    "cubic-bezier()": "Specifies a cubic-bezier curve. The four values specify points P1 and P2  of the curve as (x1, y1, x2, y2).",
    "cubic-bezier(0.6, -0.28, 0.735, 0.045)": "Ease-in Back. Overshoots.",
    "cubic-bezier(0.68, -0.55, 0.265, 1.55)": "Ease-in-out Back. Overshoots.",
    "cubic-bezier(0.175, 0.885, 0.32, 1.275)": "Ease-out Back. Overshoots.",
    "cubic-bezier(0.6, 0.04, 0.98, 0.335)": "Ease-in Circular. Based on half circle.",
    "cubic-bezier(0.785, 0.135, 0.15, 0.86)": "Ease-in-out Circular. Based on half circle.",
    "cubic-bezier(0.075, 0.82, 0.165, 1)": "Ease-out Circular. Based on half circle.",
    "cubic-bezier(0.55, 0.055, 0.675, 0.19)": "Ease-in Cubic. Based on power of three.",
    "cubic-bezier(0.645, 0.045, 0.355, 1)": "Ease-in-out Cubic. Based on power of three.",
    "cubic-bezier(0.215, 0.610, 0.355, 1)": "Ease-out Cubic. Based on power of three.",
    "cubic-bezier(0.95, 0.05, 0.795, 0.035)": "Ease-in Exponential. Based on two to the power ten.",
    "cubic-bezier(1, 0, 0, 1)": "Ease-in-out Exponential. Based on two to the power ten.",
    "cubic-bezier(0.19, 1, 0.22, 1)": "Ease-out Exponential. Based on two to the power ten.",
    "cubic-bezier(0.47, 0, 0.745, 0.715)": "Ease-in Sine.",
    "cubic-bezier(0.445, 0.05, 0.55, 0.95)": "Ease-in-out Sine.",
    "cubic-bezier(0.39, 0.575, 0.565, 1)": "Ease-out Sine.",
    "cubic-bezier(0.55, 0.085, 0.68, 0.53)": "Ease-in Quadratic. Based on power of two.",
    "cubic-bezier(0.455, 0.03, 0.515, 0.955)": "Ease-in-out Quadratic. Based on power of two.",
    "cubic-bezier(0.25, 0.46, 0.45, 0.94)": "Ease-out Quadratic. Based on power of two.",
    "cubic-bezier(0.895, 0.03, 0.685, 0.22)": "Ease-in Quartic. Based on power of four.",
    "cubic-bezier(0.77, 0, 0.175, 1)": "Ease-in-out Quartic. Based on power of four.",
    "cubic-bezier(0.165, 0.84, 0.44, 1)": "Ease-out Quartic. Based on power of four.",
    "cubic-bezier(0.755, 0.05, 0.855, 0.06)": "Ease-in Quintic. Based on power of five.",
    "cubic-bezier(0.86, 0, 0.07, 1)": "Ease-in-out Quintic. Based on power of five.",
    "cubic-bezier(0.23, 1, 0.320, 1)": "Ease-out Quintic. Based on power of five.",
};
const basicShapeFunctions = {
    "circle()": "Defines a circle.",
    "ellipse()": "Defines an ellipse.",
    "inset()": "Defines an inset rectangle.",
    "polygon()": "Defines a polygon.",
};
const units = {
    length: [
        "cap",
        "ch",
        "cm",
        "cqb",
        "cqh",
        "cqi",
        "cqmax",
        "cqmin",
        "cqw",
        "dvb",
        "dvh",
        "dvi",
        "dvw",
        "em",
        "ex",
        "ic",
        "in",
        "lh",
        "lvb",
        "lvh",
        "lvi",
        "lvw",
        "mm",
        "pc",
        "pt",
        "px",
        "q",
        "rcap",
        "rch",
        "rem",
        "rex",
        "ric",
        "rlh",
        "svb",
        "svh",
        "svi",
        "svw",
        "vb",
        "vh",
        "vi",
        "vmax",
        "vmin",
        "vw",
    ],
    angle: ["deg", "rad", "grad", "turn"],
    time: ["ms", "s"],
    frequency: ["Hz", "kHz"],
    resolution: ["dpi", "dpcm", "dppx"],
    percentage: ["%", "fr"],
};
const html5Tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rb",
    "rp",
    "rt",
    "rtc",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "template",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "const",
    "video",
    "wbr",
];
const svgElements = [
    "circle",
    "clipPath",
    "cursor",
    "defs",
    "desc",
    "ellipse",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "filter",
    "foreignObject",
    "g",
    "hatch",
    "hatchpath",
    "image",
    "line",
    "linearGradient",
    "marker",
    "mask",
    "mesh",
    "meshpatch",
    "meshrow",
    "metadata",
    "mpath",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "set",
    "solidcolor",
    "stop",
    "svg",
    "switch",
    "symbol",
    "text",
    "textPath",
    "tspan",
    "use",
    "view",
];
const pageBoxDirectives = [
    "@bottom-center",
    "@bottom-left",
    "@bottom-left-corner",
    "@bottom-right",
    "@bottom-right-corner",
    "@left-bottom",
    "@left-middle",
    "@left-top",
    "@right-bottom",
    "@right-middle",
    "@right-top",
    "@top-center",
    "@top-left",
    "@top-left-corner",
    "@top-right",
    "@top-right-corner",
];
//# sourceMappingURL=builtinData.js.map

}),
"../vscode-css-languageservice/lib/esm/languageFacts/colors.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  colorFrom256RGB: function() { return colorFrom256RGB; },
  colorFromHSL: function() { return colorFromHSL; },
  colorFromHWB: function() { return colorFromHWB; },
  colorFromHex: function() { return colorFromHex; },
  colorFunctions: function() { return colorFunctions; },
  colorKeywords: function() { return colorKeywords; },
  colors: function() { return colors; },
  getColorValue: function() { return getColorValue; },
  hexDigit: function() { return hexDigit; },
  hslFromColor: function() { return hslFromColor; },
  hwbFromColor: function() { return hwbFromColor; },
  isColorConstructor: function() { return isColorConstructor; },
  isColorString: function() { return isColorString; },
  isColorValue: function() { return isColorValue; }
});
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_1__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const hexColorRegExp = /(^#([0-9A-F]{3}){1,2}$)|(^#([0-9A-F]{4}){1,2}$)/i;
const colorFunctions = [
    {
        label: "rgb",
        func: "rgb($red, $green, $blue)",
        insertText: "rgb(${1:red}, ${2:green}, ${3:blue})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from red, green, and blue values."),
    },
    {
        label: "rgba",
        func: "rgba($red, $green, $blue, $alpha)",
        insertText: "rgba(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from red, green, blue, and alpha values."),
    },
    {
        label: "rgb relative",
        func: "rgb(from $color $red $green $blue)",
        insertText: "rgb(from ${1:color} ${2:r} ${3:g} ${4:b})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from the red, green, and blue values of another Color."),
    },
    {
        label: "hsl",
        func: "hsl($hue, $saturation, $lightness)",
        insertText: "hsl(${1:hue}, ${2:saturation}, ${3:lightness})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from hue, saturation, and lightness values."),
    },
    {
        label: "hsla",
        func: "hsla($hue, $saturation, $lightness, $alpha)",
        insertText: "hsla(${1:hue}, ${2:saturation}, ${3:lightness}, ${4:alpha})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from hue, saturation, lightness, and alpha values."),
    },
    {
        label: "hsl relative",
        func: "hsl(from $color $hue $saturation $lightness)",
        insertText: "hsl(from ${1:color} ${2:h} ${3:s} ${4:l})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from the hue, saturation, and lightness values of another Color."),
    },
    {
        label: "hwb",
        func: "hwb($hue $white $black)",
        insertText: "hwb(${1:hue} ${2:white} ${3:black})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from hue, white, and black values."),
    },
    {
        label: "hwb relative",
        func: "hwb(from $color $hue $white $black)",
        insertText: "hwb(from ${1:color} ${2:h} ${3:w} ${4:b})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from the hue, white, and black values of another Color."),
    },
    {
        label: "lab",
        func: "lab($lightness $a $b)",
        insertText: "lab(${1:lightness} ${2:a} ${3:b})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from lightness, a, and b values."),
    },
    {
        label: "lab relative",
        func: "lab(from $color $lightness $a $b)",
        insertText: "lab(from ${1:color} ${2:l} ${3:a} ${4:b})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from the lightness, a, and b values of another Color."),
    },
    {
        label: "oklab",
        func: "oklab($lightness $a $b)",
        insertText: "oklab(${1:lightness} ${2:a} ${3:b})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from lightness, a, and b values."),
    },
    {
        label: "oklab relative",
        func: "oklab(from $color $lightness $a $b)",
        insertText: "oklab(from ${1:color} ${2:l} ${3:a} ${4:b})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from the lightness, a, and b values of another Color."),
    },
    {
        label: "lch",
        func: "lch($lightness $chroma $hue)",
        insertText: "lch(${1:lightness} ${2:chroma} ${3:hue})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from lightness, chroma, and hue values."),
    },
    {
        label: "lch relative",
        func: "lch(from $color $lightness $chroma $hue)",
        insertText: "lch(from ${1:color} ${2:l} ${3:c} ${4:h})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from the lightness, chroma, and hue values of another Color."),
    },
    {
        label: "oklch",
        func: "oklch($lightness $chroma $hue)",
        insertText: "oklch(${1:lightness} ${2:chroma} ${3:hue})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from lightness, chroma, and hue values."),
    },
    {
        label: "oklch relative",
        func: "oklch(from $color $lightness $chroma $hue)",
        insertText: "oklch(from ${1:color} ${2:l} ${3:c} ${4:h})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color from the lightness, chroma, and hue values of another Color."),
    },
    {
        label: "color",
        func: "color($color-space $red $green $blue)",
        insertText: "color(${1|srgb,srgb-linear,display-p3,a98-rgb,prophoto-rgb,rec2020,xyx,xyz-d50,xyz-d65|} ${2:red} ${3:green} ${4:blue})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color in a specific color space from red, green, and blue values."),
    },
    {
        label: "color relative",
        func: "color(from $color $color-space $red $green $blue)",
        insertText: "color(from ${1:color} ${2|srgb,srgb-linear,display-p3,a98-rgb,prophoto-rgb,rec2020,xyx,xyz-d50,xyz-d65|} ${3:r} ${4:g} ${5:b})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Creates a Color in a specific color space from the red, green, and blue values of another Color."),
    },
    {
        label: "color-mix",
        func: "color-mix(in $color-space, $color $percentage, $color $percentage)",
        insertText: "color-mix(in ${1|srgb,srgb-linear,lab,oklab,xyz,xyz-d50,xyz-d65|}, ${3:color} ${4:percentage}, ${5:color} ${6:percentage})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Mix two colors together in a rectangular color space."),
    },
    {
        label: "color-mix hue",
        func: "color-mix(in $color-space $interpolation-method hue, $color $percentage, $color $percentage)",
        insertText: "color-mix(in ${1|hsl,hwb,lch,oklch|} ${2|shorter hue,longer hue,increasing hue,decreasing hue|}, ${3:color} ${4:percentage}, ${5:color} ${6:percentage})",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Mix two colors together in a polar color space."),
    },
];
const colorFunctionNameRegExp = /^(rgb|rgba|hsl|hsla|hwb)$/i;
const colors = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgrey: "#a9a9a9",
    darkgreen: "#006400",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    grey: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgrey: "#d3d3d3",
    lightgreen: "#90ee90",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370d8",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#d87093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    red: "#ff0000",
    rebeccapurple: "#663399",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32",
};
const colorsRegExp = new RegExp(`^(${Object.keys(colors).join("|")})$`, "i");
const colorKeywords = {
    currentColor: "The value of the 'color' property. The computed value of the 'currentColor' keyword is the computed value of the 'color' property. If the 'currentColor' keyword is set on the 'color' property itself, it is treated as 'color:inherit' at parse time.",
    transparent: "Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.",
};
const colorKeywordsRegExp = new RegExp(`^(${Object.keys(colorKeywords).join("|")})$`, "i");
function getNumericValue(node, factor) {
    const val = node.getText();
    const m = val.match(/^([-+]?[0-9]*\.?[0-9]+)(%?)$/);
    if (m) {
        if (m[2]) {
            factor = 100.0;
        }
        const result = parseFloat(m[1]) / factor;
        if (result >= 0 && result <= 1) {
            return result;
        }
    }
    throw new Error();
}
function getAngle(node) {
    const val = node.getText();
    const m = val.match(/^([-+]?[0-9]*\.?[0-9]+)(deg|rad|grad|turn)?$/);
    if (m) {
        switch (m[2]) {
            case "deg":
                return parseFloat(val) % 360;
            case "rad":
                return ((parseFloat(val) * 180) / Math.PI) % 360;
            case "grad":
                return (parseFloat(val) * 0.9) % 360;
            case "turn":
                return (parseFloat(val) * 360) % 360;
            default:
                if ("undefined" === typeof m[2]) {
                    return parseFloat(val) % 360;
                }
        }
    }
    throw new Error();
}
function isColorConstructor(node) {
    const name = node.getName();
    if (!name) {
        return false;
    }
    return colorFunctionNameRegExp.test(name);
}
function isColorString(s) {
    return hexColorRegExp.test(s) || colorsRegExp.test(s) || colorKeywordsRegExp.test(s);
}
/**
 * Returns true if the node is a color value - either
 * defined a hex number, as rgb or rgba function, or
 * as color name.
 */
function isColorValue(node) {
    if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.HexColorValue) {
        return true;
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Function) {
        return isColorConstructor(node);
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Identifier) {
        if (node.parent && node.parent.type !== _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            return false;
        }
        const candidateColor = node.getText().toLowerCase();
        if (candidateColor === "none") {
            return false;
        }
        if (colors[candidateColor]) {
            return true;
        }
    }
    return false;
}
const Digit0 = 48;
const Digit9 = 57;
const A = 65;
// const F = 70;
const a = 97;
const f = 102;
function hexDigit(charCode) {
    if (charCode < Digit0) {
        return 0;
    }
    if (charCode <= Digit9) {
        return charCode - Digit0;
    }
    if (charCode < a) {
        charCode += a - A;
    }
    if (charCode >= a && charCode <= f) {
        return charCode - a + 10;
    }
    return 0;
}
function colorFromHex(text) {
    if (text[0] !== "#") {
        return null;
    }
    switch (text.length) {
        case 4:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: 1,
            };
        case 5:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,
            };
        case 7:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: 1,
            };
        case 9:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0,
            };
    }
    return null;
}
function colorFrom256RGB(red, green, blue, alpha = 1.0) {
    return {
        red: red / 255.0,
        green: green / 255.0,
        blue: blue / 255.0,
        alpha,
    };
}
function colorFromHSL(hue, sat, light, alpha = 1.0) {
    hue = hue / 60.0;
    if (sat === 0) {
        return { red: light, green: light, blue: light, alpha };
    }
    else {
        const hueToRgb = (t1, t2, hue) => {
            while (hue < 0) {
                hue += 6;
            }
            while (hue >= 6) {
                hue -= 6;
            }
            if (hue < 1) {
                return (t2 - t1) * hue + t1;
            }
            if (hue < 3) {
                return t2;
            }
            if (hue < 4) {
                return (t2 - t1) * (4 - hue) + t1;
            }
            return t1;
        };
        const t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;
        const t1 = light * 2 - t2;
        return { red: hueToRgb(t1, t2, hue + 2), green: hueToRgb(t1, t2, hue), blue: hueToRgb(t1, t2, hue - 2), alpha };
    }
}
function hslFromColor(rgba) {
    const r = rgba.red;
    const g = rgba.green;
    const b = rgba.blue;
    const a = rgba.alpha;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    let s = 0;
    const l = (min + max) / 2;
    const chroma = max - min;
    if (chroma > 0) {
        s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);
        switch (max) {
            case r:
                h = (g - b) / chroma + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / chroma + 2;
                break;
            case b:
                h = (r - g) / chroma + 4;
                break;
        }
        h *= 60;
        h = Math.round(h);
    }
    return { h, s, l, a };
}
function colorFromHWB(hue, white, black, alpha = 1.0) {
    if (white + black >= 1) {
        const gray = white / (white + black);
        return { red: gray, green: gray, blue: gray, alpha };
    }
    const rgb = colorFromHSL(hue, 1, 0.5, alpha);
    let red = rgb.red;
    red *= 1 - white - black;
    red += white;
    let green = rgb.green;
    green *= 1 - white - black;
    green += white;
    let blue = rgb.blue;
    blue *= 1 - white - black;
    blue += white;
    return {
        red: red,
        green: green,
        blue: blue,
        alpha,
    };
}
function hwbFromColor(rgba) {
    const hsl = hslFromColor(rgba);
    const white = Math.min(rgba.red, rgba.green, rgba.blue);
    const black = 1 - Math.max(rgba.red, rgba.green, rgba.blue);
    return {
        h: hsl.h,
        w: white,
        b: black,
        a: hsl.a,
    };
}
function getColorValue(node) {
    if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.HexColorValue) {
        const text = node.getText();
        return colorFromHex(text);
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Function) {
        const functionNode = node;
        const name = functionNode.getName();
        let colorValues = functionNode.getArguments().getChildren();
        if (colorValues.length === 1) {
            const functionArg = colorValues[0].getChildren();
            if (functionArg.length === 1 && functionArg[0].type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Expression) {
                colorValues = functionArg[0].getChildren();
                if (colorValues.length === 3) {
                    const lastValue = colorValues[2];
                    if (lastValue instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.BinaryExpression) {
                        const left = lastValue.getLeft(), right = lastValue.getRight(), operator = lastValue.getOperator();
                        if (left && right && operator && operator.matches("/")) {
                            colorValues = [colorValues[0], colorValues[1], left, right];
                        }
                    }
                }
            }
        }
        if (!name || colorValues.length < 3 || colorValues.length > 4) {
            return null;
        }
        try {
            const alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;
            if (name === "rgb" || name === "rgba") {
                return {
                    red: getNumericValue(colorValues[0], 255.0),
                    green: getNumericValue(colorValues[1], 255.0),
                    blue: getNumericValue(colorValues[2], 255.0),
                    alpha,
                };
            }
            else if (name === "hsl" || name === "hsla") {
                const h = getAngle(colorValues[0]);
                const s = getNumericValue(colorValues[1], 100.0);
                const l = getNumericValue(colorValues[2], 100.0);
                return colorFromHSL(h, s, l, alpha);
            }
            else if (name === "hwb") {
                const h = getAngle(colorValues[0]);
                const w = getNumericValue(colorValues[1], 100.0);
                const b = getNumericValue(colorValues[2], 100.0);
                return colorFromHWB(h, w, b, alpha);
            }
        }
        catch {
            // parse error on numeric value
            return null;
        }
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Identifier) {
        if (node.parent && node.parent.type !== _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            return null;
        }
        const term = node.parent;
        if (term && term.parent && term.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.BinaryExpression) {
            const expression = term.parent;
            if (expression.parent &&
                expression.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ListEntry &&
                expression.parent.key === expression) {
                return null;
            }
        }
        const candidateColor = node.getText().toLowerCase();
        if (candidateColor === "none") {
            return null;
        }
        const colorHex = colors[candidateColor];
        if (colorHex) {
            return colorFromHex(colorHex);
        }
    }
    return null;
}
//# sourceMappingURL=colors.js.map

}),
"../vscode-css-languageservice/lib/esm/languageFacts/dataManager.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSDataManager: function() { return CSSDataManager; }
});
/* ESM import */var _utils_objects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/objects */ "../vscode-css-languageservice/lib/esm/utils/objects.js");
/* ESM import */var _data_webCustomData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/webCustomData */ "../vscode-css-languageservice/lib/esm/data/webCustomData.js");
/* ESM import */var _dataProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataProvider */ "../vscode-css-languageservice/lib/esm/languageFacts/dataProvider.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




class CSSDataManager {
    constructor(options) {
        this.dataProviders = [];
        this._propertySet = {};
        this._atDirectiveSet = {};
        this._pseudoClassSet = {};
        this._pseudoElementSet = {};
        this._properties = [];
        this._atDirectives = [];
        this._pseudoClasses = [];
        this._pseudoElements = [];
        this.setDataProviders(options?.useDefaultDataProvider !== false, options?.customDataProviders || []);
    }
    setDataProviders(builtIn, providers) {
        this.dataProviders = [];
        if (builtIn) {
            this.dataProviders.push(new _dataProvider__WEBPACK_IMPORTED_MODULE_2__.CSSDataProvider(_data_webCustomData__WEBPACK_IMPORTED_MODULE_1__.cssData));
        }
        this.dataProviders.push(...providers);
        this.collectData();
    }
    /**
     * Collect all data  & handle duplicates
     */
    collectData() {
        this._propertySet = {};
        this._atDirectiveSet = {};
        this._pseudoClassSet = {};
        this._pseudoElementSet = {};
        this.dataProviders.forEach((provider) => {
            provider.provideProperties().forEach((p) => {
                if (!this._propertySet[p.name]) {
                    this._propertySet[p.name] = p;
                }
            });
            provider.provideAtDirectives().forEach((p) => {
                if (!this._atDirectiveSet[p.name]) {
                    this._atDirectiveSet[p.name] = p;
                }
            });
            provider.providePseudoClasses().forEach((p) => {
                if (!this._pseudoClassSet[p.name]) {
                    this._pseudoClassSet[p.name] = p;
                }
            });
            provider.providePseudoElements().forEach((p) => {
                if (!this._pseudoElementSet[p.name]) {
                    this._pseudoElementSet[p.name] = p;
                }
            });
        });
        this._properties = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._propertySet);
        this._atDirectives = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._atDirectiveSet);
        this._pseudoClasses = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._pseudoClassSet);
        this._pseudoElements = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._pseudoElementSet);
    }
    getProperty(name) {
        return this._propertySet[name];
    }
    getAtDirective(name) {
        return this._atDirectiveSet[name];
    }
    getPseudoClass(name) {
        return this._pseudoClassSet[name];
    }
    getPseudoElement(name) {
        return this._pseudoElementSet[name];
    }
    getProperties() {
        return this._properties;
    }
    getAtDirectives() {
        return this._atDirectives;
    }
    getPseudoClasses() {
        return this._pseudoClasses;
    }
    getPseudoElements() {
        return this._pseudoElements;
    }
    isKnownProperty(name) {
        return name.toLowerCase() in this._propertySet;
    }
    isStandardProperty(name) {
        return (this.isKnownProperty(name) &&
            (!this._propertySet[name.toLowerCase()].status || this._propertySet[name.toLowerCase()].status === "standard"));
    }
}
//# sourceMappingURL=dataManager.js.map

}),
"../vscode-css-languageservice/lib/esm/languageFacts/dataProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSDataProvider: function() { return CSSDataProvider; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

class CSSDataProvider {
    /**
     * Currently, unversioned data uses the V1 implementation
     * In the future when the provider handles multiple versions of HTML custom data,
     * use the latest implementation for unversioned data
     */
    constructor(data) {
        this._properties = [];
        this._atDirectives = [];
        this._pseudoClasses = [];
        this._pseudoElements = [];
        this.addData(data);
    }
    provideProperties() {
        return this._properties;
    }
    provideAtDirectives() {
        return this._atDirectives;
    }
    providePseudoClasses() {
        return this._pseudoClasses;
    }
    providePseudoElements() {
        return this._pseudoElements;
    }
    addData(data) {
        if (Array.isArray(data.properties)) {
            for (const prop of data.properties) {
                if (isPropertyData(prop)) {
                    this._properties.push(prop);
                }
            }
        }
        if (Array.isArray(data.atDirectives)) {
            for (const prop of data.atDirectives) {
                if (isAtDirective(prop)) {
                    this._atDirectives.push(prop);
                }
            }
        }
        if (Array.isArray(data.pseudoClasses)) {
            for (const prop of data.pseudoClasses) {
                if (isPseudoClassData(prop)) {
                    this._pseudoClasses.push(prop);
                }
            }
        }
        if (Array.isArray(data.pseudoElements)) {
            for (const prop of data.pseudoElements) {
                if (isPseudoElementData(prop)) {
                    this._pseudoElements.push(prop);
                }
            }
        }
    }
}
function isPropertyData(d) {
    return typeof d.name === "string";
}
function isAtDirective(d) {
    return typeof d.name === "string";
}
function isPseudoClassData(d) {
    return typeof d.name === "string";
}
function isPseudoElementData(d) {
    return typeof d.name === "string";
}
//# sourceMappingURL=dataProvider.js.map

}),
"../vscode-css-languageservice/lib/esm/languageFacts/entry.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  browserNames: function() { return browserNames; },
  getBrowserLabel: function() { return getBrowserLabel; },
  getEntryDescription: function() { return getEntryDescription; },
  textToMarkedString: function() { return textToMarkedString; }
});
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const browserNames = {
    E: "Edge",
    FF: "Firefox",
    S: "Safari",
    C: "Chrome",
    IE: "IE",
    O: "Opera",
};
function getEntryStatus(status) {
    switch (status) {
        case "experimental":
            return "⚠️ Property is experimental. Be cautious when using it.️\n\n";
        case "nonstandard":
            return "🚨️ Property is nonstandard. Avoid using it.\n\n";
        case "obsolete":
            return "🚨️️️ Property is obsolete. Avoid using it.\n\n";
        default:
            return "";
    }
}
function getEntryDescription(entry, doesSupportMarkdown, settings) {
    let result;
    if (doesSupportMarkdown) {
        result = {
            kind: "markdown",
            value: getEntryMarkdownDescription(entry, settings),
        };
    }
    else {
        result = {
            kind: "plaintext",
            value: getEntryStringDescription(entry, settings),
        };
    }
    if (result.value === "") {
        return undefined;
    }
    return result;
}
function textToMarkedString(text) {
    text = text.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    return text.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function getEntryStringDescription(entry, settings) {
    if (!entry.description || entry.description === "") {
        return "";
    }
    if (typeof entry.description !== "string") {
        return entry.description.value;
    }
    let result = "";
    if (settings?.documentation !== false) {
        if (entry.status) {
            result += getEntryStatus(entry.status);
        }
        result += entry.description;
        const browserLabel = getBrowserLabel(entry.browsers);
        if (browserLabel) {
            result += "\n(" + browserLabel + ")";
        }
        if ("syntax" in entry) {
            result += `\n\nSyntax: ${entry.syntax}`;
        }
    }
    if (entry.references && entry.references.length > 0 && settings?.references !== false) {
        if (result.length > 0) {
            result += "\n\n";
        }
        result += entry.references
            .map((r) => {
            return `${r.name}: ${r.url}`;
        })
            .join(" | ");
    }
    return result;
}
function getEntryMarkdownDescription(entry, settings) {
    if (!entry.description || entry.description === "") {
        return "";
    }
    let result = "";
    if (settings?.documentation !== false) {
        if (entry.status) {
            result += getEntryStatus(entry.status);
        }
        if (typeof entry.description === "string") {
            result += textToMarkedString(entry.description);
        }
        else {
            result +=
                entry.description.kind === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown
                    ? entry.description.value
                    : textToMarkedString(entry.description.value);
        }
        const browserLabel = getBrowserLabel(entry.browsers);
        if (browserLabel) {
            result += "\n\n(" + textToMarkedString(browserLabel) + ")";
        }
        if ("syntax" in entry && entry.syntax) {
            result += `\n\nSyntax: ${textToMarkedString(entry.syntax)}`;
        }
    }
    if (entry.references && entry.references.length > 0 && settings?.references !== false) {
        if (result.length > 0) {
            result += "\n\n";
        }
        result += entry.references
            .map((r) => {
            return `[${r.name}](${r.url})`;
        })
            .join(" | ");
    }
    return result;
}
/**
 * Input is like `["E12","FF49","C47","IE","O"]`
 * Output is like `Edge 12, Firefox 49, Chrome 47, IE, Opera`
 */
function getBrowserLabel(browsers = []) {
    if (browsers.length === 0) {
        return null;
    }
    return browsers
        .map((b) => {
        let result = "";
        const matches = b.match(/([A-Z]+)(\d+)?/);
        const name = matches[1];
        const version = matches[2];
        if (name in browserNames) {
            result += browserNames[name];
        }
        if (version) {
            result += " " + version;
        }
        return result;
    })
        .join(", ");
}
//# sourceMappingURL=entry.js.map

}),
"../vscode-css-languageservice/lib/esm/languageFacts/facts.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  basicShapeFunctions: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions; },
  boxKeywords: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.boxKeywords; },
  browserNames: function() { return /* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.browserNames; },
  colorFrom256RGB: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFrom256RGB; },
  colorFromHSL: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFromHSL; },
  colorFromHWB: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFromHWB; },
  colorFromHex: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFromHex; },
  colorFunctions: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFunctions; },
  colorKeywords: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorKeywords; },
  colors: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colors; },
  cssWideFunctions: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.cssWideFunctions; },
  cssWideKeywords: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords; },
  geometryBoxKeywords: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords; },
  getBrowserLabel: function() { return /* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.getBrowserLabel; },
  getColorValue: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.getColorValue; },
  getEntryDescription: function() { return /* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.getEntryDescription; },
  hexDigit: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.hexDigit; },
  hslFromColor: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.hslFromColor; },
  html5Tags: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.html5Tags; },
  hwbFromColor: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.hwbFromColor; },
  imageFunctions: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.imageFunctions; },
  isColorConstructor: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.isColorConstructor; },
  isColorString: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.isColorString; },
  isColorValue: function() { return /* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.isColorValue; },
  lineStyleKeywords: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords; },
  lineWidthKeywords: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.lineWidthKeywords; },
  pageBoxDirectives: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.pageBoxDirectives; },
  positionKeywords: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.positionKeywords; },
  repeatStyleKeywords: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords; },
  svgElements: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.svgElements; },
  textToMarkedString: function() { return /* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.textToMarkedString; },
  transitionTimingFunctions: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions; },
  units: function() { return /* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.units; }
});
/* ESM import */var _entry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entry */ "../vscode-css-languageservice/lib/esm/languageFacts/entry.js");
/* ESM import */var _colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colors */ "../vscode-css-languageservice/lib/esm/languageFacts/colors.js");
/* ESM import */var _builtinData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./builtinData */ "../vscode-css-languageservice/lib/esm/languageFacts/builtinData.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




//# sourceMappingURL=facts.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/cssErrors.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSIssueType: function() { return CSSIssueType; },
  ParseError: function() { return ParseError; }
});
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_0__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class CSSIssueType {
    constructor(id, message) {
        this.id = id;
        this.message = message;
    }
}
const ParseError = {
    NumberExpected: new CSSIssueType("css-numberexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("number expected")),
    ConditionExpected: new CSSIssueType("css-conditionexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("condition expected")),
    RuleOrSelectorExpected: new CSSIssueType("css-ruleorselectorexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("at-rule or selector expected")),
    DotExpected: new CSSIssueType("css-dotexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("dot expected")),
    ColonExpected: new CSSIssueType("css-colonexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("colon expected")),
    SemiColonExpected: new CSSIssueType("css-semicolonexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("semi-colon expected")),
    TermExpected: new CSSIssueType("css-termexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("term expected")),
    ExpressionExpected: new CSSIssueType("css-expressionexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("expression expected")),
    OperatorExpected: new CSSIssueType("css-operatorexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("operator expected")),
    IdentifierExpected: new CSSIssueType("css-identifierexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("identifier expected")),
    PercentageExpected: new CSSIssueType("css-percentageexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("percentage expected")),
    URIOrStringExpected: new CSSIssueType("css-uriorstringexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("uri or string expected")),
    URIExpected: new CSSIssueType("css-uriexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("URI expected")),
    VariableNameExpected: new CSSIssueType("css-varnameexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("variable name expected")),
    VariableValueExpected: new CSSIssueType("css-varvalueexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("variable value expected")),
    PropertyValueExpected: new CSSIssueType("css-propertyvalueexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("property value expected")),
    LeftCurlyExpected: new CSSIssueType("css-lcurlyexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("{ expected")),
    RightCurlyExpected: new CSSIssueType("css-rcurlyexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("} expected")),
    IndentExpected: new CSSIssueType("css-indentexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("indent expected")),
    DedentExpected: new CSSIssueType("css-dedentexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("dedent expected")),
    NewlineExpected: new CSSIssueType("css-dedentexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("new line expected")),
    LeftSquareBracketExpected: new CSSIssueType("css-rbracketexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("[ expected")),
    RightSquareBracketExpected: new CSSIssueType("css-lbracketexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("] expected")),
    LeftParenthesisExpected: new CSSIssueType("css-lparentexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("( expected")),
    RightParenthesisExpected: new CSSIssueType("css-rparentexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t(") expected")),
    CommaExpected: new CSSIssueType("css-commaexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("comma expected")),
    PageDirectiveOrDeclarationExpected: new CSSIssueType("css-pagedirordeclexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("page directive or declaraton expected")),
    UnknownAtRule: new CSSIssueType("css-unknownatrule", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("at-rule unknown")),
    UnknownKeyword: new CSSIssueType("css-unknownkeyword", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("unknown keyword")),
    SelectorExpected: new CSSIssueType("css-selectorexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("selector expected")),
    StringLiteralExpected: new CSSIssueType("css-stringliteralexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("string literal expected")),
    WhitespaceExpected: new CSSIssueType("css-whitespaceexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("whitespace expected")),
    MediaQueryExpected: new CSSIssueType("css-mediaqueryexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("media query expected")),
    IdentifierOrWildcardExpected: new CSSIssueType("css-idorwildcardexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("identifier or wildcard expected")),
    WildcardExpected: new CSSIssueType("css-wildcardexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("wildcard expected")),
    IdentifierOrVariableExpected: new CSSIssueType("css-idorvarexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("identifier or variable expected")),
    UnexpectedSemicolon: new CSSIssueType("css-nosemi", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("';' is not allowed in indented syntax")),
};
//# sourceMappingURL=cssErrors.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/cssNodes.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AbstractDeclaration: function() { return AbstractDeclaration; },
  AtApplyRule: function() { return AtApplyRule; },
  AttributeSelector: function() { return AttributeSelector; },
  BinaryExpression: function() { return BinaryExpression; },
  BodyDeclaration: function() { return BodyDeclaration; },
  Container: function() { return Container; },
  CustomPropertyDeclaration: function() { return CustomPropertyDeclaration; },
  CustomPropertySet: function() { return CustomPropertySet; },
  Declaration: function() { return Declaration; },
  Declarations: function() { return Declarations; },
  Document: function() { return Document; },
  EachStatement: function() { return EachStatement; },
  ElseStatement: function() { return ElseStatement; },
  Expression: function() { return Expression; },
  ExtendsReference: function() { return ExtendsReference; },
  FontFace: function() { return FontFace; },
  ForStatement: function() { return ForStatement; },
  Forward: function() { return Forward; },
  ForwardVisibility: function() { return ForwardVisibility; },
  Function: function() { return Function; },
  FunctionArgument: function() { return FunctionArgument; },
  FunctionDeclaration: function() { return FunctionDeclaration; },
  FunctionParameter: function() { return FunctionParameter; },
  GuardCondition: function() { return GuardCondition; },
  HexColorValue: function() { return HexColorValue; },
  Identifier: function() { return Identifier; },
  IfStatement: function() { return IfStatement; },
  Import: function() { return Import; },
  Interpolation: function() { return Interpolation; },
  Invocation: function() { return Invocation; },
  Keyframe: function() { return Keyframe; },
  KeyframeSelector: function() { return KeyframeSelector; },
  Layer: function() { return Layer; },
  LessGuard: function() { return LessGuard; },
  Level: function() { return Level; },
  ListEntry: function() { return ListEntry; },
  Marker: function() { return Marker; },
  Media: function() { return Media; },
  MediaCondition: function() { return MediaCondition; },
  MediaFeature: function() { return MediaFeature; },
  MediaQuery: function() { return MediaQuery; },
  Medialist: function() { return Medialist; },
  MixinContentDeclaration: function() { return MixinContentDeclaration; },
  MixinContentReference: function() { return MixinContentReference; },
  MixinDeclaration: function() { return MixinDeclaration; },
  MixinReference: function() { return MixinReference; },
  Module: function() { return Module; },
  ModuleConfiguration: function() { return ModuleConfiguration; },
  Namespace: function() { return Namespace; },
  NestedProperties: function() { return NestedProperties; },
  Node: function() { return Node; },
  NodeType: function() { return NodeType; },
  Nodelist: function() { return Nodelist; },
  NumericValue: function() { return NumericValue; },
  Operator: function() { return Operator; },
  Page: function() { return Page; },
  PageBoxMarginBox: function() { return PageBoxMarginBox; },
  ParseErrorCollector: function() { return ParseErrorCollector; },
  Property: function() { return Property; },
  PropertyAtRule: function() { return PropertyAtRule; },
  RatioValue: function() { return RatioValue; },
  ReferenceType: function() { return ReferenceType; },
  RuleSet: function() { return RuleSet; },
  Selector: function() { return Selector; },
  SimpleSelector: function() { return SimpleSelector; },
  Stylesheet: function() { return Stylesheet; },
  Supports: function() { return Supports; },
  SupportsCondition: function() { return SupportsCondition; },
  Term: function() { return Term; },
  UnicodeRange: function() { return UnicodeRange; },
  UnknownAtRule: function() { return UnknownAtRule; },
  Use: function() { return Use; },
  Variable: function() { return Variable; },
  VariableDeclaration: function() { return VariableDeclaration; },
  ViewPort: function() { return ViewPort; },
  WhileStatement: function() { return WhileStatement; },
  getNodeAtOffset: function() { return getNodeAtOffset; },
  getNodePath: function() { return getNodePath; },
  getParentDeclaration: function() { return getParentDeclaration; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/// <summary>
/// Nodes for the css 2.1 specification. See for reference:
/// http://www.w3.org/TR/CSS21/grammar.html#grammar
/// </summary>
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Undefined"] = 0] = "Undefined";
    NodeType[NodeType["Identifier"] = 1] = "Identifier";
    NodeType[NodeType["Stylesheet"] = 2] = "Stylesheet";
    NodeType[NodeType["Ruleset"] = 3] = "Ruleset";
    NodeType[NodeType["Selector"] = 4] = "Selector";
    NodeType[NodeType["SimpleSelector"] = 5] = "SimpleSelector";
    NodeType[NodeType["SelectorInterpolation"] = 6] = "SelectorInterpolation";
    NodeType[NodeType["SelectorCombinator"] = 7] = "SelectorCombinator";
    NodeType[NodeType["SelectorCombinatorParent"] = 8] = "SelectorCombinatorParent";
    NodeType[NodeType["SelectorCombinatorSibling"] = 9] = "SelectorCombinatorSibling";
    NodeType[NodeType["SelectorCombinatorAllSiblings"] = 10] = "SelectorCombinatorAllSiblings";
    NodeType[NodeType["SelectorCombinatorShadowPiercingDescendant"] = 11] = "SelectorCombinatorShadowPiercingDescendant";
    NodeType[NodeType["Page"] = 12] = "Page";
    NodeType[NodeType["PageBoxMarginBox"] = 13] = "PageBoxMarginBox";
    NodeType[NodeType["ClassSelector"] = 14] = "ClassSelector";
    NodeType[NodeType["IdentifierSelector"] = 15] = "IdentifierSelector";
    NodeType[NodeType["ElementNameSelector"] = 16] = "ElementNameSelector";
    NodeType[NodeType["PseudoSelector"] = 17] = "PseudoSelector";
    NodeType[NodeType["AttributeSelector"] = 18] = "AttributeSelector";
    NodeType[NodeType["Declaration"] = 19] = "Declaration";
    NodeType[NodeType["Declarations"] = 20] = "Declarations";
    NodeType[NodeType["Property"] = 21] = "Property";
    NodeType[NodeType["Expression"] = 22] = "Expression";
    NodeType[NodeType["BinaryExpression"] = 23] = "BinaryExpression";
    NodeType[NodeType["Term"] = 24] = "Term";
    NodeType[NodeType["Operator"] = 25] = "Operator";
    NodeType[NodeType["Value"] = 26] = "Value";
    NodeType[NodeType["StringLiteral"] = 27] = "StringLiteral";
    NodeType[NodeType["URILiteral"] = 28] = "URILiteral";
    NodeType[NodeType["EscapedValue"] = 29] = "EscapedValue";
    NodeType[NodeType["Function"] = 30] = "Function";
    NodeType[NodeType["NumericValue"] = 31] = "NumericValue";
    NodeType[NodeType["HexColorValue"] = 32] = "HexColorValue";
    NodeType[NodeType["RatioValue"] = 33] = "RatioValue";
    NodeType[NodeType["MixinDeclaration"] = 34] = "MixinDeclaration";
    NodeType[NodeType["MixinReference"] = 35] = "MixinReference";
    NodeType[NodeType["VariableName"] = 36] = "VariableName";
    NodeType[NodeType["VariableDeclaration"] = 37] = "VariableDeclaration";
    NodeType[NodeType["Prio"] = 38] = "Prio";
    NodeType[NodeType["Interpolation"] = 39] = "Interpolation";
    NodeType[NodeType["NestedProperties"] = 40] = "NestedProperties";
    NodeType[NodeType["ExtendsReference"] = 41] = "ExtendsReference";
    NodeType[NodeType["SelectorPlaceholder"] = 42] = "SelectorPlaceholder";
    NodeType[NodeType["Debug"] = 43] = "Debug";
    NodeType[NodeType["If"] = 44] = "If";
    NodeType[NodeType["Else"] = 45] = "Else";
    NodeType[NodeType["For"] = 46] = "For";
    NodeType[NodeType["Each"] = 47] = "Each";
    NodeType[NodeType["While"] = 48] = "While";
    NodeType[NodeType["MixinContentReference"] = 49] = "MixinContentReference";
    NodeType[NodeType["MixinContentDeclaration"] = 50] = "MixinContentDeclaration";
    NodeType[NodeType["Media"] = 51] = "Media";
    NodeType[NodeType["Keyframe"] = 52] = "Keyframe";
    NodeType[NodeType["FontFace"] = 53] = "FontFace";
    NodeType[NodeType["Import"] = 54] = "Import";
    NodeType[NodeType["Namespace"] = 55] = "Namespace";
    NodeType[NodeType["Invocation"] = 56] = "Invocation";
    NodeType[NodeType["FunctionDeclaration"] = 57] = "FunctionDeclaration";
    NodeType[NodeType["ReturnStatement"] = 58] = "ReturnStatement";
    NodeType[NodeType["MediaQuery"] = 59] = "MediaQuery";
    NodeType[NodeType["MediaCondition"] = 60] = "MediaCondition";
    NodeType[NodeType["MediaFeature"] = 61] = "MediaFeature";
    NodeType[NodeType["FunctionParameter"] = 62] = "FunctionParameter";
    NodeType[NodeType["FunctionArgument"] = 63] = "FunctionArgument";
    NodeType[NodeType["KeyframeSelector"] = 64] = "KeyframeSelector";
    NodeType[NodeType["ViewPort"] = 65] = "ViewPort";
    NodeType[NodeType["Document"] = 66] = "Document";
    NodeType[NodeType["AtApplyRule"] = 67] = "AtApplyRule";
    NodeType[NodeType["CustomPropertyDeclaration"] = 68] = "CustomPropertyDeclaration";
    NodeType[NodeType["CustomPropertySet"] = 69] = "CustomPropertySet";
    NodeType[NodeType["ListEntry"] = 70] = "ListEntry";
    NodeType[NodeType["Supports"] = 71] = "Supports";
    NodeType[NodeType["SupportsCondition"] = 72] = "SupportsCondition";
    NodeType[NodeType["NamespacePrefix"] = 73] = "NamespacePrefix";
    NodeType[NodeType["GridLine"] = 74] = "GridLine";
    NodeType[NodeType["Plugin"] = 75] = "Plugin";
    NodeType[NodeType["UnknownAtRule"] = 76] = "UnknownAtRule";
    NodeType[NodeType["Use"] = 77] = "Use";
    NodeType[NodeType["ModuleConfiguration"] = 78] = "ModuleConfiguration";
    NodeType[NodeType["Forward"] = 79] = "Forward";
    NodeType[NodeType["ForwardVisibility"] = 80] = "ForwardVisibility";
    NodeType[NodeType["Module"] = 81] = "Module";
    NodeType[NodeType["UnicodeRange"] = 82] = "UnicodeRange";
    NodeType[NodeType["Layer"] = 83] = "Layer";
    NodeType[NodeType["LayerNameList"] = 84] = "LayerNameList";
    NodeType[NodeType["LayerName"] = 85] = "LayerName";
    NodeType[NodeType["PropertyAtRule"] = 86] = "PropertyAtRule";
    NodeType[NodeType["Container"] = 87] = "Container";
    NodeType[NodeType["ModuleConfig"] = 88] = "ModuleConfig";
})(NodeType || (NodeType = {}));
var ReferenceType;
(function (ReferenceType) {
    ReferenceType[ReferenceType["Mixin"] = 0] = "Mixin";
    ReferenceType[ReferenceType["Rule"] = 1] = "Rule";
    ReferenceType[ReferenceType["Variable"] = 2] = "Variable";
    ReferenceType[ReferenceType["Function"] = 3] = "Function";
    ReferenceType[ReferenceType["Keyframe"] = 4] = "Keyframe";
    ReferenceType[ReferenceType["Unknown"] = 5] = "Unknown";
    ReferenceType[ReferenceType["Module"] = 6] = "Module";
    ReferenceType[ReferenceType["Forward"] = 7] = "Forward";
    ReferenceType[ReferenceType["ForwardVisibility"] = 8] = "ForwardVisibility";
    ReferenceType[ReferenceType["Property"] = 9] = "Property";
})(ReferenceType || (ReferenceType = {}));
function getNodeAtOffset(node, offset) {
    let candidate = null;
    if (!node || offset < node.offset || offset > node.end) {
        return null;
    }
    // Find the shortest node at the position
    node.accept((node) => {
        if (node.offset === -1 && node.length === -1) {
            return true;
        }
        if (node.offset <= offset && node.end >= offset) {
            if (!candidate) {
                candidate = node;
            }
            else if (node.length <= candidate.length) {
                candidate = node;
            }
            return true;
        }
        return false;
    });
    return candidate;
}
function getNodePath(node, offset) {
    let candidate = getNodeAtOffset(node, offset);
    const path = [];
    while (candidate) {
        path.unshift(candidate);
        candidate = candidate.parent;
    }
    return path;
}
function getParentDeclaration(node) {
    const decl = node.findParent(NodeType.Declaration);
    const value = decl && decl.getValue();
    if (value && value.encloses(node)) {
        return decl;
    }
    return null;
}
class Node {
    get end() {
        return this.offset + this.length;
    }
    constructor(offset = -1, len = -1, nodeType) {
        this.parent = null;
        this.offset = offset;
        this.length = len;
        if (nodeType) {
            this.nodeType = nodeType;
        }
    }
    set type(type) {
        this.nodeType = type;
    }
    get type() {
        return this.nodeType || NodeType.Undefined;
    }
    getTextProvider() {
        let node = this;
        while (node && !node.textProvider) {
            node = node.parent;
        }
        if (node) {
            return node.textProvider;
        }
        return () => {
            return "unknown";
        };
    }
    getText() {
        return this.getTextProvider()(this.offset, this.length);
    }
    matches(str) {
        return this.length === str.length && this.getTextProvider()(this.offset, this.length) === str;
    }
    startsWith(str) {
        return this.length >= str.length && this.getTextProvider()(this.offset, str.length) === str;
    }
    endsWith(str) {
        return this.length >= str.length && this.getTextProvider()(this.end - str.length, str.length) === str;
    }
    accept(visitor) {
        if (visitor(this) && this.children) {
            for (const child of this.children) {
                child.accept(visitor);
            }
        }
    }
    acceptVisitor(visitor) {
        this.accept(visitor.visitNode.bind(visitor));
    }
    adoptChild(node, index = -1) {
        if (node.parent && node.parent.children) {
            const idx = node.parent.children.indexOf(node);
            if (idx >= 0) {
                node.parent.children.splice(idx, 1);
            }
        }
        node.parent = this;
        let children = this.children;
        if (!children) {
            children = this.children = [];
        }
        if (index !== -1) {
            children.splice(index, 0, node);
        }
        else {
            children.push(node);
        }
        return node;
    }
    attachTo(parent, index = -1) {
        if (parent) {
            parent.adoptChild(this, index);
        }
        return this;
    }
    collectIssues(results) {
        if (this.issues) {
            results.push.apply(results, this.issues);
        }
    }
    addIssue(issue) {
        if (!this.issues) {
            this.issues = [];
        }
        this.issues.push(issue);
    }
    hasIssue(rule) {
        return Array.isArray(this.issues) && this.issues.some((i) => i.getRule() === rule);
    }
    isErroneous(recursive = false) {
        if (this.issues && this.issues.length > 0) {
            return true;
        }
        return recursive && Array.isArray(this.children) && this.children.some((c) => c.isErroneous(true));
    }
    setNode(field, node, index = -1) {
        if (node) {
            node.attachTo(this, index);
            this[field] = node;
            return true;
        }
        return false;
    }
    addChild(node) {
        if (node) {
            if (!this.children) {
                this.children = [];
            }
            node.attachTo(this);
            this.updateOffsetAndLength(node);
            return true;
        }
        return false;
    }
    updateOffsetAndLength(node) {
        if (node.offset < this.offset || this.offset === -1) {
            this.offset = node.offset;
        }
        const nodeEnd = node.end;
        if (nodeEnd > this.end || this.length === -1) {
            this.length = nodeEnd - this.offset;
        }
    }
    hasChildren() {
        return !!this.children && this.children.length > 0;
    }
    getChildren() {
        return this.children ? this.children.slice(0) : [];
    }
    getChild(index) {
        if (this.children && index < this.children.length) {
            return this.children[index];
        }
        return null;
    }
    addChildren(nodes) {
        for (const node of nodes) {
            this.addChild(node);
        }
    }
    findFirstChildBeforeOffset(offset) {
        if (this.children) {
            let current = null;
            for (let i = this.children.length - 1; i >= 0; i--) {
                // iterate until we find a child that has a start offset smaller than the input offset
                current = this.children[i];
                if (current.offset <= offset) {
                    return current;
                }
            }
        }
        return null;
    }
    findChildAtOffset(offset, goDeep) {
        const current = this.findFirstChildBeforeOffset(offset);
        if (current && current.end >= offset) {
            if (goDeep) {
                return current.findChildAtOffset(offset, true) || current;
            }
            return current;
        }
        return null;
    }
    encloses(candidate) {
        return this.offset <= candidate.offset && this.offset + this.length >= candidate.offset + candidate.length;
    }
    getParent() {
        let result = this.parent;
        while (result instanceof Nodelist) {
            result = result.parent;
        }
        return result;
    }
    findParent(type) {
        let result = this;
        while (result && result.type !== type) {
            result = result.parent;
        }
        return result;
    }
    findAParent(...types) {
        let result = this;
        while (result && !types.some((t) => result.type === t)) {
            result = result.parent;
        }
        return result;
    }
    setData(key, value) {
        if (!this.options) {
            this.options = {};
        }
        this.options[key] = value;
    }
    getData(key) {
        if (!this.options || !this.options.hasOwnProperty(key)) {
            return null;
        }
        return this.options[key];
    }
}
class Nodelist extends Node {
    constructor(parent, index = -1) {
        super(-1, -1);
        this.attachTo(parent, index);
        this.offset = -1;
        this.length = -1;
    }
}
class UnicodeRange extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.UnicodeRange;
    }
    setRangeStart(rangeStart) {
        return this.setNode("rangeStart", rangeStart);
    }
    getRangeStart() {
        return this.rangeStart;
    }
    setRangeEnd(rangeEnd) {
        return this.setNode("rangeEnd", rangeEnd);
    }
    getRangeEnd() {
        return this.rangeEnd;
    }
}
class Identifier extends Node {
    constructor(offset, length) {
        super(offset, length);
        this.isCustomProperty = false;
    }
    get type() {
        return NodeType.Identifier;
    }
    containsInterpolation() {
        return this.hasChildren();
    }
}
class Stylesheet extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Stylesheet;
    }
}
class Declarations extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Declarations;
    }
}
class BodyDeclaration extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    getDeclarations() {
        return this.declarations;
    }
    setDeclarations(decls) {
        return this.setNode("declarations", decls);
    }
}
class RuleSet extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Ruleset;
    }
    getSelectors() {
        if (!this.selectors) {
            this.selectors = new Nodelist(this);
        }
        return this.selectors;
    }
    isNested() {
        return !!this.parent && this.parent.findParent(NodeType.Declarations) !== null;
    }
}
class Selector extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Selector;
    }
}
class SimpleSelector extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.SimpleSelector;
    }
}
class AtApplyRule extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.AtApplyRule;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
}
class AbstractDeclaration extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
}
class CustomPropertySet extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.CustomPropertySet;
    }
}
class Declaration extends AbstractDeclaration {
    constructor(offset, length) {
        super(offset, length);
        this.property = null;
    }
    get type() {
        return NodeType.Declaration;
    }
    setProperty(node) {
        return this.setNode("property", node);
    }
    getProperty() {
        return this.property;
    }
    getFullPropertyName() {
        const propertyName = this.property ? this.property.getName() : "unknown";
        if (this.parent instanceof Declarations && this.parent.getParent() instanceof NestedProperties) {
            const parentDecl = this.parent.getParent().getParent();
            if (parentDecl instanceof Declaration) {
                return parentDecl.getFullPropertyName() + propertyName;
            }
        }
        return propertyName;
    }
    getNonPrefixedPropertyName() {
        const propertyName = this.getFullPropertyName();
        if (propertyName && propertyName.charAt(0) === "-") {
            const vendorPrefixEnd = propertyName.indexOf("-", 1);
            if (vendorPrefixEnd !== -1) {
                return propertyName.substring(vendorPrefixEnd + 1);
            }
        }
        return propertyName;
    }
    setValue(value) {
        return this.setNode("value", value);
    }
    getValue() {
        return this.value;
    }
    setNestedProperties(value) {
        return this.setNode("nestedProperties", value);
    }
    getNestedProperties() {
        return this.nestedProperties;
    }
}
class CustomPropertyDeclaration extends Declaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.CustomPropertyDeclaration;
    }
    setPropertySet(value) {
        return this.setNode("propertySet", value);
    }
    getPropertySet() {
        return this.propertySet;
    }
}
class Property extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Property;
    }
    setIdentifier(value) {
        return this.setNode("identifier", value);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.getText();
    }
    isCustomProperty() {
        return !!this.identifier && this.identifier.isCustomProperty;
    }
}
class Invocation extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Invocation;
    }
    getArguments() {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    }
}
class Function extends Invocation {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Function;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
}
class FunctionParameter extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FunctionParameter;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
    setDefaultValue(node) {
        return this.setNode("defaultValue", node, 0);
    }
    getDefaultValue() {
        return this.defaultValue;
    }
}
class FunctionArgument extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FunctionArgument;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
    setValue(node) {
        return this.setNode("value", node, 0);
    }
    getValue() {
        return this.value;
    }
}
class IfStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.If;
    }
    setExpression(node) {
        return this.setNode("expression", node, 0);
    }
    setElseClause(elseClause) {
        return this.setNode("elseClause", elseClause);
    }
}
class ForStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.For;
    }
    setVariable(node) {
        return this.setNode("variable", node, 0);
    }
}
class EachStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Each;
    }
    getVariables() {
        if (!this.variables) {
            this.variables = new Nodelist(this);
        }
        return this.variables;
    }
}
class WhileStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.While;
    }
}
class ElseStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Else;
    }
}
class FunctionDeclaration extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FunctionDeclaration;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
}
class ViewPort extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.ViewPort;
    }
}
class FontFace extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FontFace;
    }
}
class NestedProperties extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.NestedProperties;
    }
}
class Keyframe extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Keyframe;
    }
    setKeyword(keyword) {
        return this.setNode("keyword", keyword, 0);
    }
    getKeyword() {
        return this.keyword;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
}
class KeyframeSelector extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.KeyframeSelector;
    }
}
class Import extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Import;
    }
    setMedialist(node) {
        if (node) {
            node.attachTo(this);
            return true;
        }
        return false;
    }
}
class Use extends Node {
    get type() {
        return NodeType.Use;
    }
    setParameters(value) {
        return this.setNode("parameters", value);
    }
    getParameters() {
        return this.parameters;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
}
class ModuleConfiguration extends Node {
    get type() {
        return NodeType.ModuleConfiguration;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
    setValue(node) {
        return this.setNode("value", node, 0);
    }
    getValue() {
        return this.value;
    }
}
class Forward extends Node {
    get type() {
        return NodeType.Forward;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getMembers() {
        if (!this.members) {
            this.members = new Nodelist(this);
        }
        return this.members;
    }
    setParameters(value) {
        return this.setNode("parameters", value);
    }
    getParameters() {
        return this.parameters;
    }
}
class ForwardVisibility extends Node {
    get type() {
        return NodeType.ForwardVisibility;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
}
class Namespace extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Namespace;
    }
}
class Media extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Media;
    }
}
class Supports extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Supports;
    }
}
class Layer extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Layer;
    }
    setNames(names) {
        return this.setNode("names", names);
    }
    getNames() {
        return this.names;
    }
}
class PropertyAtRule extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.PropertyAtRule;
    }
    setName(node) {
        if (node) {
            node.attachTo(this);
            this.name = node;
            return true;
        }
        return false;
    }
    getName() {
        return this.name;
    }
}
class Document extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Document;
    }
}
class Container extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Container;
    }
}
class Medialist extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
}
class MediaQuery extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MediaQuery;
    }
}
class MediaCondition extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MediaCondition;
    }
}
class MediaFeature extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MediaFeature;
    }
}
class SupportsCondition extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.SupportsCondition;
    }
}
class Page extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Page;
    }
}
class PageBoxMarginBox extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.PageBoxMarginBox;
    }
}
class Expression extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Expression;
    }
}
class BinaryExpression extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.BinaryExpression;
    }
    setLeft(left) {
        return this.setNode("left", left);
    }
    getLeft() {
        return this.left;
    }
    setRight(right) {
        return this.setNode("right", right);
    }
    getRight() {
        return this.right;
    }
    setOperator(value) {
        return this.setNode("operator", value);
    }
    getOperator() {
        return this.operator;
    }
}
class Term extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Term;
    }
    setOperator(value) {
        return this.setNode("operator", value);
    }
    getOperator() {
        return this.operator;
    }
    setExpression(value) {
        return this.setNode("expression", value);
    }
    getExpression() {
        return this.expression;
    }
}
class AttributeSelector extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.AttributeSelector;
    }
    setNamespacePrefix(value) {
        return this.setNode("namespacePrefix", value);
    }
    getNamespacePrefix() {
        return this.namespacePrefix;
    }
    setIdentifier(value) {
        return this.setNode("identifier", value);
    }
    getIdentifier() {
        return this.identifier;
    }
    setOperator(operator) {
        return this.setNode("operator", operator);
    }
    getOperator() {
        return this.operator;
    }
    setValue(value) {
        return this.setNode("value", value);
    }
    getValue() {
        return this.value;
    }
}
class Operator extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Operator;
    }
}
class HexColorValue extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.HexColorValue;
    }
}
class RatioValue extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.RatioValue;
    }
}
const _dot = ".".charCodeAt(0), _0 = "0".charCodeAt(0), _9 = "9".charCodeAt(0);
class NumericValue extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.NumericValue;
    }
    getValue() {
        const raw = this.getText();
        let unitIdx = 0;
        let code;
        for (let i = 0, len = raw.length; i < len; i++) {
            code = raw.charCodeAt(i);
            if (!((_0 <= code && code <= _9) || code === _dot)) {
                break;
            }
            unitIdx += 1;
        }
        return {
            value: raw.substring(0, unitIdx),
            unit: unitIdx < raw.length ? raw.substring(unitIdx) : undefined,
        };
    }
}
class VariableDeclaration extends AbstractDeclaration {
    constructor(offset, length) {
        super(offset, length);
        this.needsSemicolon = true;
    }
    get type() {
        return NodeType.VariableDeclaration;
    }
    setVariable(node) {
        if (node) {
            node.attachTo(this);
            this.variable = node;
            return true;
        }
        return false;
    }
    getVariable() {
        return this.variable;
    }
    getName() {
        return this.variable ? this.variable.getName() : "";
    }
    setValue(node) {
        if (node) {
            node.attachTo(this);
            this.value = node;
            return true;
        }
        return false;
    }
    getValue() {
        return this.value;
    }
}
class Interpolation extends Node {
    // private _interpolations: void; // workaround for https://github.com/Microsoft/TypeScript/issues/18276
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Interpolation;
    }
}
class Variable extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.VariableName;
    }
    getName() {
        return this.getText();
    }
}
class ExtendsReference extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.ExtendsReference;
    }
    getSelectors() {
        if (!this.selectors) {
            this.selectors = new Nodelist(this);
        }
        return this.selectors;
    }
}
class MixinContentReference extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinContentReference;
    }
    getArguments() {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    }
}
class MixinContentDeclaration extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinContentDeclaration;
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
}
class MixinReference extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinReference;
    }
    getNamespaces() {
        if (!this.namespaces) {
            this.namespaces = new Nodelist(this);
        }
        return this.namespaces;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
    getArguments() {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    }
    setContent(node) {
        return this.setNode("content", node);
    }
    getContent() {
        return this.content;
    }
}
class MixinDeclaration extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinDeclaration;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : "";
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
    setGuard(node) {
        if (node) {
            node.attachTo(this);
            this.guard = node;
        }
        return false;
    }
}
class UnknownAtRule extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.UnknownAtRule;
    }
    setAtRuleName(atRuleName) {
        this.atRuleName = atRuleName;
    }
    getAtRuleName() {
        return this.atRuleName;
    }
}
class ListEntry extends Node {
    get type() {
        return NodeType.ListEntry;
    }
    setKey(node) {
        return this.setNode("key", node, 0);
    }
    setValue(node) {
        return this.setNode("value", node, 1);
    }
}
class LessGuard extends Node {
    getConditions() {
        if (!this.conditions) {
            this.conditions = new Nodelist(this);
        }
        return this.conditions;
    }
}
class GuardCondition extends Node {
    setVariable(node) {
        return this.setNode("variable", node);
    }
}
class Module extends Node {
    get type() {
        return NodeType.Module;
    }
    setIdentifier(node) {
        return this.setNode("identifier", node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
}
var Level;
(function (Level) {
    Level[Level["Ignore"] = 1] = "Ignore";
    Level[Level["Warning"] = 2] = "Warning";
    Level[Level["Error"] = 4] = "Error";
})(Level || (Level = {}));
class Marker {
    constructor(node, rule, level, message, offset = node.offset, length = node.length) {
        this.node = node;
        this.rule = rule;
        this.level = level;
        this.message = message || rule.message;
        this.offset = offset;
        this.length = length;
    }
    getRule() {
        return this.rule;
    }
    getLevel() {
        return this.level;
    }
    getOffset() {
        return this.offset;
    }
    getLength() {
        return this.length;
    }
    getNode() {
        return this.node;
    }
    getMessage() {
        return this.message;
    }
}
/*
export class DefaultVisitor implements IVisitor {

    public visitNode(node:Node):boolean {
        switch (node.type) {
            case NodeType.Stylesheet:
                return this.visitStylesheet(<Stylesheet> node);
            case NodeType.FontFace:
                return this.visitFontFace(<FontFace> node);
            case NodeType.Ruleset:
                return this.visitRuleSet(<RuleSet> node);
            case NodeType.Selector:
                return this.visitSelector(<Selector> node);
            case NodeType.SimpleSelector:
                return this.visitSimpleSelector(<SimpleSelector> node);
            case NodeType.Declaration:
                return this.visitDeclaration(<Declaration> node);
            case NodeType.Function:
                return this.visitFunction(<Function> node);
            case NodeType.FunctionDeclaration:
                return this.visitFunctionDeclaration(<FunctionDeclaration> node);
            case NodeType.FunctionParameter:
                return this.visitFunctionParameter(<FunctionParameter> node);
            case NodeType.FunctionArgument:
                return this.visitFunctionArgument(<FunctionArgument> node);
            case NodeType.Term:
                return this.visitTerm(<Term> node);
            case NodeType.Declaration:
                return this.visitExpression(<Expression> node);
            case NodeType.NumericValue:
                return this.visitNumericValue(<NumericValue> node);
            case NodeType.Page:
                return this.visitPage(<Page> node);
            case NodeType.PageBoxMarginBox:
                return this.visitPageBoxMarginBox(<PageBoxMarginBox> node);
            case NodeType.Property:
                return this.visitProperty(<Property> node);
            case NodeType.NumericValue:
                return this.visitNodelist(<Nodelist> node);
            case NodeType.Import:
                return this.visitImport(<Import> node);
            case NodeType.Namespace:
                return this.visitNamespace(<Namespace> node);
            case NodeType.Keyframe:
                return this.visitKeyframe(<Keyframe> node);
            case NodeType.KeyframeSelector:
                return this.visitKeyframeSelector(<KeyframeSelector> node);
            case NodeType.MixinDeclaration:
                return this.visitMixinDeclaration(<MixinDeclaration> node);
            case NodeType.MixinReference:
                return this.visitMixinReference(<MixinReference> node);
            case NodeType.Variable:
                return this.visitVariable(<Variable> node);
            case NodeType.VariableDeclaration:
                return this.visitVariableDeclaration(<VariableDeclaration> node);
        }
        return this.visitUnknownNode(node);
    }

    public visitFontFace(node:FontFace):boolean {
        return true;
    }

    public visitKeyframe(node:Keyframe):boolean {
        return true;
    }

    public visitKeyframeSelector(node:KeyframeSelector):boolean {
        return true;
    }

    public visitStylesheet(node:Stylesheet):boolean {
        return true;
    }

    public visitProperty(Node:Property):boolean {
        return true;
    }

    public visitRuleSet(node:RuleSet):boolean {
        return true;
    }

    public visitSelector(node:Selector):boolean {
        return true;
    }

    public visitSimpleSelector(node:SimpleSelector):boolean {
        return true;
    }

    public visitDeclaration(node:Declaration):boolean {
        return true;
    }

    public visitFunction(node:Function):boolean {
        return true;
    }

    public visitFunctionDeclaration(node:FunctionDeclaration):boolean {
        return true;
    }

    public visitInvocation(node:Invocation):boolean {
        return true;
    }

    public visitTerm(node:Term):boolean {
        return true;
    }

    public visitImport(node:Import):boolean {
        return true;
    }

    public visitNamespace(node:Namespace):boolean {
        return true;
    }

    public visitExpression(node:Expression):boolean {
        return true;
    }

    public visitNumericValue(node:NumericValue):boolean {
        return true;
    }

    public visitPage(node:Page):boolean {
        return true;
    }

    public visitPageBoxMarginBox(node:PageBoxMarginBox):boolean {
        return true;
    }

    public visitNodelist(node:Nodelist):boolean {
        return true;
    }

    public visitVariableDeclaration(node:VariableDeclaration):boolean {
        return true;
    }

    public visitVariable(node:Variable):boolean {
        return true;
    }

    public visitMixinDeclaration(node:MixinDeclaration):boolean {
        return true;
    }

    public visitMixinReference(node:MixinReference):boolean {
        return true;
    }

    public visitUnknownNode(node:Node):boolean {
        return true;
    }
}
*/
class ParseErrorCollector {
    static entries(node) {
        const visitor = new ParseErrorCollector();
        node.acceptVisitor(visitor);
        return visitor.entries;
    }
    constructor() {
        this.entries = [];
    }
    visitNode(node) {
        if (node.isErroneous()) {
            node.collectIssues(this.entries);
        }
        return true;
    }
}
//# sourceMappingURL=cssNodes.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/cssParser.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Parser: function() { return Parser; }
});
/* ESM import */var _cssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner */ "../vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* ESM import */var _cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _cssErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssErrors */ "../vscode-css-languageservice/lib/esm/parser/cssErrors.js");
/* ESM import */var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languageFacts/facts */ "../vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* ESM import */var _utils_objects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/objects */ "../vscode-css-languageservice/lib/esm/utils/objects.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






/// <summary>
/// A parser for the css core specification. See for reference:
/// https://www.w3.org/TR/CSS21/grammar.html
/// http://www.w3.org/TR/CSS21/syndata.html#tokenization
/// </summary>
class Parser {
    constructor({ scanner, syntax } = {}) {
        this.keyframeRegex = /^@(\-(webkit|ms|moz|o)\-)?keyframes$/i;
        this.syntax = syntax;
        this.scanner = scanner || new _cssScanner__WEBPACK_IMPORTED_MODULE_0__.Scanner({ syntax });
        this.token = { type: _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF, offset: -1, len: 0, text: "" };
        this.prevToken = undefined;
    }
    configure({ syntax }) {
        this.syntax = syntax;
        this.scanner.configure({ syntax });
    }
    peekIdent(text) {
        return (_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident === this.token.type &&
            text.length === this.token.text.length &&
            text === this.token.text.toLowerCase());
    }
    peekKeyword(text) {
        return (_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword === this.token.type &&
            text.length === this.token.text.length &&
            text === this.token.text.toLowerCase());
    }
    peekDelim(text) {
        return _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim === this.token.type && text === this.token.text;
    }
    peek(type) {
        return type === this.token.type;
    }
    peekOne(...types) {
        return types.indexOf(this.token.type) !== -1;
    }
    peekRegExp(type, regEx) {
        if (type !== this.token.type) {
            return false;
        }
        return regEx.test(this.token.text);
    }
    hasWhitespace() {
        return !!this.prevToken && this.prevToken.offset + this.prevToken.len !== this.token.offset;
    }
    consumeToken() {
        this.prevToken = this.token;
        this.token = this.scanner.scan();
    }
    acceptUnicodeRange() {
        const token = this.scanner.tryScanUnicode();
        if (token) {
            this.prevToken = token;
            this.token = this.scanner.scan();
            return true;
        }
        return false;
    }
    mark() {
        return {
            prev: this.prevToken,
            curr: this.token,
            depth: this.scanner.stream.depth,
            pos: this.scanner.pos(),
        };
    }
    restoreAtMark(mark) {
        this.prevToken = mark.prev;
        this.token = mark.curr;
        this.scanner.goBackTo(mark.pos, mark.depth);
    }
    try(func) {
        const pos = this.mark();
        const node = func();
        if (!node) {
            this.restoreAtMark(pos);
            return null;
        }
        return node;
    }
    acceptOneKeyword(keywords) {
        if (_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword === this.token.type) {
            for (const keyword of keywords) {
                if (keyword.length === this.token.text.length && keyword === this.token.text.toLowerCase()) {
                    this.consumeToken();
                    return true;
                }
            }
        }
        return false;
    }
    accept(type) {
        if (type === this.token.type) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptIdent(text) {
        if (this.peekIdent(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptKeyword(text) {
        if (this.peekKeyword(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptDelim(text) {
        if (this.peekDelim(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptRegexp(regEx) {
        if (regEx.test(this.token.text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    _parseRegexp(regEx) {
        let node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier);
        do { } while (this.acceptRegexp(regEx));
        return this.finish(node);
    }
    acceptUnquotedString() {
        const pos = this.scanner.pos();
        const depth = this.scanner.stream.depth;
        this.scanner.goBackTo(this.token.offset, depth);
        const unquoted = this.scanner.scanUnquotedString();
        if (unquoted) {
            let node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.StringLiteral);
            this.token = unquoted;
            this.consumeToken();
            return this.finish(node);
        }
        this.scanner.goBackTo(pos, depth);
        return null;
    }
    resync(resyncTokens, resyncStopTokens) {
        while (true) {
            if (resyncTokens && resyncTokens.indexOf(this.token.type) !== -1) {
                this.consumeToken();
                return true;
            }
            else if (resyncStopTokens && resyncStopTokens.indexOf(this.token.type) !== -1) {
                return true;
            }
            else {
                if (this.token.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) {
                    return false;
                }
                this.token = this.scanner.scan();
            }
        }
    }
    createNode(nodeType) {
        return new _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node(this.token.offset, this.token.len, nodeType);
    }
    create(ctor) {
        return new ctor(this.token.offset, this.token.len);
    }
    finish(node, error, resyncTokens, resyncStopTokens) {
        // parseNumeric misuses error for boolean flagging (however the real error mustn't be a false)
        // + nodelist offsets mustn't be modified, because there is a offset hack in rulesets for smartselection
        if (!(node instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Nodelist)) {
            if (error) {
                this.markError(node, error, resyncTokens, resyncStopTokens);
            }
            // set the node end position
            if (this.prevToken) {
                // length with more elements belonging together
                const prevEnd = this.prevToken.offset + this.prevToken.len;
                node.length = prevEnd > node.offset ? prevEnd - node.offset : 0; // offset is taken from current token, end from previous: Use 0 for empty nodes
            }
        }
        return node;
    }
    markError(node, error, resyncTokens, resyncStopTokens) {
        if (this.token !== this.lastErrorToken) {
            // do not report twice on the same token
            node.addIssue(new _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Marker(node, error, _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Level.Error, undefined, this.token.offset, this.token.len));
            this.lastErrorToken = this.token;
        }
        if (resyncTokens || resyncStopTokens) {
            this.resync(resyncTokens, resyncStopTokens);
        }
    }
    parseStylesheet(textDocument) {
        const versionId = textDocument.version;
        const syntax = textDocument.languageId === "sass" ? "indented" : "scss";
        this.configure({ syntax });
        const text = textDocument.getText();
        const textProvider = (offset, length) => {
            if (textDocument.version !== versionId) {
                throw new Error("Underlying model has changed, AST is no longer valid");
            }
            return text.substr(offset, length);
        };
        return this.internalParse(text, this._parseStylesheet, textProvider);
    }
    internalParse(input, parseFunc, textProvider) {
        this.scanner.setSource(input);
        this.token = this.scanner.scan();
        const node = parseFunc.bind(this)();
        if (node) {
            if (textProvider) {
                node.textProvider = textProvider;
            }
            else {
                node.textProvider = (offset, length) => {
                    return input.substr(offset, length);
                };
            }
        }
        return node;
    }
    _parseStylesheet() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Stylesheet);
        if (this.syntax === "indented") {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline)) {
                // allow empty statements
            }
        }
        while (node.addChild(this._parseStylesheetStart())) {
            // Parse statements only valid at the beginning of stylesheets.
        }
        let inRecovery = false;
        do {
            let hasMatch = false;
            do {
                hasMatch = false;
                const statement = this._parseStylesheetStatement();
                if (statement) {
                    node.addChild(statement);
                    hasMatch = true;
                    inRecovery = false;
                    if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) && this._needsSemicolonAfter(statement) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                        this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
                    }
                }
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline) ||
                    this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent) ||
                    this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) ||
                    this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CDO) ||
                    this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CDC)) {
                    // accept empty statements
                    hasMatch = true;
                    inRecovery = false;
                }
            } while (hasMatch);
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF)) {
                break;
            }
            if (!inRecovery) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
                    this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownAtRule);
                }
                else {
                    this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RuleOrSelectorExpected);
                }
                inRecovery = true;
            }
            this.consumeToken();
        } while (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF));
        return this.finish(node);
    }
    _parseStylesheetStart() {
        return this._parseCharset();
    }
    _parseStylesheetStatement(isNested = false) {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this._parseStylesheetAtStatement(isNested);
        }
        return this._parseRuleset(isNested);
    }
    _parseStylesheetAtStatement(isNested = false) {
        return (this._parseImport() ||
            this._parseMedia(isNested) ||
            this._parsePage() ||
            this._parseFontFace() ||
            this._parseKeyframe() ||
            this._parseSupports(isNested) ||
            this._parseLayer(isNested) ||
            this._parsePropertyAtRule() ||
            this._parseViewPort() ||
            this._parseNamespace() ||
            this._parseDocument() ||
            this._parseContainer(isNested) ||
            this._parseUnknownAtRule());
    }
    _tryParseRuleset(isNested) {
        const mark = this.mark();
        if (this._parseSelector(isNested)) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma) && this._parseSelector(isNested)) {
                // loop
            }
            if (this.syntax === "indented") {
                if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent)) {
                    this.restoreAtMark(mark);
                    return this._parseRuleset(isNested);
                }
            }
            else {
                if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
                    this.restoreAtMark(mark);
                    return this._parseRuleset(isNested);
                }
            }
        }
        this.restoreAtMark(mark);
        return null;
    }
    _parseRuleset(isNested = false) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.RuleSet);
        const selectors = node.getSelectors();
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline)) {
            // accept empty statements
        }
        if (!selectors.addChild(this._parseSelector(isNested))) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline)) {
                // accept any newlines after , and the next selector
            }
            if (!selectors.addChild(this._parseSelector(isNested))) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SelectorExpected);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseRuleSetDeclarationAtStatement() {
        return (this._parseMedia(true) ||
            this._parseSupports(true) ||
            this._parseLayer(true) ||
            this._parseContainer(true) ||
            this._parseUnknownAtRule());
    }
    _parseRuleSetDeclaration() {
        // https://www.w3.org/TR/css-syntax-3/#consume-a-list-of-declarations
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this._parseRuleSetDeclarationAtStatement();
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return this._parseRuleset(true);
        }
        return this._tryParseRuleset(true) || this._parseDeclaration();
    }
    _needsSemicolonAfter(node) {
        if (this.syntax === "indented") {
            return false;
        }
        switch (node.type) {
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Keyframe:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ViewPort:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Media:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Ruleset:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Namespace:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.If:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.For:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Each:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.While:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinDeclaration:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FunctionDeclaration:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinContentDeclaration:
                return false;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ExtendsReference:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinContentReference:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ReturnStatement:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MediaQuery:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Debug:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Import:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.AtApplyRule:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.CustomPropertyDeclaration:
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.VariableDeclaration:
                return node.needsSemicolon;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinReference:
                return !node.getContent();
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declaration:
                return !node.getNestedProperties();
        }
        return false;
    }
    _parseDeclarations(parseDeclaration) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declarations);
        if (this.syntax === "indented") {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent)) {
                return null;
            }
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline)) {
                // accept empty statements
            }
        }
        else {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
                return null;
            }
        }
        let initialDepth = this.scanner.stream.depth;
        let decl = parseDeclaration();
        while (node.addChild(decl)) {
            if (this.syntax === "indented") {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent)) {
                    break;
                }
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline)) {
                    // accept empty statements
                }
            }
            else {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR)) {
                    break;
                }
                if (this._needsSemicolonAfter(decl) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]);
                }
                // We accepted semicolon token. Link it to declaration.
                if (decl && this.prevToken && this.prevToken.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) {
                    decl.semicolonPosition = this.prevToken.offset;
                }
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                    // accept empty statements
                }
            }
            if (this.syntax === "indented" && this.scanner.stream.depth < initialDepth) {
                // For the indented syntax we might not get the same number of
                // dedents as we get indents. If the depth is zero at this point
                // we should drop out so we don't end up adding a ruleset as a
                // child of another ruleset when in reality it's a direct child
                // of Stylesheet
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent)) {
                    // Accept any dedents there may be
                }
                return this.finish(node);
            }
            decl = parseDeclaration();
        }
        if (this.syntax === "indented") {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF)) {
                return this.finish(node);
            }
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword) || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtIncludeShort)) {
                return this.finish(node);
            }
            let mark = this.mark();
            if (this._parseSelector(true)) {
                this.restoreAtMark(mark);
                return this.finish(node);
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.DedentExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF]);
            }
        }
        else {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
            }
        }
        return this.finish(node);
    }
    _parseBody(node, parseDeclaration) {
        if (!node.setDeclarations(this._parseDeclarations(parseDeclaration))) {
            if (this.syntax === "indented") {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IndentExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent]);
            }
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
        }
        return this.finish(node);
    }
    _parseSelector(isNested) {
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline)) {
            // loop
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Selector);
        let hasContent = false;
        if (isNested) {
            // nested selectors can start with a combinator
            hasContent = node.addChild(this._parseCombinator());
        }
        while (node.addChild(this._parseSimpleSelector())) {
            hasContent = true;
            node.addChild(this._parseCombinator()); // optional
        }
        return hasContent ? this.finish(node) : null;
    }
    _parseDeclaration(stopTokens) {
        const customProperty = this._tryParseCustomPropertyDeclaration(stopTokens);
        if (customProperty) {
            return customProperty;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return (this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon], stopTokens || [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]));
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        if (!node.setValue(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.PropertyValueExpected);
        }
        node.addChild(this._parsePrio());
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    }
    _tryParseCustomPropertyDeclaration(stopTokens) {
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.CustomPropertyDeclaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon]);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        const mark = this.mark();
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL) || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent)) {
            // try to parse it as nested declaration
            const propertySet = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.CustomPropertySet);
            const declarations = this._parseDeclarations(this._parseRuleSetDeclaration.bind(this));
            if (propertySet.setDeclarations(declarations) && !declarations.isErroneous(true)) {
                propertySet.addChild(this._parsePrio());
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                    this.finish(propertySet);
                    node.setPropertySet(propertySet);
                    node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
                    return this.finish(node);
                }
            }
            this.restoreAtMark(mark);
        }
        // try to parse as expression
        const expression = this._parseExpr();
        if (expression && !expression.isErroneous(true)) {
            this._parsePrio();
            if (this.peekOne(...(stopTokens || []), _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) ||
                (this.syntax === "indented" && this.peekOne(...(stopTokens || []), _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent))) {
                node.setValue(expression);
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                    node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
                }
                return this.finish(node);
            }
        }
        this.restoreAtMark(mark);
        node.addChild(this._parseCustomPropertyValue(stopTokens));
        node.addChild(this._parsePrio());
        if ((0,_utils_objects__WEBPACK_IMPORTED_MODULE_4__.isDefined)(node.colonPosition) && this.token.offset === node.colonPosition + 1) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.PropertyValueExpected);
        }
        return this.finish(node);
    }
    /**
     * Parse custom property values.
     *
     * Based on https://www.w3.org/TR/css-variables/#syntax
     *
     * This code is somewhat unusual, as the allowed syntax is incredibly broad,
     * parsing almost any sequence of tokens, save for a small set of exceptions.
     * Unbalanced delimitors, invalid tokens, and declaration
     * terminators like semicolons and !important directives (when not inside
     * of delimitors).
     */
    _parseCustomPropertyValue(stopTokens = [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        const isTopLevel = () => curlyDepth === 0 && parensDepth === 0 && bracketsDepth === 0;
        const onStopToken = () => stopTokens.indexOf(this.token.type) !== -1;
        let curlyDepth = 0;
        let parensDepth = 0;
        let bracketsDepth = 0;
        done: while (true) {
            switch (this.token.type) {
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent:
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline: {
                    if (this.syntax === "indented") {
                        break done;
                    }
                    break;
                }
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon:
                    // A semicolon only ends things if we're not inside a delimitor.
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation:
                    // An exclamation ends the value if we're not inside delims.
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
                    curlyDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR:
                    curlyDepth--;
                    if (curlyDepth < 0) {
                        // The property value has been terminated without a semicolon, and
                        // this is the last declaration in the ruleset.
                        if (onStopToken() && parensDepth === 0 && bracketsDepth === 0) {
                            break done;
                        }
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL:
                    parensDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR:
                    parensDepth--;
                    if (parensDepth < 0) {
                        if (onStopToken() && bracketsDepth === 0 && curlyDepth === 0) {
                            break done;
                        }
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL:
                    bracketsDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR:
                    bracketsDepth--;
                    if (bracketsDepth < 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftSquareBracketExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString: // fall through
                    break done;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF:
                    if (this.syntax === "indented") {
                        break done;
                    }
                    // We shouldn't have reached the end of input, something is
                    // unterminated.
                    let error = _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected;
                    if (bracketsDepth > 0) {
                        error = _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected;
                    }
                    else if (parensDepth > 0) {
                        error = _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected;
                    }
                    return this.finish(node, error);
            }
            this.consumeToken();
        }
        return this.finish(node);
    }
    _tryToParseDeclaration(stopTokens) {
        const mark = this.mark();
        if (this._parseProperty() && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            // looks like a declaration, go ahead
            this.restoreAtMark(mark);
            return this._parseDeclaration(stopTokens);
        }
        this.restoreAtMark(mark);
        return null;
    }
    _parseProperty() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Property);
        const mark = this.mark();
        if (this.acceptDelim("*") || this.acceptDelim("_")) {
            // support for  IE 5.x, 6 and 7 star hack: see http://en.wikipedia.org/wiki/CSS_filter#Star_hack
            if (this.hasWhitespace()) {
                this.restoreAtMark(mark);
                return null;
            }
        }
        if (node.setIdentifier(this._parsePropertyIdentifier())) {
            return this.finish(node);
        }
        return null;
    }
    _parsePropertyIdentifier() {
        return this._parseIdent();
    }
    _parseCharset() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Charset)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // charset
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.String)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        if (this.syntax === "indented" && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnexpectedSemicolon);
        }
        else if (this.syntax !== "indented" && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseImport() {
        // @import [ <url> | <string> ]
        //     [ layer | layer(<layer-name>) ]?
        //     <import-condition> ;
        // <import-conditions> = [ supports( [ <supports-condition> | <declaration> ] ) ]?
        //                      <media-query-list>?
        if (!this.peekKeyword("@import")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Import);
        this.consumeToken(); // @import
        if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.URIOrStringExpected);
        }
        return this._completeParseImport(node);
    }
    _completeParseImport(node) {
        if (this.acceptIdent("layer")) {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                if (!node.addChild(this._parseLayerName())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR], []);
                }
            }
        }
        if (this.acceptIdent("supports")) {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                node.addChild(this._tryToParseDeclaration() || this._parseSupportsCondition());
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR], []);
                }
            }
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) &&
            !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) &&
            !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline) &&
            !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent)) {
            node.setMedialist(this._parseMediaQueryList());
        }
        return this.finish(node);
    }
    _parseNamespace() {
        // http://www.w3.org/TR/css3-namespace/
        // namespace  : NAMESPACE_SYM S* [IDENT S*]? [STRING|URI] S* ';' S*
        if (!this.peekKeyword("@namespace")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Namespace);
        this.consumeToken(); // @namespace
        if (!node.addChild(this._parseURILiteral())) {
            // url literal also starts with ident
            node.addChild(this._parseIdent()); // optional prefix
            if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.URIExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
            }
        }
        if (this.syntax === "indented" && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnexpectedSemicolon);
        }
        else if (this.syntax !== "indented" && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseFontFace() {
        if (!this.peekKeyword("@font-face")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FontFace);
        this.consumeToken(); // @font-face
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseViewPort() {
        if (!this.peekKeyword("@-ms-viewport") && !this.peekKeyword("@-o-viewport") && !this.peekKeyword("@viewport")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ViewPort);
        this.consumeToken(); // @-ms-viewport
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseKeyframe() {
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword, this.keyframeRegex)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Keyframe);
        const atNode = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // atkeyword
        node.setKeyword(this.finish(atNode));
        if (atNode.matches("@-ms-keyframes")) {
            // -ms-keyframes never existed
            this.markError(atNode, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownKeyword);
        }
        if (!node.setIdentifier(this._parseKeyframeIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]);
        }
        return this._parseBody(node, this._parseKeyframeSelector.bind(this));
    }
    _parseKeyframeIdent() {
        return this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Keyframe]);
    }
    _parseKeyframeSelector() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.KeyframeSelector);
        let hasContent = false;
        if (node.addChild(this._parseIdent())) {
            hasContent = true;
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
            hasContent = true;
        }
        if (!hasContent) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            hasContent = false;
            if (node.addChild(this._parseIdent())) {
                hasContent = true;
            }
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
                hasContent = true;
            }
            if (!hasContent) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.PercentageExpected);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _tryParseKeyframeSelector() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.KeyframeSelector);
        const pos = this.mark();
        let hasContent = false;
        if (node.addChild(this._parseIdent())) {
            hasContent = true;
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
            hasContent = true;
        }
        if (!hasContent) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            hasContent = false;
            if (node.addChild(this._parseIdent())) {
                hasContent = true;
            }
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
                hasContent = true;
            }
            if (!hasContent) {
                this.restoreAtMark(pos);
                return null;
            }
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent)) {
            this.restoreAtMark(pos);
            return null;
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parsePropertyAtRule() {
        // @property <custom-property-name> {
        // 	<declaration-list>
        //  }
        if (!this.peekKeyword("@property")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.PropertyAtRule);
        this.consumeToken(); // @layer
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/) || !node.setName(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Property]))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this._parseBody(node, this._parseDeclaration.bind(this));
    }
    _parseLayer(isNested = false) {
        // @layer layer-name {rules}
        // @layer layer-name;
        // @layer layer-name, layer-name, layer-name;
        // @layer {rules}
        if (!this.peekKeyword("@layer")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Layer);
        this.consumeToken(); // @layer
        const names = this._parseLayerNameList();
        if (names) {
            node.setNames(names);
        }
        if ((!names || names.getChildren().length === 1) && (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL) || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent))) {
            return this._parseBody(node, this._parseLayerDeclaration.bind(this, isNested));
        }
        if (this.syntax === "indented" && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnexpectedSemicolon);
        }
        else if (this.syntax !== "indented" && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseLayerDeclaration(isNested = false) {
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true) || this._tryToParseDeclaration() || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    }
    _parseLayerNameList() {
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.LayerNameList);
        if (!node.addChild(this._parseLayerName())) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!node.addChild(this._parseLayerName())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        return this.finish(node);
    }
    _parseLayerName() {
        // <layer-name> = <ident> [ '.' <ident> ]*
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.LayerName);
        if (!node.addChild(this._parseIdent())) {
            return null;
        }
        while (!this.hasWhitespace() && this.acceptDelim(".")) {
            if (this.hasWhitespace() || !node.addChild(this._parseIdent())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        return this.finish(node);
    }
    _parseSupports(isNested = false) {
        // SUPPORTS_SYM S* supports_condition '{' S* ruleset* '}' S*
        if (!this.peekKeyword("@supports")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Supports);
        this.consumeToken(); // @supports
        node.addChild(this._parseSupportsCondition());
        return this._parseBody(node, this._parseSupportsDeclaration.bind(this, isNested));
    }
    _parseSupportsDeclaration(isNested = false) {
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true) || this._tryToParseDeclaration() || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    }
    _parseSupportsCondition() {
        // supports_condition : supports_negation | supports_conjunction | supports_disjunction | supports_condition_in_parens ;
        // supports_condition_in_parens: ( '(' S* supports_condition S* ')' ) | supports_declaration_condition | general_enclosed ;
        // supports_negation: NOT S+ supports_condition_in_parens ;
        // supports_conjunction: supports_condition_in_parens ( S+ AND S+ supports_condition_in_parens )+;
        // supports_disjunction: supports_condition_in_parens ( S+ OR S+ supports_condition_in_parens )+;
        // supports_declaration_condition: '(' S* declaration ')';
        // general_enclosed: ( FUNCTION | '(' ) ( any | unused )* ')' ;
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.SupportsCondition);
        if (this.acceptIdent("not")) {
            node.addChild(this._parseSupportsConditionInParens());
        }
        else {
            node.addChild(this._parseSupportsConditionInParens());
            if (this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^(and|or)$/i)) {
                const text = this.token.text.toLowerCase();
                while (this.acceptIdent(text)) {
                    node.addChild(this._parseSupportsConditionInParens());
                }
            }
        }
        return this.finish(node);
    }
    _parseSupportsConditionInParens() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.SupportsCondition);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.prevToken) {
                node.lParent = this.prevToken.offset;
            }
            if (!node.addChild(this._tryToParseDeclaration([_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR]))) {
                if (!this._parseSupportsCondition()) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ConditionExpected);
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR], []);
            }
            if (this.prevToken) {
                node.rParent = this.prevToken.offset;
            }
            return this.finish(node);
        }
        else if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            const pos = this.mark();
            this.consumeToken();
            if (!this.hasWhitespace() && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                let openParentCount = 1;
                while (this.token.type !== _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF && openParentCount !== 0) {
                    if (this.token.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL) {
                        openParentCount++;
                    }
                    else if (this.token.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR) {
                        openParentCount--;
                    }
                    this.consumeToken();
                }
                return this.finish(node);
            }
            else {
                this.restoreAtMark(pos);
            }
        }
        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL]);
    }
    _parseMediaDeclaration(isNested = false) {
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true) || this._tryToParseDeclaration() || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    }
    _parseMedia(isNested = false) {
        // MEDIA_SYM S* media_query_list '{' S* ruleset* '}' S*
        // media_query_list : S* [media_query [ ',' S* media_query ]* ]?
        if (!this.peekKeyword("@media")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Media);
        this.consumeToken(); // @media
        if (!node.addChild(this._parseMediaQueryList())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
        }
        return this._parseBody(node, this._parseMediaDeclaration.bind(this, isNested));
    }
    _parseMediaQueryList() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Medialist);
        if (!node.addChild(this._parseMediaQuery())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!node.addChild(this._parseMediaQuery())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
            }
        }
        return this.finish(node);
    }
    _parseMediaQuery() {
        // <media-query> = <media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MediaQuery);
        const pos = this.mark();
        this.acceptIdent("not");
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.acceptIdent("only")) {
                // optional
            }
            if (!node.addChild(this._parseIdent())) {
                return null;
            }
            if (this.acceptIdent("and")) {
                node.addChild(this._parseMediaCondition());
            }
        }
        else {
            this.restoreAtMark(pos); // 'not' is part of the MediaCondition
            node.addChild(this._parseMediaCondition());
        }
        return this.finish(node);
    }
    _parseRatio() {
        const pos = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.RatioValue);
        if (!this._parseNumeric()) {
            return null;
        }
        if (!this.acceptDelim("/")) {
            this.restoreAtMark(pos);
            return null;
        }
        if (!this._parseNumeric()) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.NumberExpected);
        }
        return this.finish(node);
    }
    _parseMediaCondition() {
        // <media-condition> = <media-not> | <media-and> | <media-or> | <media-in-parens>
        // <media-not> = not <media-in-parens>
        // <media-and> = <media-in-parens> [ and <media-in-parens> ]+
        // <media-or> = <media-in-parens> [ or <media-in-parens> ]+
        // <media-in-parens> = ( <media-condition> ) | <media-feature> | <general-enclosed>
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MediaCondition);
        this.acceptIdent("not");
        let parseExpression = true;
        while (parseExpression) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
            }
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL) || this.peekIdent("not")) {
                // <media-condition>
                node.addChild(this._parseMediaCondition());
            }
            else {
                node.addChild(this._parseMediaFeature());
            }
            // not yet implemented: general enclosed
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
            }
            parseExpression = this.acceptIdent("and") || this.acceptIdent("or");
        }
        return this.finish(node);
    }
    _parseMediaFeature() {
        const resyncStopToken = [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR];
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MediaFeature);
        // <media-feature> = ( [ <mf-plain> | <mf-boolean> | <mf-range> ] )
        // <mf-plain> = <mf-name> : <mf-value>
        // <mf-boolean> = <mf-name>
        // <mf-range> = <mf-name> [ '<' | '>' ]? '='? <mf-value> | <mf-value> [ '<' | '>' ]? '='? <mf-name> | <mf-value> '<' '='? <mf-name> '<' '='? <mf-value> | <mf-value> '>' '='? <mf-name> '>' '='? <mf-value>
        if (node.addChild(this._parseMediaFeatureName())) {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
                if (!node.addChild(this._parseMediaFeatureValue())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                }
            }
            else if (this._parseMediaFeatureRangeOperator()) {
                if (!node.addChild(this._parseMediaFeatureValue())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                }
                if (this._parseMediaFeatureRangeOperator()) {
                    if (!node.addChild(this._parseMediaFeatureValue())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                    }
                }
            }
            else {
                // <mf-boolean> = <mf-name>
            }
        }
        else if (node.addChild(this._parseMediaFeatureValue())) {
            if (!this._parseMediaFeatureRangeOperator()) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.OperatorExpected, [], resyncStopToken);
            }
            if (!node.addChild(this._parseMediaFeatureName())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [], resyncStopToken);
            }
            if (this._parseMediaFeatureRangeOperator()) {
                if (!node.addChild(this._parseMediaFeatureValue())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                }
            }
        }
        else {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [], resyncStopToken);
        }
        return this.finish(node);
    }
    _parseMediaFeatureRangeOperator() {
        if (this.acceptDelim("<") || this.acceptDelim(">")) {
            if (!this.hasWhitespace()) {
                this.acceptDelim("=");
            }
            return true;
        }
        else if (this.acceptDelim("=")) {
            return true;
        }
        return false;
    }
    _parseMediaFeatureName() {
        return this._parseIdent();
    }
    _parseMediaFeatureValue() {
        return this._parseRatio() || this._parseTermExpression();
    }
    _parseMedium() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (node.addChild(this._parseIdent())) {
            return this.finish(node);
        }
        else {
            return null;
        }
    }
    _parsePageDeclaration() {
        return this._parsePageMarginBox() || this._parseRuleSetDeclaration();
    }
    _parsePage() {
        // http://www.w3.org/TR/css3-page/
        // page_rule : PAGE_SYM S* page_selector_list '{' S* page_body '}' S*
        // page_body :  /* Can be empty */ declaration? [ ';' S* page_body ]? | page_margin_box page_body
        if (!this.peekKeyword("@page")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Page);
        this.consumeToken();
        if (node.addChild(this._parsePageSelector())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
                if (!node.addChild(this._parsePageSelector())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
                }
            }
        }
        return this._parseBody(node, this._parsePageDeclaration.bind(this));
    }
    _parsePageMarginBox() {
        // page_margin_box :  margin_sym S* '{' S* declaration? [ ';' S* declaration? ]* '}' S*
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.PageBoxMarginBox);
        if (!this.acceptOneKeyword(_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.pageBoxDirectives)) {
            this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownAtRule, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parsePageSelector() {
        // page_selector : pseudo_page+ | IDENT pseudo_page*
        // pseudo_page :  ':' [ "left" | "right" | "first" | "blank" ];
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        node.addChild(this._parseIdent()); // optional ident
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            if (!node.addChild(this._parseIdent())) {
                // optional ident
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        return this.finish(node);
    }
    _parseDocument() {
        // -moz-document is experimental but has been pushed to css4
        if (!this.peekKeyword("@-moz-document")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Document);
        this.consumeToken(); // @-moz-document
        // ignore all the rules, start back up again at first { (SCSS) or new line (indented)
        const _NWL = "\n".charCodeAt(0);
        const _CAR = "\r".charCodeAt(0);
        const _LFD = "\f".charCodeAt(0);
        const _CUL = "{".charCodeAt(0);
        this.scanner.stream.advanceWhileChar((ch) => {
            switch (ch) {
                case _CUL:
                case _NWL:
                case _CAR:
                case _LFD:
                    return false;
                default:
                    return true;
            }
        });
        this.consumeToken();
        return this._parseBody(node, this._parseStylesheetStatement.bind(this));
    }
    _parseContainerDeclaration(isNested = false) {
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true) || this._tryToParseDeclaration() || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    }
    _parseContainer(isNested = false) {
        if (!this.peekKeyword("@container")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Container);
        this.consumeToken(); // @container
        node.addChild(this._parseIdent()); // optional container name
        node.addChild(this._parseContainerQuery());
        return this._parseBody(node, this._parseContainerDeclaration.bind(this, isNested));
    }
    _parseContainerQuery() {
        // <container-query>     = not <query-in-parens>
        //                         | <query-in-parens> [ [ and <query-in-parens> ]* | [ or <query-in-parens> ]* ]
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.acceptIdent("not")) {
            node.addChild(this._parseContainerQueryInParens());
        }
        else {
            node.addChild(this._parseContainerQueryInParens());
            if (this.peekIdent("and")) {
                while (this.acceptIdent("and")) {
                    node.addChild(this._parseContainerQueryInParens());
                }
            }
            else if (this.peekIdent("or")) {
                while (this.acceptIdent("or")) {
                    node.addChild(this._parseContainerQueryInParens());
                }
            }
        }
        return this.finish(node);
    }
    _parseContainerQueryInParens() {
        // <query-in-parens>     = ( <container-query> )
        // 					  | ( <size-feature> )
        // 					  | style( <style-query> )
        // 					  | <general-enclosed>
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.peekIdent("not") || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                node.addChild(this._parseContainerQuery());
            }
            else {
                node.addChild(this._parseMediaFeature());
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
            }
        }
        else if (this.acceptIdent("style")) {
            if (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
            }
            node.addChild(this._parseStyleQuery());
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
            }
        }
        else {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
        }
        return this.finish(node);
    }
    _parseStyleQuery() {
        // <style-query>         = not <style-in-parens>
        // 					  | <style-in-parens> [ [ and <style-in-parens> ]* | [ or <style-in-parens> ]* ]
        // 					  | <style-feature>
        // <style-in-parens>     = ( <style-query> )
        // 					  | ( <style-feature> )
        // 					  | <general-enclosed>
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.acceptIdent("not")) {
            node.addChild(this._parseStyleInParens());
        }
        else if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            node.addChild(this._parseStyleInParens());
            if (this.peekIdent("and")) {
                while (this.acceptIdent("and")) {
                    node.addChild(this._parseStyleInParens());
                }
            }
            else if (this.peekIdent("or")) {
                while (this.acceptIdent("or")) {
                    node.addChild(this._parseStyleInParens());
                }
            }
        }
        else {
            node.addChild(this._parseDeclaration([_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR]));
        }
        return this.finish(node);
    }
    _parseStyleInParens() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            node.addChild(this._parseStyleQuery());
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
            }
        }
        else {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent]);
        }
        return this.finish(node);
    }
    // https://www.w3.org/TR/css-syntax-3/#consume-an-at-rule
    _parseUnknownAtRule() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.UnknownAtRule);
        node.addChild(this._parseUnknownAtRuleName());
        const isTopLevel = () => curlyDepth === 0 && parensDepth === 0 && bracketsDepth === 0;
        let curlyLCount = 0;
        let curlyDepth = 0;
        let parensDepth = 0;
        let bracketsDepth = 0;
        done: while (true) {
            switch (this.token.type) {
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon:
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Newline:
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF:
                    if (curlyDepth > 0 && this.syntax !== "indented") {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected);
                    }
                    else if (bracketsDepth > 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
                    }
                    else if (parensDepth > 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                    }
                    else {
                        return this.finish(node);
                    }
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent:
                    curlyLCount++;
                    curlyDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent:
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR:
                    if (this.token.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent) {
                        curlyDepth = this.scanner.stream.depth;
                    }
                    else {
                        curlyDepth--;
                    }
                    // End of at-rule, consume CurlyR and return node
                    if (curlyLCount > 0 && curlyDepth === 0) {
                        this.consumeToken();
                        if (bracketsDepth > 0) {
                            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
                        }
                        else if (parensDepth > 0) {
                            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                        }
                        break done;
                    }
                    if (curlyDepth < 0) {
                        // The property value has been terminated without a semicolon, and
                        // this is the last declaration in the ruleset.
                        if (parensDepth === 0 && bracketsDepth === 0) {
                            break done;
                        }
                        if (this.syntax === "indented") {
                            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IndentExpected);
                        }
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL:
                    parensDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR:
                    parensDepth--;
                    if (parensDepth < 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL:
                    bracketsDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR:
                    bracketsDepth--;
                    if (bracketsDepth < 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftSquareBracketExpected);
                    }
                    break;
            }
            this.consumeToken();
        }
        return node;
    }
    _parseUnknownAtRuleName() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this.finish(node);
        }
        return node;
    }
    _parseOperator() {
        // these are operators for binary expressions
        if (this.peekDelim("/") ||
            this.peekDelim("*") ||
            this.peekDelim("+") ||
            this.peekDelim("-") ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dashmatch) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Includes) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SubstringOperator) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.PrefixOperator) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SuffixOperator) ||
            this.peekDelim("=")) {
            // doesn't stick to the standard here
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Operator);
            this.consumeToken();
            return this.finish(node);
        }
        else {
            return null;
        }
    }
    _parseUnaryOperator() {
        if (!this.peekDelim("+") && !this.peekDelim("-")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken();
        return this.finish(node);
    }
    _parseCombinator() {
        if (this.peekDelim(">")) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            const mark = this.mark();
            if (!this.hasWhitespace() && this.acceptDelim(">")) {
                if (!this.hasWhitespace() && this.acceptDelim(">")) {
                    node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorShadowPiercingDescendant;
                    return this.finish(node);
                }
                this.restoreAtMark(mark);
            }
            node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorParent;
            return this.finish(node);
        }
        else if (this.peekDelim("+")) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorSibling;
            return this.finish(node);
        }
        else if (this.peekDelim("~")) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorAllSiblings;
            return this.finish(node);
        }
        else if (this.peekDelim("/")) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            const mark = this.mark();
            if (!this.hasWhitespace() && this.acceptIdent("deep") && !this.hasWhitespace() && this.acceptDelim("/")) {
                node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorShadowPiercingDescendant;
                return this.finish(node);
            }
            this.restoreAtMark(mark);
        }
        return null;
    }
    _parseSimpleSelector() {
        // simple_selector
        //  : element_name [ HASH | class | attrib | pseudo ]* | [ HASH | class | attrib | pseudo ]+ ;
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.SimpleSelector);
        let c = 0;
        if (node.addChild(this._parseElementName() || this._parseNestingSelector())) {
            c++;
        }
        while ((c === 0 || !this.hasWhitespace()) && node.addChild(this._parseSimpleSelectorBody())) {
            c++;
        }
        return c > 0 ? this.finish(node) : null;
    }
    _parseNestingSelector() {
        if (this.peekDelim("&")) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinator);
            this.consumeToken();
            return this.finish(node);
        }
        return null;
    }
    _parseSimpleSelectorBody() {
        return this._parsePseudo() || this._parseHash() || this._parseClass() || this._parseAttrib();
    }
    _parseSelectorIdent() {
        return this._parseIdent();
    }
    _parseHash() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Hash) && !this.peekDelim("#")) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.IdentifierSelector);
        if (this.acceptDelim("#")) {
            if (this.hasWhitespace() || !node.addChild(this._parseSelectorIdent())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        else {
            this.consumeToken(); // TokenType.Hash
        }
        return this.finish(node);
    }
    _parseClass() {
        // class: '.' IDENT ;
        if (!this.peekDelim(".")) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ClassSelector);
        this.consumeToken(); // '.'
        if (this.hasWhitespace() || !node.addChild(this._parseSelectorIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this.finish(node);
    }
    _parseElementName() {
        // element_name: (ns? '|')? IDENT | '*';
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ElementNameSelector);
        node.addChild(this._parseNamespacePrefix());
        if (!node.addChild(this._parseSelectorIdent()) && !this.acceptDelim("*")) {
            this.restoreAtMark(pos);
            return null;
        }
        return this.finish(node);
    }
    _parseNamespacePrefix() {
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.NamespacePrefix);
        if (!node.addChild(this._parseIdent()) && !this.acceptDelim("*")) {
            // ns is optional
        }
        if (!this.acceptDelim("|")) {
            this.restoreAtMark(pos);
            return null;
        }
        return this.finish(node);
    }
    _parseAttrib() {
        // attrib : '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S*   [ IDENT | STRING ] S* ]? ']'
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.AttributeSelector);
        this.consumeToken(); // BracketL
        // Optional attrib namespace
        node.setNamespacePrefix(this._parseNamespacePrefix());
        if (!node.setIdentifier(this._parseIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        if (node.setOperator(this._parseOperator())) {
            node.setValue(this._parseBinaryExpr());
            this.acceptIdent("i"); // case insensitive matching
            this.acceptIdent("s"); // case sensitive matching
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
        }
        return this.finish(node);
    }
    _parsePseudo() {
        // pseudo: ':' [ IDENT | FUNCTION S* [IDENT S*]? ')' ]
        const node = this._tryParsePseudoIdentifier();
        if (node) {
            if (!this.hasWhitespace() && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                const tryAsSelector = () => {
                    const selectors = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
                    if (!selectors.addChild(this._parseSelector(true))) {
                        return null;
                    }
                    while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma) && selectors.addChild(this._parseSelector(true))) {
                        // loop
                    }
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                        return this.finish(selectors);
                    }
                    return null;
                };
                let hasSelector = node.addChild(this.try(tryAsSelector));
                if (!hasSelector) {
                    if (node.addChild(this._parseBinaryExpr()) &&
                        this.acceptIdent("of") &&
                        !node.addChild(this.try(tryAsSelector))) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SelectorExpected);
                    }
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                }
            }
            return this.finish(node);
        }
        return null;
    }
    _tryParsePseudoIdentifier() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return null;
        }
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.PseudoSelector);
        this.consumeToken(); // Colon
        if (this.hasWhitespace() || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent)) {
            this.restoreAtMark(pos);
            return null;
        }
        // optional, support ::
        this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon);
        if (this.hasWhitespace() || !node.addChild(this._parseIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this.finish(node);
    }
    _tryParsePrio() {
        const mark = this.mark();
        const prio = this._parsePrio();
        if (prio) {
            return prio;
        }
        this.restoreAtMark(mark);
        return null;
    }
    _parsePrio() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation)) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Prio);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation) && this.acceptIdent("important")) {
            return this.finish(node);
        }
        return null;
    }
    _parseExpr(stopOnComma = false) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Expression);
        if (!node.addChild(this._parseBinaryExpr())) {
            return null;
        }
        while (true) {
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
                // optional
                if (stopOnComma) {
                    return this.finish(node);
                }
                this.consumeToken();
            }
            if (!node.addChild(this._parseBinaryExpr())) {
                break;
            }
        }
        return this.finish(node);
    }
    _parseUnicodeRange() {
        if (!this.peekIdent("u")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.UnicodeRange);
        if (!this.acceptUnicodeRange()) {
            return null;
        }
        return this.finish(node);
    }
    _parseNamedLine() {
        // https://www.w3.org/TR/css-grid-1/#named-lines
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL)) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.GridLine);
        this.consumeToken();
        while (node.addChild(this._parseIdent())) {
            // repeat
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
        }
        return this.finish(node);
    }
    _parseBinaryExpr(preparsedLeft, preparsedOper) {
        let node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.BinaryExpression);
        if (!node.setLeft(preparsedLeft || this._parseTerm())) {
            return null;
        }
        if (!node.setOperator(preparsedOper || this._parseOperator())) {
            return this.finish(node);
        }
        if (!node.setRight(this._parseTerm())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected);
        }
        // things needed for multiple binary expressions
        node = this.finish(node);
        const operator = this._parseOperator();
        if (operator) {
            node = this._parseBinaryExpr(node, operator);
        }
        return this.finish(node);
    }
    _parseTerm() {
        let node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Term);
        node.setOperator(this._parseUnaryOperator()); // optional
        if (node.setExpression(this._parseTermExpression())) {
            return this.finish(node);
        }
        return null;
    }
    _parseTermExpression() {
        return (this._parseURILiteral() || // url before function
            this._parseUnicodeRange() ||
            this._parseFunction() || // function before ident
            this._parseIdent() ||
            this._parseStringLiteral() ||
            this._parseNumeric() ||
            this._parseHexColor() ||
            this._parseOperation() ||
            this._parseNamedLine());
    }
    _parseOperation() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // ParenthesisL
        node.addChild(this._parseExpr());
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseNumeric() {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Num) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Resolution) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Length) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EMS) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EXS) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Angle) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Time) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dimension) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ContainerQueryLength) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Freq)) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NumericValue);
            this.consumeToken();
            return this.finish(node);
        }
        return null;
    }
    _parseStringLiteral() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.String) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.UnquotedString)) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.StringLiteral);
        this.consumeToken();
        return this.finish(node);
    }
    _parseURILiteral() {
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^url(-prefix)?$/i)) {
            return null;
        }
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.URILiteral);
        this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident);
        if (this.hasWhitespace() || !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        this.scanner.inURL = true;
        this.consumeToken(); // consume ()
        node.addChild(this._parseURLArgument()); // argument is optional
        this.scanner.inURL = false;
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseURLArgument() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.String) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString) && !this.acceptUnquotedString()) {
            return null;
        }
        return this.finish(node);
    }
    _parseIdent(referenceTypes) {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Identifier);
        if (referenceTypes) {
            node.referenceTypes = referenceTypes;
        }
        node.isCustomProperty = this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/);
        this.consumeToken();
        return this.finish(node);
    }
    _parseFunction() {
        const pos = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Function);
        if (!node.setIdentifier(this._parseFunctionIdentifier())) {
            return null;
        }
        if (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        if (node.getArguments().addChild(this._parseFunctionArgument())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                    this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ExpressionExpected);
                }
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseFunctionIdentifier() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Identifier);
        node.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Function];
        if (this.acceptIdent("progid")) {
            // support for IE7 specific filters: 'progid:DXImageTransform.Microsoft.MotionBlur(strength=13, direction=310)'
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident) && this.acceptDelim(".")) {
                    // loop
                }
            }
            return this.finish(node);
        }
        this.consumeToken();
        return this.finish(node);
    }
    _parseFunctionArgument() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FunctionArgument);
        if (node.setValue(this._parseExpr(true))) {
            return this.finish(node);
        }
        return null;
    }
    _parseHexColor() {
        if (this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Hash, /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{4}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/g)) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.HexColorValue);
            this.consumeToken();
            return this.finish(node);
        }
        else {
            return null;
        }
    }
}
//# sourceMappingURL=cssParser.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/cssScanner.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  MultiLineStream: function() { return MultiLineStream; },
  Scanner: function() { return Scanner; },
  TokenType: function() { return TokenType; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var TokenType;
(function (TokenType) {
    TokenType[TokenType["Ident"] = 0] = "Ident";
    TokenType[TokenType["AtKeyword"] = 1] = "AtKeyword";
    TokenType[TokenType["AtIncludeShort"] = 2] = "AtIncludeShort";
    TokenType[TokenType["AtMixinShort"] = 3] = "AtMixinShort";
    TokenType[TokenType["String"] = 4] = "String";
    TokenType[TokenType["BadString"] = 5] = "BadString";
    TokenType[TokenType["UnquotedString"] = 6] = "UnquotedString";
    TokenType[TokenType["Hash"] = 7] = "Hash";
    TokenType[TokenType["Num"] = 8] = "Num";
    TokenType[TokenType["Percentage"] = 9] = "Percentage";
    TokenType[TokenType["Dimension"] = 10] = "Dimension";
    TokenType[TokenType["UnicodeRange"] = 11] = "UnicodeRange";
    TokenType[TokenType["CDO"] = 12] = "CDO";
    TokenType[TokenType["CDC"] = 13] = "CDC";
    TokenType[TokenType["Colon"] = 14] = "Colon";
    TokenType[TokenType["SemiColon"] = 15] = "SemiColon";
    TokenType[TokenType["CurlyL"] = 16] = "CurlyL";
    TokenType[TokenType["CurlyR"] = 17] = "CurlyR";
    TokenType[TokenType["Indent"] = 18] = "Indent";
    TokenType[TokenType["Dedent"] = 19] = "Dedent";
    TokenType[TokenType["Newline"] = 20] = "Newline";
    TokenType[TokenType["ParenthesisL"] = 21] = "ParenthesisL";
    TokenType[TokenType["ParenthesisR"] = 22] = "ParenthesisR";
    TokenType[TokenType["BracketL"] = 23] = "BracketL";
    TokenType[TokenType["BracketR"] = 24] = "BracketR";
    TokenType[TokenType["Whitespace"] = 25] = "Whitespace";
    TokenType[TokenType["Includes"] = 26] = "Includes";
    TokenType[TokenType["Dashmatch"] = 27] = "Dashmatch";
    TokenType[TokenType["SubstringOperator"] = 28] = "SubstringOperator";
    TokenType[TokenType["PrefixOperator"] = 29] = "PrefixOperator";
    TokenType[TokenType["SuffixOperator"] = 30] = "SuffixOperator";
    TokenType[TokenType["Delim"] = 31] = "Delim";
    TokenType[TokenType["EMS"] = 32] = "EMS";
    TokenType[TokenType["EXS"] = 33] = "EXS";
    TokenType[TokenType["Length"] = 34] = "Length";
    TokenType[TokenType["Angle"] = 35] = "Angle";
    TokenType[TokenType["Time"] = 36] = "Time";
    TokenType[TokenType["Freq"] = 37] = "Freq";
    TokenType[TokenType["Exclamation"] = 38] = "Exclamation";
    TokenType[TokenType["Resolution"] = 39] = "Resolution";
    TokenType[TokenType["Comma"] = 40] = "Comma";
    TokenType[TokenType["Charset"] = 41] = "Charset";
    TokenType[TokenType["EscapedJavaScript"] = 42] = "EscapedJavaScript";
    TokenType[TokenType["BadEscapedJavaScript"] = 43] = "BadEscapedJavaScript";
    TokenType[TokenType["Comment"] = 44] = "Comment";
    TokenType[TokenType["SingleLineComment"] = 45] = "SingleLineComment";
    TokenType[TokenType["EOF"] = 46] = "EOF";
    TokenType[TokenType["ContainerQueryLength"] = 47] = "ContainerQueryLength";
    TokenType[TokenType["CustomToken"] = 48] = "CustomToken";
})(TokenType || (TokenType = {}));
class MultiLineStream {
    get depth() {
        return this._depth;
    }
    set depth(value) {
        this._depth = value;
    }
    constructor(source) {
        // Used by the indented dialect to keep track of indents and dedents
        this._depth = 0;
        this.indentation = undefined;
        this.source = source;
        this.len = source.length;
        this.position = 0;
    }
    substring(from, to = this.position) {
        return this.source.substring(from, to);
    }
    eos() {
        return this.len <= this.position;
    }
    pos() {
        return this.position;
    }
    goBackTo(pos, depth) {
        this.position = pos;
        this.depth = depth;
    }
    goBack(n) {
        this.position -= n;
    }
    advance(n) {
        this.position += n;
    }
    nextChar() {
        return this.source.charCodeAt(this.position++) || 0;
    }
    peekChar(n = 0) {
        return this.source.charCodeAt(this.position + n) || 0;
    }
    lookbackChar(n = 0) {
        return this.source.charCodeAt(this.position - n) || 0;
    }
    advanceIfChar(ch) {
        if (ch === this.source.charCodeAt(this.position)) {
            this.position++;
            return true;
        }
        return false;
    }
    advanceIfChars(ch) {
        if (this.position + ch.length > this.source.length) {
            return false;
        }
        let i = 0;
        for (; i < ch.length; i++) {
            if (this.source.charCodeAt(this.position + i) !== ch[i]) {
                return false;
            }
        }
        this.advance(i);
        return true;
    }
    advanceWhileChar(condition) {
        const posNow = this.position;
        while (this.position < this.len && condition(this.source.charCodeAt(this.position))) {
            this.position++;
        }
        return this.position - posNow;
    }
}
const _a = "a".charCodeAt(0);
const _f = "f".charCodeAt(0);
const _z = "z".charCodeAt(0);
// const _u = "u".charCodeAt(0);
const _A = "A".charCodeAt(0);
const _F = "F".charCodeAt(0);
const _Z = "Z".charCodeAt(0);
const _0 = "0".charCodeAt(0);
const _9 = "9".charCodeAt(0);
const _TLD = "~".charCodeAt(0);
const _HAT = "^".charCodeAt(0);
const _EQS = "=".charCodeAt(0);
const _PIP = "|".charCodeAt(0);
const _MIN = "-".charCodeAt(0);
const _USC = "_".charCodeAt(0);
const _PRC = "%".charCodeAt(0);
const _MUL = "*".charCodeAt(0);
const _LPA = "(".charCodeAt(0);
const _RPA = ")".charCodeAt(0);
const _LAN = "<".charCodeAt(0);
const _RAN = ">".charCodeAt(0);
const _ATS = "@".charCodeAt(0);
const _HSH = "#".charCodeAt(0);
const _DLR = "$".charCodeAt(0);
const _BSL = "\\".charCodeAt(0);
const _FSL = "/".charCodeAt(0);
const _NWL = "\n".charCodeAt(0);
const _CAR = "\r".charCodeAt(0);
const _LFD = "\f".charCodeAt(0);
const _DQO = '"'.charCodeAt(0);
const _SQO = "'".charCodeAt(0);
const _WSP = " ".charCodeAt(0);
const _TAB = "\t".charCodeAt(0);
const _SEM = ";".charCodeAt(0);
const _COL = ":".charCodeAt(0);
const _CUL = "{".charCodeAt(0);
const _CUR = "}".charCodeAt(0);
const _BRL = "[".charCodeAt(0);
const _BRR = "]".charCodeAt(0);
const _CMA = ",".charCodeAt(0);
const _DOT = ".".charCodeAt(0);
const _BNG = "!".charCodeAt(0);
const _QSM = "?".charCodeAt(0);
const _PLS = "+".charCodeAt(0);
const staticTokenTable = {};
staticTokenTable[_SEM] = TokenType.SemiColon;
staticTokenTable[_COL] = TokenType.Colon;
staticTokenTable[_CUL] = TokenType.CurlyL;
staticTokenTable[_CUR] = TokenType.CurlyR;
staticTokenTable[_BRR] = TokenType.BracketR;
staticTokenTable[_BRL] = TokenType.BracketL;
staticTokenTable[_LPA] = TokenType.ParenthesisL;
staticTokenTable[_RPA] = TokenType.ParenthesisR;
staticTokenTable[_CMA] = TokenType.Comma;
const staticUnitTable = {};
staticUnitTable["em"] = TokenType.EMS;
staticUnitTable["ex"] = TokenType.EXS;
staticUnitTable["px"] = TokenType.Length;
staticUnitTable["cm"] = TokenType.Length;
staticUnitTable["mm"] = TokenType.Length;
staticUnitTable["in"] = TokenType.Length;
staticUnitTable["pt"] = TokenType.Length;
staticUnitTable["pc"] = TokenType.Length;
staticUnitTable["deg"] = TokenType.Angle;
staticUnitTable["rad"] = TokenType.Angle;
staticUnitTable["grad"] = TokenType.Angle;
staticUnitTable["ms"] = TokenType.Time;
staticUnitTable["s"] = TokenType.Time;
staticUnitTable["hz"] = TokenType.Freq;
staticUnitTable["khz"] = TokenType.Freq;
staticUnitTable["%"] = TokenType.Percentage;
staticUnitTable["fr"] = TokenType.Percentage;
staticUnitTable["dpi"] = TokenType.Resolution;
staticUnitTable["dpcm"] = TokenType.Resolution;
staticUnitTable["cqw"] = TokenType.ContainerQueryLength;
staticUnitTable["cqh"] = TokenType.ContainerQueryLength;
staticUnitTable["cqi"] = TokenType.ContainerQueryLength;
staticUnitTable["cqb"] = TokenType.ContainerQueryLength;
staticUnitTable["cqmin"] = TokenType.ContainerQueryLength;
staticUnitTable["cqmax"] = TokenType.ContainerQueryLength;
class Scanner {
    constructor({ syntax } = {}) {
        this.stream = new MultiLineStream("");
        this.ignoreComment = true;
        this.ignoreWhitespace = true;
        this.inURL = false;
        this.syntax = syntax;
    }
    configure({ syntax }) {
        this.syntax = syntax;
    }
    setSource(input) {
        this.stream = new MultiLineStream(input);
    }
    finishToken(offset, type, text) {
        const token = {
            offset: offset,
            len: this.stream.pos() - offset,
            type: type,
            text: text || this.stream.substring(offset),
        };
        return token;
    }
    substring(offset, len) {
        return this.stream.substring(offset, offset + len);
    }
    pos() {
        return this.stream.pos();
    }
    goBackTo(pos, depth) {
        this.stream.goBackTo(pos, depth);
    }
    scanUnquotedString() {
        const offset = this.stream.pos();
        const content = [];
        if (this._unquotedString(content)) {
            return this.finishToken(offset, TokenType.UnquotedString, content.join(""));
        }
        return null;
    }
    scan() {
        // processes all whitespaces and comments
        const triviaToken = this.trivia();
        if (triviaToken !== null) {
            return triviaToken;
        }
        const offset = this.stream.pos();
        // End of file/input
        if (this.stream.eos()) {
            return this.finishToken(offset, TokenType.EOF);
        }
        return this.scanNext(offset);
    }
    /**
     * Read the range as described in https://www.w3.org/TR/CSS21/syndata.html#tokenization
     * Assume the `u` has aleady been consumed
     * @returns if reading the unicode was successful
     */
    tryScanUnicode() {
        const offset = this.stream.pos();
        const depth = this.stream.depth;
        if (!this.stream.eos() && this._unicodeRange()) {
            return this.finishToken(offset, TokenType.UnicodeRange);
        }
        this.stream.goBackTo(offset, depth);
        return undefined;
    }
    scanNext(offset) {
        // CDO <!--
        if (this.stream.advanceIfChars([_LAN, _BNG, _MIN, _MIN])) {
            return this.finishToken(offset, TokenType.CDO);
        }
        // CDC -->
        if (this.stream.advanceIfChars([_MIN, _MIN, _RAN])) {
            return this.finishToken(offset, TokenType.CDC);
        }
        let content = [];
        if (this.ident(content)) {
            return this.finishToken(offset, TokenType.Ident, content.join(""));
        }
        // at-keyword
        if (this.stream.advanceIfChar(_ATS)) {
            content = ["@"];
            if (this._name(content)) {
                const keywordText = content.join("");
                if (keywordText === "@charset") {
                    return this.finishToken(offset, TokenType.Charset, keywordText);
                }
                return this.finishToken(offset, TokenType.AtKeyword, keywordText);
            }
            else {
                return this.finishToken(offset, TokenType.Delim);
            }
        }
        // hash
        if (this.stream.advanceIfChar(_HSH)) {
            content = ["#"];
            if (this._name(content)) {
                return this.finishToken(offset, TokenType.Hash, content.join(""));
            }
            else {
                return this.finishToken(offset, TokenType.Delim);
            }
        }
        // Important
        if (this.stream.advanceIfChar(_BNG)) {
            return this.finishToken(offset, TokenType.Exclamation);
        }
        // Numbers
        if (this._number()) {
            const pos = this.stream.pos();
            content = [this.stream.substring(offset, pos)];
            if (this.stream.advanceIfChar(_PRC)) {
                // Percentage 43%
                return this.finishToken(offset, TokenType.Percentage);
            }
            else if (this.ident(content)) {
                const dim = this.stream.substring(pos).toLowerCase();
                const tokenType = staticUnitTable[dim];
                if (typeof tokenType !== "undefined") {
                    // Known dimension 43px
                    return this.finishToken(offset, tokenType, content.join(""));
                }
                else {
                    // Unknown dimension 43ft
                    return this.finishToken(offset, TokenType.Dimension, content.join(""));
                }
            }
            return this.finishToken(offset, TokenType.Num);
        }
        // String, BadString
        content = [];
        let tokenType = this._string(content);
        if (tokenType !== null) {
            return this.finishToken(offset, tokenType, content.join(""));
        }
        // single character tokens
        tokenType = staticTokenTable[this.stream.peekChar()];
        if (typeof tokenType !== "undefined") {
            this.stream.advance(1);
            return this.finishToken(offset, tokenType);
        }
        // includes ~=
        if (this.stream.peekChar(0) === _TLD && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.Includes);
        }
        // DashMatch |=
        if (this.stream.peekChar(0) === _PIP && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.Dashmatch);
        }
        // Substring operator *=
        if (this.stream.peekChar(0) === _MUL && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.SubstringOperator);
        }
        // Substring operator ^=
        if (this.stream.peekChar(0) === _HAT && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.PrefixOperator);
        }
        // Substring operator $=
        if (this.stream.peekChar(0) === _DLR && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.SuffixOperator);
        }
        // indents and dedents for the indented syntax
        if (this.syntax === "indented") {
            let newlines = this.stream.advanceWhileChar((ch) => {
                return ch === _NWL || ch === _LFD || ch === _CAR;
            });
            if (newlines > 0) {
                let depth = this.stream.advanceWhileChar((ch) => {
                    // Make a note the first time we enchounter either _TAB or _WSP.
                    // Whichever comes first is treated as the correct, expected
                    // kind of indentation. Mixing between the two is not allowed
                    // in the indented syntax.
                    if (!this.stream.indentation && ch === _TAB) {
                        this.stream.indentation = "tabs";
                    }
                    if (!this.stream.indentation && ch === _WSP) {
                        this.stream.indentation = "spaces";
                    }
                    if (this.stream.indentation === "tabs") {
                        return ch === _TAB;
                    }
                    if (this.stream.indentation === "spaces") {
                        return ch === _WSP;
                    }
                    return false;
                });
                if (depth > this.stream.depth) {
                    this.stream.depth = depth;
                    return this.finishToken(offset, TokenType.Indent);
                }
                else if (depth < this.stream.depth) {
                    this.stream.depth = depth;
                    return this.finishToken(offset, TokenType.Dedent);
                }
                else {
                    return this.finishToken(offset, TokenType.Newline);
                }
            }
        }
        // Delim
        this.stream.nextChar();
        return this.finishToken(offset, TokenType.Delim);
    }
    trivia() {
        while (true) {
            const offset = this.stream.pos();
            if (this.whitespace()) {
                if (!this.ignoreWhitespace) {
                    return this.finishToken(offset, TokenType.Whitespace);
                }
            }
            else if (this.comment()) {
                if (!this.ignoreComment) {
                    return this.finishToken(offset, TokenType.Comment);
                }
            }
            else {
                return null;
            }
        }
    }
    comment() {
        if (this.stream.advanceIfChars([_FSL, _MUL])) {
            let success = false, hot = false;
            this.stream.advanceWhileChar((ch) => {
                if (hot && ch === _FSL) {
                    success = true;
                    return false;
                }
                hot = ch === _MUL;
                return true;
            });
            if (success) {
                this.stream.advance(1);
            }
            return true;
        }
        return false;
    }
    _number() {
        let npeek = 0, ch;
        if (this.stream.peekChar() === _DOT) {
            npeek = 1;
        }
        ch = this.stream.peekChar(npeek);
        if (ch >= _0 && ch <= _9) {
            this.stream.advance(npeek + 1);
            this.stream.advanceWhileChar((ch) => {
                return (ch >= _0 && ch <= _9) || (npeek === 0 && ch === _DOT);
            });
            return true;
        }
        return false;
    }
    _newline(result) {
        const ch = this.stream.peekChar();
        switch (ch) {
            case _CAR:
            case _LFD:
            case _NWL:
                this.stream.advance(1);
                result.push(String.fromCharCode(ch));
                if (ch === _CAR && this.stream.advanceIfChar(_NWL)) {
                    result.push("\n");
                }
                return true;
        }
        return false;
    }
    _escape(result, includeNewLines) {
        let ch = this.stream.peekChar();
        if (ch === _BSL) {
            this.stream.advance(1);
            ch = this.stream.peekChar();
            let hexNumCount = 0;
            while (hexNumCount < 6 && ((ch >= _0 && ch <= _9) || (ch >= _a && ch <= _f) || (ch >= _A && ch <= _F))) {
                this.stream.advance(1);
                ch = this.stream.peekChar();
                hexNumCount++;
            }
            if (hexNumCount > 0) {
                try {
                    const hexVal = parseInt(this.stream.substring(this.stream.pos() - hexNumCount), 16);
                    if (hexVal) {
                        result.push(String.fromCharCode(hexVal));
                    }
                }
                catch {
                    // ignore
                }
                // optional whitespace or new line, not part of result text
                if (ch === _WSP || ch === _TAB) {
                    this.stream.advance(1);
                }
                else {
                    this._newline([]);
                }
                return true;
            }
            if (ch !== _CAR && ch !== _LFD && ch !== _NWL) {
                this.stream.advance(1);
                result.push(String.fromCharCode(ch));
                return true;
            }
            else if (includeNewLines) {
                return this._newline(result);
            }
        }
        return false;
    }
    _stringChar(closeQuote, result) {
        // not closeQuote, not backslash, not newline
        const ch = this.stream.peekChar();
        if (ch !== 0 && ch !== closeQuote && ch !== _BSL && ch !== _CAR && ch !== _LFD && ch !== _NWL) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _string(result) {
        if (this.stream.peekChar() === _SQO || this.stream.peekChar() === _DQO) {
            const closeQuote = this.stream.nextChar();
            result.push(String.fromCharCode(closeQuote));
            while (this._stringChar(closeQuote, result) || this._escape(result, true)) {
                // loop
            }
            if (this.stream.peekChar() === closeQuote) {
                this.stream.nextChar();
                result.push(String.fromCharCode(closeQuote));
                return TokenType.String;
            }
            else {
                return TokenType.BadString;
            }
        }
        return null;
    }
    _unquotedChar(result) {
        // not closeQuote, not backslash, not newline
        const ch = this.stream.peekChar();
        if (ch !== 0 &&
            ch !== _BSL &&
            ch !== _SQO &&
            ch !== _DQO &&
            ch !== _LPA &&
            ch !== _RPA &&
            ch !== _WSP &&
            ch !== _TAB &&
            ch !== _NWL &&
            ch !== _LFD &&
            ch !== _CAR) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _unquotedString(result) {
        let hasContent = false;
        while (this._unquotedChar(result) || this._escape(result)) {
            hasContent = true;
        }
        return hasContent;
    }
    whitespace() {
        const n = this.stream.advanceWhileChar((ch) => {
            return ch === _WSP || ch === _TAB || ch === _NWL || ch === _LFD || ch === _CAR;
        });
        return n > 0;
    }
    _name(result) {
        let matched = false;
        while (this._identChar(result) || this._escape(result)) {
            matched = true;
        }
        return matched;
    }
    ident(result) {
        const pos = this.stream.pos();
        const depth = this.stream.depth;
        const hasMinus = this._minus(result);
        if (hasMinus) {
            if (this._minus(result) /* -- */ || this._identFirstChar(result) || this._escape(result)) {
                while (this._identChar(result) || this._escape(result)) {
                    // loop
                }
                return true;
            }
        }
        else if (this._identFirstChar(result) || this._escape(result)) {
            while (this._identChar(result) || this._escape(result)) {
                // loop
            }
            return true;
        }
        this.stream.goBackTo(pos, depth);
        return false;
    }
    _identFirstChar(result) {
        const ch = this.stream.peekChar();
        if (ch === _USC || // _
            (ch >= _a && ch <= _z) || // a-z
            (ch >= _A && ch <= _Z) || // A-Z
            (ch >= 0x80 && ch <= 0xffff)) {
            // nonascii
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _minus(result) {
        const ch = this.stream.peekChar();
        if (ch === _MIN) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _identChar(result) {
        const ch = this.stream.peekChar();
        if (ch === _USC || // _
            ch === _MIN || // -
            (ch >= _a && ch <= _z) || // a-z
            (ch >= _A && ch <= _Z) || // A-Z
            (ch >= _0 && ch <= _9) || // 0/9
            (ch >= 0x80 && ch <= 0xffff)) {
            // nonascii
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _unicodeRange() {
        // follow https://www.w3.org/TR/CSS21/syndata.html#tokenization and https://www.w3.org/TR/css-syntax-3/#urange-syntax
        // assume u has already been parsed
        if (this.stream.advanceIfChar(_PLS)) {
            const isHexDigit = (ch) => (ch >= _0 && ch <= _9) || (ch >= _a && ch <= _f) || (ch >= _A && ch <= _F);
            const codePoints = this.stream.advanceWhileChar(isHexDigit) + this.stream.advanceWhileChar((ch) => ch === _QSM);
            if (codePoints >= 1 && codePoints <= 6) {
                if (this.stream.advanceIfChar(_MIN)) {
                    const digits = this.stream.advanceWhileChar(isHexDigit);
                    if (digits >= 1 && digits <= 6) {
                        return true;
                    }
                }
                else {
                    return true;
                }
            }
        }
        return false;
    }
}
//# sourceMappingURL=cssScanner.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/cssSymbolScope.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  GlobalScope: function() { return GlobalScope; },
  Scope: function() { return Scope; },
  ScopeBuilder: function() { return ScopeBuilder; },
  Symbol: function() { return Symbol; },
  Symbols: function() { return Symbols; }
});
/* ESM import */var _cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _utils_arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/arrays */ "../vscode-css-languageservice/lib/esm/utils/arrays.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



class Scope {
    constructor(offset, length) {
        this.offset = offset;
        this.length = length;
        this.symbols = [];
        this.parent = null;
        this.children = [];
    }
    addChild(scope) {
        this.children.push(scope);
        scope.setParent(this);
    }
    setParent(scope) {
        this.parent = scope;
    }
    findScope(offset, length = 0) {
        if ((this.offset <= offset && this.offset + this.length > offset + length) ||
            (this.offset === offset && this.length === length)) {
            return this.findInScope(offset, length);
        }
        return null;
    }
    findInScope(offset, length = 0) {
        // find the first scope child that has an offset larger than offset + length
        const end = offset + length;
        const idx = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_1__.findFirst)(this.children, (s) => s.offset > end);
        if (idx === 0) {
            // all scopes have offsets larger than our end
            return this;
        }
        const res = this.children[idx - 1];
        if (res.offset <= offset && res.offset + res.length >= offset + length) {
            return res.findInScope(offset, length);
        }
        return this;
    }
    addSymbol(symbol) {
        this.symbols.push(symbol);
    }
    getSymbol(name, type) {
        for (let index = 0; index < this.symbols.length; index++) {
            const symbol = this.symbols[index];
            if (symbol.name === name && symbol.type === type) {
                return symbol;
            }
        }
        return null;
    }
    getSymbols() {
        return this.symbols;
    }
}
class GlobalScope extends Scope {
    constructor() {
        super(0, Number.MAX_VALUE);
    }
}
class Symbol {
    constructor(name, value, node, type) {
        this.name = name;
        this.value = value;
        this.node = node;
        this.type = type;
    }
}
class ScopeBuilder {
    constructor(scope) {
        this.scope = scope;
    }
    addSymbol(node, name, value, type) {
        if (node.offset !== -1) {
            const current = this.scope.findScope(node.offset, node.length);
            if (current) {
                current.addSymbol(new Symbol(name, value, node, type));
            }
        }
    }
    addScope(node) {
        if (node.offset !== -1) {
            const current = this.scope.findScope(node.offset, node.length);
            if (current && (current.offset !== node.offset || current.length !== node.length)) {
                // scope already known?
                const newScope = new Scope(node.offset, node.length);
                current.addChild(newScope);
                return newScope;
            }
            return current;
        }
        return null;
    }
    addSymbolToChildScope(scopeNode, node, name, value, type) {
        if (scopeNode && scopeNode.offset !== -1) {
            const current = this.addScope(scopeNode); // create the scope or gets the existing one
            if (current) {
                current.addSymbol(new Symbol(name, value, node, type));
            }
        }
    }
    visitNode(node) {
        switch (node.type) {
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Keyframe:
                this.addSymbol(node, node.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Keyframe);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.CustomPropertyDeclaration:
                return this.visitCustomPropertyDeclarationNode(node);
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.VariableDeclaration:
                return this.visitVariableDeclarationNode(node);
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Ruleset:
                return this.visitRuleSet(node);
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
                this.addSymbol(node, node.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Mixin);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionDeclaration:
                this.addSymbol(node, node.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionParameter: {
                return this.visitFunctionParameterNode(node);
            }
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Declarations:
                this.addScope(node);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.For:
                const forNode = node;
                const scopeNode = forNode.getDeclarations();
                if (scopeNode && forNode.variable) {
                    this.addSymbolToChildScope(scopeNode, forNode.variable, forNode.variable.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
                }
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Each: {
                const eachNode = node;
                const scopeNode = eachNode.getDeclarations();
                if (scopeNode) {
                    const variables = eachNode.getVariables().getChildren();
                    for (const variable of variables) {
                        this.addSymbolToChildScope(scopeNode, variable, variable.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
                    }
                }
                return true;
            }
        }
        return true;
    }
    visitRuleSet(node) {
        const current = this.scope.findScope(node.offset, node.length);
        if (current) {
            for (const child of node.getSelectors().getChildren()) {
                if (child instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Selector) {
                    if (child.getChildren().length === 1) {
                        // only selectors with a single element can be extended
                        current.addSymbol(new Symbol(child.getChild(0).getText(), void 0, child, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Rule));
                    }
                }
            }
        }
        return true;
    }
    visitVariableDeclarationNode(node) {
        const value = node.getValue() ? node.getValue().getText() : void 0;
        this.addSymbol(node, node.getName(), value, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        return true;
    }
    visitFunctionParameterNode(node) {
        // parameters are part of the body scope
        const scopeNode = node.getParent().getDeclarations();
        if (scopeNode) {
            const valueNode = node.getDefaultValue();
            const value = valueNode ? valueNode.getText() : void 0;
            this.addSymbolToChildScope(scopeNode, node, node.getName(), value, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        }
        return true;
    }
    visitCustomPropertyDeclarationNode(node) {
        const value = node.getValue() ? node.getValue().getText() : "";
        this.addCSSVariable(node.getProperty(), node.getProperty().getName(), value, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        return true;
    }
    addCSSVariable(node, name, value, type) {
        if (node.offset !== -1) {
            this.scope.addSymbol(new Symbol(name, value, node, type));
        }
    }
}
class Symbols {
    constructor(node) {
        this.global = new GlobalScope();
        node.acceptVisitor(new ScopeBuilder(this.global));
    }
    findSymbolsAtOffset(offset, referenceType) {
        let scope = this.global.findScope(offset, 0);
        const result = [];
        const names = {};
        while (scope) {
            const symbols = scope.getSymbols();
            for (let i = 0; i < symbols.length; i++) {
                const symbol = symbols[i];
                if (symbol.type === referenceType && !names[symbol.name]) {
                    result.push(symbol);
                    names[symbol.name] = true;
                }
            }
            scope = scope.parent;
        }
        return result;
    }
    internalFindSymbol(node, referenceTypes) {
        let scopeNode = node;
        if (node.parent instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionParameter && node.parent.getParent() instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.BodyDeclaration) {
            scopeNode = node.parent.getParent().getDeclarations();
        }
        if (node.parent instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument && node.parent.getParent() instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Function) {
            const funcId = node.parent.getParent().getIdentifier();
            if (funcId) {
                const functionSymbol = this.internalFindSymbol(funcId, [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function]);
                if (functionSymbol) {
                    scopeNode = functionSymbol.node.getDeclarations();
                }
            }
        }
        if (!scopeNode) {
            return null;
        }
        const name = node.getText();
        let scope = this.global.findScope(scopeNode.offset, scopeNode.length);
        while (scope) {
            for (let index = 0; index < referenceTypes.length; index++) {
                const type = referenceTypes[index];
                const symbol = scope.getSymbol(name, type);
                if (symbol) {
                    return symbol;
                }
            }
            scope = scope.parent;
        }
        return null;
    }
    evaluateReferenceTypes(node) {
        if (node instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier) {
            const referenceTypes = node.referenceTypes;
            if (referenceTypes) {
                return referenceTypes;
            }
            else {
                if (node.isCustomProperty) {
                    return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable];
                }
                // are a reference to a keyframe?
                const decl = _cssNodes__WEBPACK_IMPORTED_MODULE_0__.getParentDeclaration(node);
                if (decl) {
                    const propertyName = decl.getNonPrefixedPropertyName();
                    if ((propertyName === "animation" || propertyName === "animation-name") &&
                        decl.getValue() &&
                        decl.getValue().offset === node.offset) {
                        return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Keyframe];
                    }
                }
            }
        }
        else if (node instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Variable) {
            return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable];
        }
        const selector = node.findAParent(_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Selector, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference);
        if (selector) {
            return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Rule];
        }
        return null;
    }
    findSymbolFromNode(node) {
        if (!node) {
            return null;
        }
        while (node.type === _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Interpolation) {
            node = node.getParent();
        }
        const referenceTypes = this.evaluateReferenceTypes(node);
        if (referenceTypes) {
            return this.internalFindSymbol(node, referenceTypes);
        }
        return null;
    }
    matchesSymbol(node, symbol) {
        if (!node) {
            return false;
        }
        while (node.type === _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Interpolation) {
            node = node.getParent();
        }
        if (!node.matches(symbol.name)) {
            return false;
        }
        const referenceTypes = this.evaluateReferenceTypes(node);
        if (!referenceTypes || referenceTypes.indexOf(symbol.type) === -1) {
            return false;
        }
        const nodeSymbol = this.internalFindSymbol(node, referenceTypes);
        return nodeSymbol === symbol;
    }
    findSymbol(name, type, offset) {
        let scope = this.global.findScope(offset);
        while (scope) {
            const symbol = scope.getSymbol(name, type);
            if (symbol) {
                return symbol;
            }
            scope = scope.parent;
        }
        return null;
    }
}
//# sourceMappingURL=cssSymbolScope.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/sassErrors.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SassIssueType: function() { return SassIssueType; },
  SassParseError: function() { return SassParseError; }
});
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_0__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class SassIssueType {
    constructor(id, message) {
        this.id = id;
        this.message = message;
    }
}
const SassParseError = {
    FromExpected: new SassIssueType("scss-fromexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("'from' expected")),
    ThroughOrToExpected: new SassIssueType("scss-throughexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("'through' or 'to' expected")),
    InExpected: new SassIssueType("scss-fromexpected", _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("'in' expected")),
};
//# sourceMappingURL=sassErrors.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/sassParser.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SassParser: function() { return SassParser; }
});
/* ESM import */var _sassScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sassScanner */ "../vscode-css-languageservice/lib/esm/parser/sassScanner.js");
/* ESM import */var _cssScanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssScanner */ "../vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* ESM import */var _cssParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssParser */ "../vscode-css-languageservice/lib/esm/parser/cssParser.js");
/* ESM import */var _cssNodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _sassErrors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sassErrors */ "../vscode-css-languageservice/lib/esm/parser/sassErrors.js");
/* ESM import */var _cssErrors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cssErrors */ "../vscode-css-languageservice/lib/esm/parser/cssErrors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







/// <summary>
/// A parser for scss
/// http://sass-lang.com/documentation/file.SASS_REFERENCE.html
/// </summary>
class SassParser extends _cssParser__WEBPACK_IMPORTED_MODULE_2__.Parser {
    constructor({ syntax: dialect } = {}) {
        super({ syntax: dialect, scanner: new _sassScanner__WEBPACK_IMPORTED_MODULE_0__.SassScanner({ syntax: dialect }) });
    }
    _parseStylesheetStatement(isNested = false) {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return (this._parseWarnAndDebug() || // @warn, @debug and @error statements
                this._parseControlStatement() || // @if, @while, @for, @each
                this._parseMixinDeclaration() || // @mixin
                this._parseMixinContent() || // @content
                this._parseMixinReference() || // @include
                this._parseFunctionDeclaration() || // @function
                this._parseForward() || // @forward
                this._parseUse() || // @use
                this._parseRuleset(isNested) || // @at-rule
                super._parseStylesheetAtStatement(isNested));
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtMixinShort)) {
            return this._parseMixinDeclaration();
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtIncludeShort)) {
            return this._parseMixinReference();
        }
        return this._parseRuleset(true) || this._parseVariableDeclaration();
    }
    _parseImport() {
        if (!this.peekKeyword("@import")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Import);
        this.consumeToken();
        if (this.syntax === "indented") {
            // For indented syntax quotes are optional for @import
            if (!node.addChild(this._parseURILiteral()) &&
                !node.addChild(this._parseStringLiteral()) &&
                !node.addChild(this.acceptUnquotedString())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.URIOrStringExpected);
            }
        }
        else {
            if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.URIOrStringExpected);
            }
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.URIOrStringExpected);
            }
        }
        return this._completeParseImport(node);
    }
    // scss variables: $font-size: 12px;
    _parseVariableDeclaration(panic = []) {
        if (!this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.VariableName)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.VariableDeclaration);
        if (!node.setVariable(this._parseVariable())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        if (!node.setValue(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], panic);
        }
        while (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
            if (node.addChild(this._tryParsePrio())) {
                // !important
            }
            else {
                this.consumeToken();
                if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /^(default|global)$/)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
                }
                this.consumeToken();
            }
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            if (this.syntax === "indented") {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnexpectedSemicolon);
            }
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    }
    _parseMediaCondition() {
        return this._parseInterpolation() || super._parseMediaCondition();
    }
    _parseMediaFeatureRangeOperator() {
        return (this.accept(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.SmallerEqualsOperator) ||
            this.accept(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.GreaterEqualsOperator) ||
            super._parseMediaFeatureRangeOperator());
    }
    _parseMediaFeatureName() {
        return (this._parseModuleMember() ||
            this._parseFunction() || // function before ident
            this._parseIdent() ||
            this._parseVariable());
    }
    _parseKeyframeSelector() {
        return (this._tryParseKeyframeSelector() ||
            this._parseControlStatement(this._parseKeyframeSelector.bind(this)) ||
            this._parseWarnAndDebug() || // @warn, @debug and @error statements
            this._parseMixinReference() || // @include
            this._parseFunctionDeclaration() || // @function
            this._parseVariableDeclaration() ||
            this._parseMixinContent());
    }
    _parseVariable() {
        if (!this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.VariableName)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Variable);
        this.consumeToken();
        return node;
    }
    _parseModuleMember() {
        const pos = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Module);
        if (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module]))) {
            return null;
        }
        if (this.hasWhitespace() || !this.acceptDelim(".") || this.hasWhitespace()) {
            this.restoreAtMark(pos);
            return null;
        }
        if (!node.addChild(this._parseVariable() || this._parseFunction())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrVariableExpected);
        }
        return node;
    }
    _parseIdent(referenceTypes) {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) && !this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.InterpolationFunction) && !this.peekDelim("-")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
        node.referenceTypes = referenceTypes;
        node.isCustomProperty = this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /^--/);
        let hasContent = false;
        const indentInterpolation = () => {
            const pos = this.mark();
            if (this.acceptDelim("-")) {
                if (!this.hasWhitespace()) {
                    this.acceptDelim("-");
                }
                if (this.hasWhitespace()) {
                    this.restoreAtMark(pos);
                    return null;
                }
            }
            return this._parseInterpolation();
        };
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) ||
            node.addChild(indentInterpolation()) ||
            (hasContent && this.acceptRegexp(/^[\w-]/))) {
            hasContent = true;
            if (this.hasWhitespace()) {
                break;
            }
        }
        return hasContent ? this.finish(node) : null;
    }
    _parseTermExpression() {
        return (this._parseModuleMember() ||
            this._parseVariable() ||
            this._parseNestingSelector() ||
            //this._tryParsePrio() ||
            super._parseTermExpression());
    }
    _parseInterpolation() {
        if (this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.InterpolationFunction)) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Interpolation);
            this.consumeToken();
            if (!node.addChild(this._parseExpr()) && !this._parseNestingSelector()) {
                if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                    return this.finish(node);
                }
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightCurlyExpected);
            }
            return this.finish(node);
        }
        return null;
    }
    _parseOperator() {
        if (this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.EqualsOperator) ||
            this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.NotEqualsOperator) ||
            this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.GreaterEqualsOperator) ||
            this.peek(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.SmallerEqualsOperator) ||
            this.peekDelim(">") ||
            this.peekDelim("<") ||
            this.peekIdent("and") ||
            this.peekIdent("or") ||
            this.peekDelim("%")) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            return this.finish(node);
        }
        return super._parseOperator();
    }
    _parseUnaryOperator() {
        if (this.peekIdent("not")) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
            this.consumeToken();
            return this.finish(node);
        }
        return super._parseUnaryOperator();
    }
    _parseRuleSetDeclaration() {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return (this._parseKeyframe() || // nested @keyframe
                this._parseImport() || // nested @import
                this._parseMedia(true) || // nested @media
                this._parseFontFace() || // nested @font-face
                this._parseWarnAndDebug() || // @warn, @debug and @error statements
                this._parseControlStatement() || // @if, @while, @for, @each
                this._parseFunctionDeclaration() || // @function
                this._parseExtends() || // @extends
                this._parseMixinReference() || // @include
                this._parseMixinContent() || // @content
                this._parseMixinDeclaration() || // nested @mixin
                this._parseRuleset(true) || // @at-rule
                this._parseSupports(true) || // @supports
                this._parseLayer() || // @layer
                this._parsePropertyAtRule() || // @property
                this._parseContainer(true) || // nested @container
                this._parseRuleSetDeclarationAtStatement());
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtMixinShort)) {
            return this._parseMixinDeclaration(); // nested shorthand @mixin
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtIncludeShort)) {
            return this._parseMixinReference();
        }
        return (this._parseVariableDeclaration() || // variable declaration
            this._tryParseRuleset(true) || // nested ruleset
            this._parseDeclaration()); // try css ruleset declaration as last so in the error case, the ast will contain a declaration
    }
    _parseDeclaration(stopTokens) {
        const customProperty = this._tryParseCustomPropertyDeclaration(stopTokens);
        if (customProperty) {
            return customProperty;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Declaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon], stopTokens || [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        let hasContent = false;
        if (node.setValue(this._parseExpr())) {
            hasContent = true;
            node.addChild(this._parsePrio());
        }
        if (this.syntax === "indented") {
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Indent)) {
                node.setNestedProperties(this._parseNestedProperties());
            }
            else {
                if (!hasContent) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.PropertyValueExpected);
                }
            }
        }
        else {
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
                node.setNestedProperties(this._parseNestedProperties());
            }
            else {
                if (!hasContent) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.PropertyValueExpected);
                }
            }
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
            }
        }
        return this.finish(node);
    }
    _parseNestedProperties() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NestedProperties);
        return this._parseBody(node, this._parseDeclaration.bind(this));
    }
    _parseExtends() {
        if (this.peekKeyword("@extend")) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ExtendsReference);
            this.consumeToken();
            if (!node
                .getSelectors()
                .addChild(this.peekDelim("%") ? this._parseSelectorPlaceholder() : this._parseSimpleSelector())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.SelectorExpected);
            }
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                node.getSelectors().addChild(this._parseSimpleSelector());
            }
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
                if (!this.acceptIdent("optional")) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
                }
            }
            return this.finish(node);
        }
        return null;
    }
    _parseSimpleSelectorBody() {
        return this._parseSelectorPlaceholder() || super._parseSimpleSelectorBody();
    }
    _parseNestingSelector() {
        if (this.peekDelim("&")) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorCombinator);
            this.consumeToken();
            while (!this.hasWhitespace() &&
                (this.acceptDelim("-") ||
                    this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Num) ||
                    this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Dimension) ||
                    node.addChild(this._parseIdent()) ||
                    this.acceptDelim("&"))) {
                //  support &-foo-1
            }
            return this.finish(node);
        }
        return null;
    }
    _parseSelectorPlaceholder() {
        if (this.peekDelim("%")) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorPlaceholder);
            this.consumeToken();
            this._parseIdent();
            return this.finish(node);
        }
        else if (this.peekKeyword("@at-root")) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorPlaceholder);
            this.consumeToken();
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                if (!this.acceptIdent("with") && !this.acceptIdent("without")) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected);
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected);
                }
                if (!node.addChild(this._parseIdent())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected);
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
                }
            }
            return this.finish(node);
        }
        return null;
    }
    _parseElementName() {
        const pos = this.mark();
        const node = super._parseElementName();
        if (node && !this.hasWhitespace() && this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            // for #49589
            this.restoreAtMark(pos);
            return null;
        }
        return node;
    }
    _tryParsePseudoIdentifier() {
        return this._parseInterpolation() || super._tryParsePseudoIdentifier(); // for #49589
    }
    _parseWarnAndDebug() {
        if (!this.peekKeyword("@debug") && !this.peekKeyword("@warn") && !this.peekKeyword("@error")) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Debug);
        this.consumeToken(); // @debug, @warn or @error
        node.addChild(this._parseExpr()); // optional
        return this.finish(node);
    }
    _parseControlStatement(parseStatement = this._parseRuleSetDeclaration.bind(this)) {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return null;
        }
        return (this._parseIfStatement(parseStatement) ||
            this._parseForStatement(parseStatement) ||
            this._parseEachStatement(parseStatement) ||
            this._parseWhileStatement(parseStatement));
    }
    _parseIfStatement(parseStatement) {
        if (!this.peekKeyword("@if")) {
            return null;
        }
        return this._internalParseIfStatement(parseStatement);
    }
    _internalParseIfStatement(parseStatement) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.IfStatement);
        this.consumeToken(); // @if or if
        if (!node.setExpression(this._parseExpr(true))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
        }
        this._parseBody(node, parseStatement);
        if (this.acceptKeyword("@else")) {
            if (this.peekIdent("if")) {
                node.setElseClause(this._internalParseIfStatement(parseStatement));
            }
            else if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL) || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Indent)) {
                const elseNode = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ElseStatement);
                this._parseBody(elseNode, parseStatement);
                node.setElseClause(elseNode);
            }
        }
        return this.finish(node);
    }
    _parseForStatement(parseStatement) {
        if (!this.peekKeyword("@for")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ForStatement);
        this.consumeToken(); // @for
        if (!node.setVariable(this._parseVariable())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.acceptIdent("from")) {
            return this.finish(node, _sassErrors__WEBPACK_IMPORTED_MODULE_4__.SassParseError.FromExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.acceptIdent("to") && !this.acceptIdent("through")) {
            return this.finish(node, _sassErrors__WEBPACK_IMPORTED_MODULE_4__.SassParseError.ThroughOrToExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    }
    _parseEachStatement(parseStatement) {
        if (!this.peekKeyword("@each")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.EachStatement);
        this.consumeToken(); // @each
        const variables = node.getVariables();
        if (!variables.addChild(this._parseVariable())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!variables.addChild(this._parseVariable())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        this.finish(variables);
        if (!this.acceptIdent("in")) {
            return this.finish(node, _sassErrors__WEBPACK_IMPORTED_MODULE_4__.SassParseError.InExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    }
    _parseWhileStatement(parseStatement) {
        if (!this.peekKeyword("@while")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.WhileStatement);
        this.consumeToken(); // @while
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    }
    _parseFunctionBodyDeclaration() {
        return (this._parseVariableDeclaration() ||
            this._parseReturnStatement() ||
            this._parseWarnAndDebug() ||
            this._parseControlStatement(this._parseFunctionBodyDeclaration.bind(this)));
    }
    _parseFunctionDeclaration() {
        if (!this.peekKeyword("@function")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionDeclaration);
        this.consumeToken(); // @function
        if (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Function]))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (node.getParameters().addChild(this._parseParameterDeclaration())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                }
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, this._parseFunctionBodyDeclaration.bind(this));
    }
    _parseReturnStatement() {
        if (!this.peekKeyword("@return")) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.ReturnStatement);
        this.consumeToken(); // @function
        if (!node.addChild(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
        }
        return this.finish(node);
    }
    _parseMixinDeclaration() {
        if (!this.peekKeyword("@mixin") && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtMixinShort)) {
            return null;
        }
        let declarationType = this.token.type;
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinDeclaration);
        this.consumeToken();
        if (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]))) {
            if (declarationType === _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtMixinShort) {
                let ident = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
                ident.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin];
                ident.isCustomProperty = false;
                ident.offset = node.offset + 1;
                ident.length = node.length - 1;
                node.setIdentifier(ident);
            }
            else {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Dedent]);
            }
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getParameters().addChild(this._parseParameterDeclaration())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseParameterDeclaration() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionParameter);
        if (!node.setIdentifier(this._parseVariable())) {
            return null;
        }
        if (this.accept(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
            // ok
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            if (!node.setDefaultValue(this._parseExpr(true))) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
            }
        }
        return this.finish(node);
    }
    _parseMixinContent() {
        if (!this.peekKeyword("@content")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinContentReference);
        this.consumeToken();
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getArguments().addChild(this._parseFunctionArgument())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
            }
        }
        return this.finish(node);
    }
    _parseMixinReference() {
        if (!this.peekKeyword("@include") && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtIncludeShort)) {
            return null;
        }
        let referenceType = this.token.type;
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinReference);
        this.consumeToken();
        // Could be module or mixin identifier, set as mixin as default.
        let firstIdent = this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]);
        if (!node.setIdentifier(firstIdent)) {
            if (referenceType === _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtIncludeShort) {
                firstIdent = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
                firstIdent.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin];
                firstIdent.isCustomProperty = false;
                firstIdent.offset = node.offset + 1;
                firstIdent.length = node.length - 1;
                node.setIdentifier(firstIdent);
            }
            else {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        // Is a module accessor.
        if (!this.hasWhitespace() && this.acceptDelim(".") && !this.hasWhitespace()) {
            const secondIdent = this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]);
            const moduleToken = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Module);
            // Re-purpose first matched ident as identifier for module token.
            firstIdent.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module];
            moduleToken.setIdentifier(firstIdent);
            // Override identifier with second ident.
            node.setIdentifier(secondIdent);
            node.addChild(moduleToken);
            if (!secondIdent) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getArguments().addChild(this._parseFunctionArgument())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
            }
        }
        if (this.peekIdent("using") || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL) || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Indent)) {
            node.setContent(this._parseMixinContentDeclaration());
        }
        return this.finish(node);
    }
    _parseMixinContentDeclaration() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinContentDeclaration);
        if (this.acceptIdent("using")) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Indent]);
            }
            if (node.getParameters().addChild(this._parseParameterDeclaration())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Indent]);
            }
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL) || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Indent)) {
            this._parseBody(node, this._parseMixinReferenceBodyStatement.bind(this));
        }
        return this.finish(node);
    }
    _parseMixinReferenceBodyStatement() {
        return this._tryParseKeyframeSelector() || this._parseRuleSetDeclaration();
    }
    _parseFunctionArgument() {
        // [variableName ':'] expression | variableName '...'
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionArgument);
        const pos = this.mark();
        const argument = this._parseVariable();
        if (argument) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
                if (this.accept(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
                    // optional
                    node.setValue(argument);
                    return this.finish(node);
                }
                else {
                    this.restoreAtMark(pos);
                }
            }
            else {
                node.setIdentifier(argument);
            }
        }
        if (node.setValue(this._parseExpr(true))) {
            this.accept(_sassScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis); // #43746
            node.addChild(this._parsePrio()); // #9859
            return this.finish(node);
        }
        else if (node.setValue(this._tryParsePrio())) {
            return this.finish(node);
        }
        return null;
    }
    _parseURLArgument() {
        const pos = this.mark();
        const node = super._parseURLArgument();
        if (!node || !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            this.restoreAtMark(pos);
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
            node.addChild(this._parseBinaryExpr());
            return this.finish(node);
        }
        return node;
    }
    _parseOperation() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
        this.consumeToken();
        while (node.addChild(this._parseListElement())) {
            this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma); // optional
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseListElement() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ListEntry);
        const child = this._parseBinaryExpr();
        if (!child) {
            return null;
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            node.setKey(child);
            if (!node.setValue(this._parseBinaryExpr())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
            }
        }
        else {
            node.setValue(child);
        }
        return this.finish(node);
    }
    _parseUse() {
        if (!this.peekKeyword("@use")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Use);
        this.consumeToken(); // @use
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.StringLiteralExpected);
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Newline) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /as|with/)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
            }
            if (this.acceptIdent("as")) {
                if (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module]))) {
                    const hasWildcard = this.peekDelim("*");
                    if (hasWildcard) {
                        const mnode = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
                        mnode.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module];
                        this.consumeToken();
                        node.addChild(this.finish(mnode));
                    }
                    else {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrWildcardExpected);
                    }
                }
            }
            if (this.acceptIdent("with")) {
                if (!node.setParameters(this._parseModuleConfig())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
                }
            }
        }
        if (this.syntax === "indented") {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnexpectedSemicolon);
            }
        }
        else {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.SemiColonExpected);
            }
        }
        return this.finish(node);
    }
    _parseModuleConfig() {
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.ModuleConfig);
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return null;
        }
        // First variable statement, no comma.
        if (!node.addChild(this._parseModuleConfigDeclaration())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                break;
            }
            if (!node.addChild(this._parseModuleConfigDeclaration())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseModuleConfigDeclaration() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ModuleConfiguration);
        if (!node.setIdentifier(this._parseVariable())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon) || !node.setValue(this._parseExpr(true))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
            if (this.hasWhitespace() || !this.acceptIdent("default")) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
            }
        }
        return this.finish(node);
    }
    _parseForward() {
        if (!this.peekKeyword("@forward")) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Forward);
        this.consumeToken();
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.StringLiteralExpected);
        }
        if (this.acceptIdent("as")) {
            const identifier = this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Forward]);
            if (!node.setIdentifier(identifier)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected);
            }
            // Wildcard must be the next character after the identifier string.
            if (this.hasWhitespace() || !this.acceptDelim("*")) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.WildcardExpected);
            }
        }
        if (this.acceptIdent("with")) {
            if (!node.setParameters(this._parseModuleConfig())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
            }
        }
        else if (this.peekIdent("hide") || this.peekIdent("show")) {
            if (!node.addChild(this._parseForwardVisibility())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrVariableExpected);
            }
        }
        if (this.syntax === "indented") {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnexpectedSemicolon);
            }
        }
        else {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.SemiColonExpected);
            }
        }
        return this.finish(node);
    }
    _parseForwardVisibility() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ForwardVisibility);
        // Assume to be "hide" or "show".
        node.setIdentifier(this._parseIdent());
        while (node.addChild(this._parseVariable() || this._parseIdent())) {
            // Consume all variables and idents ahead.
            this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma);
        }
        // More than just identifier
        return node.getChildren().length > 1 ? node : null;
    }
    _parseSupportsCondition() {
        return this._parseInterpolation() || super._parseSupportsCondition();
    }
}
//# sourceMappingURL=sassParser.js.map

}),
"../vscode-css-languageservice/lib/esm/parser/sassScanner.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Default: function() { return Default; },
  Ellipsis: function() { return Ellipsis; },
  EqualsOperator: function() { return EqualsOperator; },
  GreaterEqualsOperator: function() { return GreaterEqualsOperator; },
  InterpolationFunction: function() { return InterpolationFunction; },
  Module: function() { return Module; },
  NotEqualsOperator: function() { return NotEqualsOperator; },
  SassScanner: function() { return SassScanner; },
  SmallerEqualsOperator: function() { return SmallerEqualsOperator; },
  VariableName: function() { return VariableName; }
});
/* ESM import */var _cssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner */ "../vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const _FSL = "/".charCodeAt(0);
const _NWL = "\n".charCodeAt(0);
const _CAR = "\r".charCodeAt(0);
const _LFD = "\f".charCodeAt(0);
const _WSP = " ".charCodeAt(0);
const _TAB = "\t".charCodeAt(0);
const _DLR = "$".charCodeAt(0);
const _HSH = "#".charCodeAt(0);
const _CUL = "{".charCodeAt(0);
const _EQS = "=".charCodeAt(0);
const _BNG = "!".charCodeAt(0);
const _LAN = "<".charCodeAt(0);
const _RAN = ">".charCodeAt(0);
const _DOT = ".".charCodeAt(0);
const _MUL = "*".charCodeAt(0);
const _PLS = "+".charCodeAt(0);
let customTokenValue = _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CustomToken;
const VariableName = customTokenValue++;
const InterpolationFunction = customTokenValue++;
const Default = customTokenValue++;
const EqualsOperator = customTokenValue++;
const NotEqualsOperator = customTokenValue++;
const GreaterEqualsOperator = customTokenValue++;
const SmallerEqualsOperator = customTokenValue++;
const Ellipsis = customTokenValue++;
const Module = customTokenValue++;
class SassScanner extends _cssScanner__WEBPACK_IMPORTED_MODULE_0__.Scanner {
    scanNext(offset) {
        const depth = this.stream.depth;
        // ariabl
        if (this.stream.advanceIfChar(_DLR)) {
            const content = ["$"];
            if (this.ident(content)) {
                return this.finishToken(offset, VariableName, content.join(""));
            }
            else {
                this.stream.goBackTo(offset, depth);
            }
        }
        // interpolation function #{..}
        if (this.stream.advanceIfChars([_HSH, _CUL])) {
            return this.finishToken(offset, InterpolationFunction);
        }
        // operator ==
        if (this.stream.advanceIfChars([_EQS, _EQS])) {
            return this.finishToken(offset, EqualsOperator);
        }
        // operator !=
        if (this.stream.advanceIfChars([_BNG, _EQS])) {
            return this.finishToken(offset, NotEqualsOperator);
        }
        // operators <, <=
        if (this.stream.advanceIfChar(_LAN)) {
            if (this.stream.advanceIfChar(_EQS)) {
                return this.finishToken(offset, SmallerEqualsOperator);
            }
            return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim);
        }
        // ooperators >, >=
        if (this.stream.advanceIfChar(_RAN)) {
            if (this.stream.advanceIfChar(_EQS)) {
                return this.finishToken(offset, GreaterEqualsOperator);
            }
            return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim);
        }
        // ellipis
        if (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {
            return this.finishToken(offset, Ellipsis);
        }
        if (this.syntax === "indented") {
            if (this.stream.advanceIfChar(_PLS)) {
                let content = [];
                if (this.ident(content)) {
                    return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtIncludeShort, content.join(""));
                }
                else {
                    this.stream.goBackTo(offset, depth);
                }
            }
            if (this.stream.advanceIfChar(_EQS)) {
                let content = [];
                if (this.ident(content)) {
                    return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtMixinShort, content.join(""));
                }
                else {
                    this.stream.goBackTo(offset, depth);
                }
            }
        }
        return super.scanNext(offset);
    }
    trivia() {
        while (true) {
            const offset = this.stream.pos();
            if (this.whitespace()) {
                if (!this.ignoreWhitespace) {
                    return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Whitespace);
                }
            }
            else if (this.comment()) {
                if (!this.ignoreComment) {
                    return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comment);
                }
            }
            else {
                return null;
            }
        }
    }
    whitespace() {
        if (this.syntax === "indented") {
            // Whitespace is only considered trivial in this dialect if:
            // - it is not a newline
            // - it is not at the beginning of a line (i. e. is indentation)
            // Only advance the stream for _WSP and _TAB if the previous token is not a _NWL, _LFD or _CAR.
            const prevChar = this.stream.lookbackChar(1);
            if (prevChar === _NWL || prevChar === _LFD || prevChar === _CAR) {
                return false;
            }
            const n = this.stream.advanceWhileChar((ch) => {
                return ch === _WSP || ch === _TAB;
            });
            return n > 0;
        }
        const n = this.stream.advanceWhileChar((ch) => {
            return ch === _WSP || ch === _TAB || ch === _NWL || ch === _LFD || ch === _CAR;
        });
        return n > 0;
    }
    comment() {
        if (this.syntax === "indented") {
            // For comments in indented, any content that is indented
            // after opening a comment is considered part of that comment,
            // even if the line doesn't start with the usual comment
            // syntax.
            // https://sass-lang.com/documentation/syntax/comments/#in-sass
            if (this.stream.advanceIfChars([_FSL, _MUL]) || (!this.inURL && this.stream.advanceIfChars([_FSL, _FSL]))) {
                let depth = this.stream.depth, kind = this.stream.lookbackChar(1), hot = false, success = false, mark = this.stream.pos();
                scan: do {
                    this.stream.advanceWhileChar((ch) => {
                        if (kind === _MUL && hot && ch === _FSL) {
                            // Stop if a CSS-style comment is manually closed with */
                            success = true;
                            return false;
                        }
                        hot = false;
                        // Accept all characters up until a new line.
                        switch (ch) {
                            case _NWL:
                            case _CAR:
                            case _LFD: {
                                // In the case of a newline we need to see if the next line is indented.
                                // If it is, keep advancing the stream. If not, consume the whitespace up
                                // to the next non-whitespace character.
                                mark = this.stream.pos();
                                return false;
                            }
                            case _MUL: {
                                hot = true;
                                return true;
                            }
                            default:
                                return true;
                        }
                    });
                    if (success) {
                        break scan;
                    }
                    if (this.stream.eos()) {
                        return true;
                    }
                    this.stream.advanceIfChar(_NWL); // only the one line, blank line == end of comment
                    this.stream.advanceIfChar(_CAR);
                    this.stream.advanceIfChar(_LFD);
                    let commentDepth = this.stream.advanceWhileChar((ch) => {
                        return ch === _WSP || ch === _TAB;
                    });
                    if (commentDepth > depth) {
                        continue;
                    }
                    else if (commentDepth === depth) {
                        // If there's no indentation at this point, we require comment syntax
                        if (!this.stream.advanceIfChars([_FSL, _FSL]) && !this.stream.advanceIfChars([_MUL])) {
                            this.stream.goBackTo(mark, depth);
                            break scan;
                        }
                    }
                    else if (commentDepth === 0) {
                        // This is a "clean dedent", we're back to the root of the stylesheet. Finish the comment.
                        break scan;
                    }
                    else {
                        this.stream.goBackTo(mark, depth);
                        break scan;
                    }
                    // eslint-disable-next-line no-constant-condition
                } while (true);
                if (success) {
                    this.stream.advance(1);
                }
                return true;
            }
            return false;
        }
        if (super.comment()) {
            return true;
        }
        if (!this.inURL && this.stream.advanceIfChars([_FSL, _FSL])) {
            this.stream.advanceWhileChar((ch) => {
                switch (ch) {
                    case _NWL:
                    case _CAR:
                    case _LFD:
                        return false;
                    default:
                        return true;
                }
            });
            return true;
        }
        else {
            return false;
        }
    }
}
//# sourceMappingURL=sassScanner.js.map

}),
"../vscode-css-languageservice/lib/esm/services/cssCodeActions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSCodeActions: function() { return CSSCodeActions; }
});
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _utils_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/strings */ "../vscode-css-languageservice/lib/esm/utils/strings.js");
/* ESM import */var _services_lintRules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/lintRules */ "../vscode-css-languageservice/lib/esm/services/lintRules.js");
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_4__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






class CSSCodeActions {
    constructor(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    doCodeActions(document, range, context, stylesheet) {
        return this.doCodeActions2(document, range, context, stylesheet).map((ca) => {
            const textDocumentEdit = ca.edit && ca.edit.documentChanges && ca.edit.documentChanges[0];
            return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.Command.create(ca.title, "_css.applyCodeAction", document.uri, document.version, textDocumentEdit && textDocumentEdit.edits);
        });
    }
    doCodeActions2(document, range, context, stylesheet) {
        const result = [];
        if (context.diagnostics) {
            for (const diagnostic of context.diagnostics) {
                this.appendFixesForMarker(document, stylesheet, diagnostic, result);
            }
        }
        return result;
    }
    getFixesForUnknownProperty(document, property, marker, result) {
        const propertyName = property.getName();
        const candidates = [];
        this.cssDataManager.getProperties().forEach((p) => {
            const score = (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.difference)(propertyName, p.name);
            if (score >= propertyName.length / 2 /*score_lim*/) {
                candidates.push({ property: p.name, score });
            }
        });
        // Sort in descending order.
        candidates.sort((a, b) => {
            return b.score - a.score || a.property.localeCompare(b.property);
        });
        let maxActions = 3;
        for (const candidate of candidates) {
            const propertyName = candidate.property;
            const title = _vscode_l10n__WEBPACK_IMPORTED_MODULE_4__.t("Rename to '{0}'", propertyName);
            const edit = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.TextEdit.replace(marker.range, propertyName);
            const documentIdentifier = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.VersionedTextDocumentIdentifier.create(document.uri, document.version);
            const workspaceEdit = { documentChanges: [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.TextDocumentEdit.create(documentIdentifier, [edit])] };
            const codeAction = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.CodeAction.create(title, workspaceEdit, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.CodeActionKind.QuickFix);
            codeAction.diagnostics = [marker];
            result.push(codeAction);
            if (--maxActions <= 0) {
                return;
            }
        }
    }
    appendFixesForMarker(document, stylesheet, marker, result) {
        if (marker.code !== _services_lintRules__WEBPACK_IMPORTED_MODULE_2__.Rules.UnknownProperty.id) {
            return;
        }
        const offset = document.offsetAt(marker.range.start);
        const end = document.offsetAt(marker.range.end);
        const nodepath = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.getNodePath(stylesheet, offset);
        for (let i = nodepath.length - 1; i >= 0; i--) {
            const node = nodepath[i];
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                const property = node.getProperty();
                if (property && property.offset === offset && property.end === end) {
                    this.getFixesForUnknownProperty(document, property, marker, result);
                    return;
                }
            }
        }
    }
}
//# sourceMappingURL=cssCodeActions.js.map

}),
"../vscode-css-languageservice/lib/esm/services/cssCompletion.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSCompletion: function() { return CSSCompletion; }
});
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssSymbolScope */ "../vscode-css-languageservice/lib/esm/parser/cssSymbolScope.js");
/* ESM import */var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../languageFacts/facts */ "../vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* ESM import */var _utils_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/strings */ "../vscode-css-languageservice/lib/esm/utils/strings.js");
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_7__);
/* ESM import */var _utils_objects__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/objects */ "../vscode-css-languageservice/lib/esm/utils/objects.js");
/* ESM import */var _pathCompletion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pathCompletion */ "../vscode-css-languageservice/lib/esm/services/pathCompletion.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/









const SnippetFormat = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.InsertTextFormat.Snippet;
const retriggerCommand = {
    title: "Suggest",
    command: "editor.action.triggerSuggest",
};
var SortTexts;
(function (SortTexts) {
    // char code 32, comes before everything
    SortTexts["Enums"] = " ";
    SortTexts["Normal"] = "d";
    SortTexts["VendorPrefixed"] = "x";
    SortTexts["Term"] = "y";
    SortTexts["Variable"] = "z";
})(SortTexts || (SortTexts = {}));
class CSSCompletion {
    constructor(variablePrefix = null, lsOptions, cssDataManager) {
        this.variablePrefix = variablePrefix;
        this.lsOptions = lsOptions;
        this.cssDataManager = cssDataManager;
        this.completionParticipants = [];
    }
    configure(settings) {
        this.defaultSettings = settings;
    }
    getSymbolContext() {
        if (!this.symbolContext) {
            this.symbolContext = new _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_1__.Symbols(this.styleSheet);
        }
        return this.symbolContext;
    }
    setCompletionParticipants(registeredCompletionParticipants) {
        this.completionParticipants = registeredCompletionParticipants || [];
    }
    async doComplete2(document, position, styleSheet, documentContext, completionSettings = this.defaultSettings) {
        if (!this.lsOptions.fileSystemProvider || !this.lsOptions.fileSystemProvider.readDirectory) {
            return this.doComplete(document, position, styleSheet, completionSettings);
        }
        const participant = new _pathCompletion__WEBPACK_IMPORTED_MODULE_6__.PathCompletionParticipant(this.lsOptions.fileSystemProvider.readDirectory);
        const contributedParticipants = this.completionParticipants;
        this.completionParticipants = [participant].concat(contributedParticipants);
        const result = this.doComplete(document, position, styleSheet, completionSettings);
        try {
            const pathCompletionResult = await participant.computeCompletions(document, documentContext);
            return {
                isIncomplete: result.isIncomplete || pathCompletionResult.isIncomplete,
                itemDefaults: result.itemDefaults,
                items: pathCompletionResult.items.concat(result.items),
            };
        }
        finally {
            this.completionParticipants = contributedParticipants;
        }
    }
    doComplete(document, position, styleSheet, documentSettings) {
        this.offset = document.offsetAt(position);
        this.position = position;
        this.currentWord = getCurrentWord(document, this.offset);
        this.defaultReplaceRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);
        this.textDocument = document;
        this.styleSheet = styleSheet;
        this.documentSettings = documentSettings;
        try {
            const result = {
                isIncomplete: false,
                itemDefaults: {
                    editRange: {
                        start: { line: position.line, character: position.character - this.currentWord.length },
                        end: position,
                    },
                },
                items: [],
            };
            this.nodePath = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.getNodePath(this.styleSheet, this.offset);
            for (let i = this.nodePath.length - 1; i >= 0; i--) {
                const node = this.nodePath[i];
                if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Property) {
                    this.getCompletionsForDeclarationProperty(node.getParent(), result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Expression) {
                    if (node.parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Interpolation) {
                        this.getVariableProposals(null, result);
                    }
                    else {
                        this.getCompletionsForExpression(node, result);
                    }
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                    const parentRef = node.findAParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Ruleset);
                    if (parentRef) {
                        if (parentRef.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference) {
                            this.getCompletionsForExtendsReference(parentRef, node, result);
                        }
                        else {
                            const parentRuleSet = parentRef;
                            this.getCompletionsForSelector(parentRuleSet, parentRuleSet && parentRuleSet.isNested(), result);
                        }
                    }
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument) {
                    this.getCompletionsForFunctionArgument(node, node.getParent(), result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declarations) {
                    this.getCompletionsForDeclarations(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.VariableDeclaration) {
                    this.getCompletionsForVariableDeclaration(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
                    this.getCompletionsForRuleSet(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Interpolation) {
                    this.getCompletionsForInterpolation(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionDeclaration) {
                    this.getCompletionsForFunctionDeclaration(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.MixinReference) {
                    this.getCompletionsForMixinReference(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Function) {
                    this.getCompletionsForFunctionArgument(null, node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Supports) {
                    this.getCompletionsForSupports(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                    this.getCompletionsForSupportsCondition(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ExtendsReference) {
                    this.getCompletionsForExtendsReference(node, null, result);
                }
                else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.URILiteral) {
                    this.getCompletionForUriLiteralValue(node, result);
                }
                else if (node.parent === null) {
                    this.getCompletionForTopLevel(result);
                }
                else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.StringLiteral && this.isImportPathParent(node.parent.type)) {
                    this.getCompletionForImportPath(node, result);
                    // } else if (node instanceof nodes.Variable) {
                    // this.getCompletionsForVariableDeclaration()
                }
                else {
                    continue;
                }
                if (result.items.length > 0 || this.offset > node.offset) {
                    return this.finalize(result);
                }
            }
            this.getCompletionsForStylesheet(result);
            if (result.items.length === 0) {
                if (this.variablePrefix && this.currentWord.indexOf(this.variablePrefix) === 0) {
                    this.getVariableProposals(null, result);
                }
            }
            return this.finalize(result);
        }
        finally {
            // don't hold on any state, clear symbolContext
            this.position = null;
            this.currentWord = null;
            this.textDocument = null;
            this.styleSheet = null;
            this.symbolContext = null;
            this.defaultReplaceRange = null;
            this.nodePath = null;
        }
    }
    isImportPathParent(type) {
        return type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Import;
    }
    finalize(result) {
        return result;
    }
    findInNodePath(...types) {
        for (let i = this.nodePath.length - 1; i >= 0; i--) {
            const node = this.nodePath[i];
            if (types.indexOf(node.type) !== -1) {
                return node;
            }
        }
        return null;
    }
    getCompletionsForDeclarationProperty(declaration, result) {
        return this.getPropertyProposals(declaration, result);
    }
    getPropertyProposals(declaration, result) {
        const triggerPropertyValueCompletion = this.isTriggerPropertyValueCompletionEnabled;
        const completePropertyWithSemicolon = this.isCompletePropertyWithSemicolonEnabled;
        const properties = this.cssDataManager.getProperties();
        properties.forEach((entry) => {
            let range;
            let insertText;
            let retrigger = false;
            if (declaration) {
                range = this.getCompletionRange(declaration.getProperty());
                insertText = entry.name;
                if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.colonPosition)) {
                    insertText += ": ";
                    retrigger = true;
                }
            }
            else {
                range = this.getCompletionRange(null);
                insertText = entry.name + ": ";
                retrigger = true;
            }
            // Empty .selector { | } case
            if (!declaration && completePropertyWithSemicolon) {
                if (this.textDocument.languageId === "sass") {
                    // Semicolons are syntax errors in indented
                    insertText += "$0";
                }
                else {
                    insertText += "$0;";
                }
            }
            // Cases such as .selector { p; } or .selector { p:; }
            if (declaration && !declaration.semicolonPosition) {
                if (completePropertyWithSemicolon && this.offset >= this.textDocument.offsetAt(range.end)) {
                    if (this.textDocument.languageId === "sass") {
                        // Semicolons are syntax errors in indented
                        insertText += "$0";
                    }
                    else {
                        insertText += "$0;";
                    }
                }
            }
            const item = {
                label: entry.name,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(range, insertText),
                insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Property,
            };
            if (!entry.restrictions) {
                retrigger = false;
            }
            if (triggerPropertyValueCompletion && retrigger) {
                item.command = retriggerCommand;
            }
            const relevance = typeof entry.relevance === "number" ? Math.min(Math.max(entry.relevance, 0), 99) : 50;
            const sortTextSuffix = (255 - relevance).toString(16);
            const sortTextPrefix = _utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, "-") ? SortTexts.VendorPrefixed : SortTexts.Normal;
            item.sortText = sortTextPrefix + "_" + sortTextSuffix;
            result.items.push(item);
        });
        this.completionParticipants.forEach((participant) => {
            if (participant.onCssProperty) {
                participant.onCssProperty({
                    propertyName: this.currentWord,
                    range: this.defaultReplaceRange,
                });
            }
        });
        return result;
    }
    get isTriggerPropertyValueCompletionEnabled() {
        return this.documentSettings?.triggerPropertyValueCompletion ?? true;
    }
    get isCompletePropertyWithSemicolonEnabled() {
        return this.documentSettings?.completePropertyWithSemicolon ?? true;
    }
    getCompletionsForDeclarationValue(node, result) {
        const propertyName = node.getFullPropertyName();
        const entry = this.cssDataManager.getProperty(propertyName);
        let existingNode = node.getValue() || null;
        while (existingNode && existingNode.hasChildren()) {
            existingNode = existingNode.findChildAtOffset(this.offset, false);
        }
        this.completionParticipants.forEach((participant) => {
            if (participant.onCssPropertyValue) {
                participant.onCssPropertyValue({
                    propertyName,
                    propertyValue: this.currentWord,
                    range: this.getCompletionRange(existingNode),
                });
            }
        });
        if (entry) {
            if (entry.restrictions) {
                for (const restriction of entry.restrictions) {
                    switch (restriction) {
                        case "color":
                            this.getColorProposals(entry, existingNode, result);
                            break;
                        case "position":
                            this.getPositionProposals(entry, existingNode, result);
                            break;
                        case "repeat":
                            this.getRepeatStyleProposals(entry, existingNode, result);
                            break;
                        case "line-style":
                            this.getLineStyleProposals(entry, existingNode, result);
                            break;
                        case "line-width":
                            this.getLineWidthProposals(entry, existingNode, result);
                            break;
                        case "geometry-box":
                            this.getGeometryBoxProposals(entry, existingNode, result);
                            break;
                        case "box":
                            this.getBoxProposals(entry, existingNode, result);
                            break;
                        case "image":
                            this.getImageProposals(entry, existingNode, result);
                            break;
                        case "timing-function":
                            this.getTimingFunctionProposals(entry, existingNode, result);
                            break;
                        case "shape":
                            this.getBasicShapeProposals(entry, existingNode, result);
                            break;
                    }
                }
            }
            this.getValueEnumProposals(entry, existingNode, result);
            this.getCSSWideKeywordProposals(entry, existingNode, result);
            this.getUnitProposals(entry, existingNode, result);
        }
        else {
            const existingValues = collectValues(this.styleSheet, node);
            for (const existingValue of existingValues.getEntries()) {
                result.items.push({
                    label: existingValue,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), existingValue),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
                });
            }
        }
        this.getVariableProposals(existingNode, result);
        this.getTermProposals(entry, existingNode, result);
        return result;
    }
    getValueEnumProposals(entry, existingNode, result) {
        if (entry.values) {
            for (const value of entry.values) {
                let insertString = value.name;
                let insertTextFormat;
                if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.endsWith(insertString, ")")) {
                    const from = insertString.lastIndexOf("(");
                    if (from !== -1) {
                        insertString = insertString.substring(0, from + 1) + "$1" + insertString.substring(from + 1);
                        insertTextFormat = SnippetFormat;
                    }
                }
                let sortText = SortTexts.Enums;
                if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(value.name, "-")) {
                    sortText += SortTexts.VendorPrefixed;
                }
                const item = {
                    label: value.name,
                    documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(value, this.doesSupportMarkdown()),
                    tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertString),
                    sortText,
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
                    insertTextFormat,
                };
                result.items.push(item);
            }
        }
        return result;
    }
    getCSSWideKeywordProposals(entry, existingNode, result) {
        for (const keywords in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords) {
            result.items.push({
                label: keywords,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords[keywords],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), keywords),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        for (const func in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideFunctions) {
            const insertText = moveCursorInsideParenthesis(func);
            result.items.push({
                label: func,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideFunctions[func],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: SnippetFormat,
                command: _utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(func, "var") ? retriggerCommand : undefined,
            });
        }
        return result;
    }
    getCompletionsForInterpolation(node, result) {
        if (this.offset >= node.offset + 2) {
            this.getVariableProposals(null, result);
        }
        return result;
    }
    getVariableProposals(existingNode, result) {
        const symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        for (const symbol of symbols) {
            const insertText = _utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(symbol.name, "--") ? `var(${symbol.name})` : symbol.name;
            const completionItem = {
                label: symbol.name,
                documentation: symbol.value ? _utils_strings__WEBPACK_IMPORTED_MODULE_3__.getLimitedString(symbol.value) : symbol.value,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable,
                sortText: SortTexts.Variable,
            };
            if (typeof completionItem.documentation === "string" &&
                _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.isColorString(completionItem.documentation)) {
                completionItem.kind = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color;
            }
            if (symbol.node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionParameter) {
                const mixinNode = symbol.node.getParent();
                if (mixinNode.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration) {
                    completionItem.detail = _vscode_l10n__WEBPACK_IMPORTED_MODULE_7__.t("argument from '{0}'", mixinNode.getName());
                }
            }
            result.items.push(completionItem);
        }
        return result;
    }
    getVariableProposalsForCSSVarFunction(result) {
        const allReferencedVariables = new Set();
        this.styleSheet.acceptVisitor(new VariableCollector(allReferencedVariables, this.offset));
        let symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        for (const symbol of symbols) {
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(symbol.name, "--")) {
                const completionItem = {
                    label: symbol.name,
                    documentation: symbol.value ? _utils_strings__WEBPACK_IMPORTED_MODULE_3__.getLimitedString(symbol.value) : symbol.value,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(null), symbol.name),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable,
                };
                if (typeof completionItem.documentation === "string" &&
                    _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.isColorString(completionItem.documentation)) {
                    completionItem.kind = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color;
                }
                result.items.push(completionItem);
            }
            allReferencedVariables.remove(symbol.name);
        }
        for (const name of allReferencedVariables.getEntries()) {
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(name, "--")) {
                const completionItem = {
                    label: name,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(null), name),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable,
                };
                result.items.push(completionItem);
            }
        }
        return result;
    }
    getUnitProposals(entry, existingNode, result) {
        let currentWord = "0";
        if (this.currentWord.length > 0) {
            const numMatch = this.currentWord.match(/^-?\d[\.\d+]*/);
            if (numMatch) {
                currentWord = numMatch[0];
                result.isIncomplete = currentWord.length === this.currentWord.length;
            }
        }
        else if (this.currentWord.length === 0) {
            result.isIncomplete = true;
        }
        if (existingNode && existingNode.parent && existingNode.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            existingNode = existingNode.getParent(); // include the unary operator
        }
        if (entry.restrictions) {
            for (const restriction of entry.restrictions) {
                const units = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.units[restriction];
                if (units) {
                    for (const unit of units) {
                        const insertText = currentWord + unit;
                        result.items.push({
                            label: insertText,
                            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Unit,
                        });
                    }
                }
            }
        }
        return result;
    }
    getCompletionRange(existingNode) {
        if (existingNode && existingNode.offset <= this.offset && this.offset <= existingNode.end) {
            const end = existingNode.end !== -1 ? this.textDocument.positionAt(existingNode.end) : this.position;
            const start = this.textDocument.positionAt(existingNode.offset);
            if (start.line === end.line) {
                return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(start, end); // multi line edits are not allowed
            }
        }
        return this.defaultReplaceRange;
    }
    getColorProposals(entry, existingNode, result) {
        for (const color in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colors) {
            result.items.push({
                label: color,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colors[color],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color,
            });
        }
        for (const color in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colorKeywords) {
            result.items.push({
                label: color,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colorKeywords[color],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        const colorValues = new Set();
        this.styleSheet.acceptVisitor(new ColorValueCollector(colorValues, this.offset));
        for (const color of colorValues.getEntries()) {
            result.items.push({
                label: color,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color,
            });
        }
        for (const p of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colorFunctions) {
            result.items.push({
                label: p.label,
                detail: p.func,
                documentation: p.desc,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), p.insertText),
                insertTextFormat: SnippetFormat,
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
            });
        }
        return result;
    }
    getPositionProposals(entry, existingNode, result) {
        for (const position in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.positionKeywords) {
            result.items.push({
                label: position,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.positionKeywords[position],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), position),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        return result;
    }
    getRepeatStyleProposals(entry, existingNode, result) {
        for (const repeat in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords) {
            result.items.push({
                label: repeat,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords[repeat],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), repeat),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        return result;
    }
    getLineStyleProposals(entry, existingNode, result) {
        for (const lineStyle in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords) {
            result.items.push({
                label: lineStyle,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords[lineStyle],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), lineStyle),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        return result;
    }
    getLineWidthProposals(entry, existingNode, result) {
        for (const lineWidth of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.lineWidthKeywords) {
            result.items.push({
                label: lineWidth,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), lineWidth),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        return result;
    }
    getGeometryBoxProposals(entry, existingNode, result) {
        for (const box in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords) {
            result.items.push({
                label: box,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords[box],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), box),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        return result;
    }
    getBoxProposals(entry, existingNode, result) {
        for (const box in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.boxKeywords) {
            result.items.push({
                label: box,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.boxKeywords[box],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), box),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
            });
        }
        return result;
    }
    getImageProposals(entry, existingNode, result) {
        for (const image in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.imageFunctions) {
            const insertText = moveCursorInsideParenthesis(image);
            result.items.push({
                label: image,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.imageFunctions[image],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: image !== insertText ? SnippetFormat : void 0,
            });
        }
        return result;
    }
    getTimingFunctionProposals(entry, existingNode, result) {
        for (const timing in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions) {
            const insertText = moveCursorInsideParenthesis(timing);
            result.items.push({
                label: timing,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions[timing],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: timing !== insertText ? SnippetFormat : void 0,
            });
        }
        return result;
    }
    getBasicShapeProposals(entry, existingNode, result) {
        for (const shape in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions) {
            const insertText = moveCursorInsideParenthesis(shape);
            result.items.push({
                label: shape,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions[shape],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: shape !== insertText ? SnippetFormat : void 0,
            });
        }
        return result;
    }
    getCompletionsForStylesheet(result) {
        const node = this.styleSheet.findFirstChildBeforeOffset(this.offset);
        if (!node) {
            return this.getCompletionForTopLevel(result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
            return this.getCompletionsForRuleSet(node, result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Supports) {
            return this.getCompletionsForSupports(node, result);
        }
        return result;
    }
    getCompletionForTopLevel(result) {
        this.cssDataManager.getAtDirectives().forEach((entry) => {
            result.items.push({
                label: entry.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(null), entry.name),
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword,
            });
        });
        this.getCompletionsForSelector(null, false, result);
        return result;
    }
    getCompletionsForRuleSet(ruleSet, result) {
        const declarations = ruleSet.getDeclarations();
        const isAfter = declarations && declarations.endsWith("}") && this.offset >= declarations.end;
        if (isAfter) {
            return this.getCompletionForTopLevel(result);
        }
        const isInSelectors = !declarations || this.offset <= declarations.offset;
        if (isInSelectors) {
            return this.getCompletionsForSelector(ruleSet, ruleSet.isNested(), result);
        }
        return this.getCompletionsForDeclarations(ruleSet.getDeclarations(), result);
    }
    getCompletionsForSelector(ruleSet, isNested, result) {
        const existingNode = this.findInNodePath(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector);
        if (!existingNode && this.hasCharacterAtPosition(this.offset - this.currentWord.length - 1, ":")) {
            // after the ':' of a pseudo selector, no node generated for just ':'
            this.currentWord = ":" + this.currentWord;
            if (this.hasCharacterAtPosition(this.offset - this.currentWord.length - 1, ":")) {
                this.currentWord = ":" + this.currentWord; // for '::'
            }
            this.defaultReplaceRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);
        }
        const pseudoClasses = this.cssDataManager.getPseudoClasses();
        pseudoClasses.forEach((entry) => {
            const insertText = moveCursorInsideParenthesis(entry.name);
            const item = {
                label: entry.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0,
            };
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, ":-")) {
                item.sortText = SortTexts.VendorPrefixed;
            }
            result.items.push(item);
        });
        const pseudoElements = this.cssDataManager.getPseudoElements();
        pseudoElements.forEach((entry) => {
            const insertText = moveCursorInsideParenthesis(entry.name);
            const item = {
                label: entry.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0,
            };
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, "::-")) {
                item.sortText = SortTexts.VendorPrefixed;
            }
            result.items.push(item);
        });
        if (!isNested) {
            // show html tags only for top level
            for (const entry of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.html5Tags) {
                result.items.push({
                    label: entry,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), entry),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword,
                });
            }
            for (const entry of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.svgElements) {
                result.items.push({
                    label: entry,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), entry),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword,
                });
            }
        }
        const visited = {};
        visited[this.currentWord] = true;
        const docText = this.textDocument.getText();
        this.styleSheet.accept((n) => {
            if (n.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SimpleSelector && n.length > 0) {
                const selector = docText.substr(n.offset, n.length);
                if (selector.charAt(0) === "." && !visited[selector]) {
                    visited[selector] = true;
                    result.items.push({
                        label: selector,
                        textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), selector),
                        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword,
                    });
                }
                return false;
            }
            return true;
        });
        if (ruleSet && ruleSet.isNested()) {
            const selector = ruleSet.getSelectors().findFirstChildBeforeOffset(this.offset);
            if (selector && ruleSet.getSelectors().getChildren().indexOf(selector) === 0) {
                this.getPropertyProposals(null, result);
            }
        }
        return result;
    }
    getCompletionsForDeclarations(declarations, result) {
        if (!declarations || this.offset === declarations.offset) {
            // incomplete nodes
            return result;
        }
        const node = declarations.findFirstChildBeforeOffset(this.offset);
        if (!node) {
            return this.getCompletionsForDeclarationProperty(null, result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.AbstractDeclaration) {
            const declaration = node;
            if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.colonPosition) || this.offset <= declaration.colonPosition) {
                // complete property
                return this.getCompletionsForDeclarationProperty(declaration, result);
            }
            else if ((0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.semicolonPosition) && declaration.semicolonPosition < this.offset) {
                if (this.offset === declaration.semicolonPosition + 1) {
                    return result; // don't show new properties right after semicolon (see Bug 15421:[intellisense] [css] Be less aggressive when manually typing CSS)
                }
                // complete next property
                return this.getCompletionsForDeclarationProperty(null, result);
            }
            else if (this.textDocument.languageId === "sass") {
                let declBeforeOffsetHasValue = Boolean(declaration.getChild(1));
                let isNextDeclaration = this.offset > declaration.offset + declaration.length && declBeforeOffsetHasValue;
                if (isNextDeclaration) {
                    // complete next property
                    return this.getCompletionsForDeclarationProperty(null, result);
                }
            }
            if (declaration instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                // complete value
                return this.getCompletionsForDeclarationValue(declaration, result);
            }
        }
        else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ExtendsReference) {
            this.getCompletionsForExtendsReference(node, null, result);
        }
        else if (this.currentWord && this.currentWord[0] === "@") {
            this.getCompletionsForDeclarationProperty(null, result);
        }
        else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
            this.getCompletionsForDeclarationProperty(null, result);
        }
        return result;
    }
    getCompletionsForVariableDeclaration(declaration, result) {
        if (this.offset && (0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.colonPosition) && this.offset > declaration.colonPosition) {
            this.getVariableProposals(declaration.getValue() || null, result);
        }
        return result;
    }
    getCompletionsForExpression(expression, result) {
        const parent = expression.getParent();
        if (parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument) {
            this.getCompletionsForFunctionArgument(parent, parent.getParent(), result);
            return result;
        }
        const declaration = expression.findParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Declaration);
        if (!declaration) {
            this.getTermProposals(undefined, null, result);
            return result;
        }
        const node = expression.findChildAtOffset(this.offset, true);
        if (!node) {
            return this.getCompletionsForDeclarationValue(declaration, result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NumericValue || node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier) {
            return this.getCompletionsForDeclarationValue(declaration, result);
        }
        return result;
    }
    getCompletionsForFunctionArgument(arg, func, result) {
        const identifier = func.getIdentifier();
        if (identifier && identifier.matches("var")) {
            if (!func.getArguments().hasChildren() || func.getArguments().getChild(0) === arg) {
                this.getVariableProposalsForCSSVarFunction(result);
            }
        }
        return result;
    }
    getCompletionsForFunctionDeclaration(decl, result) {
        const declarations = decl.getDeclarations();
        if (declarations && this.offset > declarations.offset && this.offset < declarations.end) {
            this.getTermProposals(undefined, null, result);
        }
        return result;
    }
    getCompletionsForMixinReference(ref, result) {
        const allMixins = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Mixin);
        for (const mixinSymbol of allMixins) {
            if (mixinSymbol.node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.MixinDeclaration) {
                result.items.push(this.makeTermProposal(mixinSymbol, mixinSymbol.node.getParameters(), null));
            }
        }
        const identifierNode = ref.getIdentifier() || null;
        this.completionParticipants.forEach((participant) => {
            if (participant.onCssMixinReference) {
                participant.onCssMixinReference({
                    mixinName: this.currentWord,
                    range: this.getCompletionRange(identifierNode),
                });
            }
        });
        return result;
    }
    getTermProposals(entry, existingNode, result) {
        const allFunctions = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function);
        for (const functionSymbol of allFunctions) {
            if (functionSymbol.node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionDeclaration) {
                result.items.push(this.makeTermProposal(functionSymbol, functionSymbol.node.getParameters(), existingNode));
            }
        }
        return result;
    }
    makeTermProposal(symbol, parameters, existingNode) {
        const params = parameters.getChildren().map((c) => {
            return c instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionParameter ? c.getName() : c.getText();
        });
        const insertText = symbol.name + "(" + params.map((p, index) => "${" + (index + 1) + ":" + p + "}").join(", ") + ")";
        return {
            label: symbol.name,
            detail: symbol.name + "(" + params.join(", ") + ")",
            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
            insertTextFormat: SnippetFormat,
            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
            sortText: SortTexts.Term,
        };
    }
    getCompletionsForSupportsCondition(supportsCondition, result) {
        const child = supportsCondition.findFirstChildBeforeOffset(this.offset);
        if (child) {
            if (child instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(child.colonPosition) || this.offset <= child.colonPosition) {
                    return this.getCompletionsForDeclarationProperty(child, result);
                }
                else {
                    return this.getCompletionsForDeclarationValue(child, result);
                }
            }
            else if (child instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                return this.getCompletionsForSupportsCondition(child, result);
            }
        }
        if ((0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(supportsCondition.lParent) &&
            this.offset > supportsCondition.lParent &&
            (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(supportsCondition.rParent) || this.offset <= supportsCondition.rParent)) {
            return this.getCompletionsForDeclarationProperty(null, result);
        }
        return result;
    }
    getCompletionsForSupports(supports, result) {
        const declarations = supports.getDeclarations();
        const inInCondition = !declarations || this.offset <= declarations.offset;
        if (inInCondition) {
            const child = supports.findFirstChildBeforeOffset(this.offset);
            if (child instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                return this.getCompletionsForSupportsCondition(child, result);
            }
            return result;
        }
        return this.getCompletionForTopLevel(result);
    }
    getCompletionsForExtendsReference(extendsRef, existingNode, result) {
        return result;
    }
    getCompletionForUriLiteralValue(uriLiteralNode, result) {
        let uriValue;
        let position;
        let range;
        // No children, empty value
        if (!uriLiteralNode.hasChildren()) {
            uriValue = "";
            position = this.position;
            const emptyURIValuePosition = this.textDocument.positionAt(uriLiteralNode.offset + "url(".length);
            range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(emptyURIValuePosition, emptyURIValuePosition);
        }
        else {
            const uriValueNode = uriLiteralNode.getChild(0);
            uriValue = uriValueNode.getText();
            position = this.position;
            range = this.getCompletionRange(uriValueNode);
        }
        this.completionParticipants.forEach((participant) => {
            if (participant.onCssURILiteralValue) {
                participant.onCssURILiteralValue({
                    uriValue,
                    position,
                    range,
                });
            }
        });
        return result;
    }
    getCompletionForImportPath(importPathNode, result) {
        this.completionParticipants.forEach((participant) => {
            if (participant.onCssImportPath) {
                participant.onCssImportPath({
                    pathValue: importPathNode.getText(),
                    position: this.position,
                    range: this.getCompletionRange(importPathNode),
                });
            }
        });
        return result;
    }
    hasCharacterAtPosition(offset, char) {
        const text = this.textDocument.getText();
        return offset >= 0 && offset < text.length && text.charAt(offset) === char;
    }
    doesSupportMarkdown() {
        if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.supportsMarkdown)) {
            if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.lsOptions.clientCapabilities)) {
                this.supportsMarkdown = true;
                return this.supportsMarkdown;
            }
            const documentationFormat = this.lsOptions.clientCapabilities.textDocument?.completion?.completionItem?.documentationFormat;
            this.supportsMarkdown =
                Array.isArray(documentationFormat) && documentationFormat.indexOf(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
}
function isDeprecated(entry) {
    if (entry.status && (entry.status === "nonstandard" || entry.status === "obsolete")) {
        return true;
    }
    return false;
}
class Set {
    constructor() {
        this.entries = {};
    }
    add(entry) {
        this.entries[entry] = true;
    }
    remove(entry) {
        delete this.entries[entry];
    }
    getEntries() {
        return Object.keys(this.entries);
    }
}
function moveCursorInsideParenthesis(text) {
    return text.replace(/\(\)$/, "($1)");
}
function collectValues(styleSheet, declaration) {
    const fullPropertyName = declaration.getFullPropertyName();
    const entries = new Set();
    function visitValue(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier || node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NumericValue || node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.HexColorValue) {
            entries.add(node.getText());
        }
        return true;
    }
    function matchesProperty(decl) {
        const propertyName = decl.getFullPropertyName();
        return fullPropertyName === propertyName;
    }
    function vistNode(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration && node !== declaration) {
            if (matchesProperty(node)) {
                const value = node.getValue();
                if (value) {
                    value.accept(visitValue);
                }
            }
        }
        return true;
    }
    styleSheet.accept(vistNode);
    return entries;
}
class ColorValueCollector {
    constructor(entries, currentOffset) {
        this.entries = entries;
        this.currentOffset = currentOffset;
        // nothing to do
    }
    visitNode(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.HexColorValue ||
            (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Function && _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.isColorConstructor(node))) {
            if (this.currentOffset < node.offset || node.end < this.currentOffset) {
                this.entries.add(node.getText());
            }
        }
        return true;
    }
}
class VariableCollector {
    constructor(entries, currentOffset) {
        this.entries = entries;
        this.currentOffset = currentOffset;
        // nothing to do
    }
    visitNode(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier && node.isCustomProperty) {
            if (this.currentOffset < node.offset || node.end < this.currentOffset) {
                this.entries.add(node.getText());
            }
        }
        return true;
    }
}
function getCurrentWord(document, offset) {
    let i = offset - 1;
    const text = document.getText();
    while (i >= 0 && ' \t\n\r":{[()]},*>+'.indexOf(text.charAt(i)) === -1) {
        i--;
    }
    return text.substring(i + 1, offset);
}
//# sourceMappingURL=cssCompletion.js.map

}),
"../vscode-css-languageservice/lib/esm/services/cssFolding.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getFoldingRanges: function() { return getFoldingRanges; }
});
/* ESM import */var _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssScanner */ "../vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* ESM import */var _parser_sassScanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/sassScanner */ "../vscode-css-languageservice/lib/esm/parser/sassScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function getFoldingRanges(document, context) {
    const ranges = computeFoldingRanges(document);
    return limitFoldingRanges(ranges, context);
}
function computeFoldingRanges(document) {
    function getStartLine(t) {
        return document.positionAt(t.offset).line;
    }
    function getEndLine(t) {
        return document.positionAt(t.offset + t.len).line;
    }
    function getScanner() {
        switch (document.languageId) {
            case "scss":
                return new _parser_sassScanner__WEBPACK_IMPORTED_MODULE_1__.SassScanner();
            case "sass":
                return new _parser_sassScanner__WEBPACK_IMPORTED_MODULE_1__.SassScanner({ syntax: "indented" });
            default:
                return new _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.Scanner();
        }
    }
    function tokenToRange(t, kind) {
        const startLine = getStartLine(t);
        const endLine = getEndLine(t);
        if (startLine !== endLine) {
            return {
                startLine,
                endLine,
                kind,
            };
        }
        else {
            return null;
        }
    }
    const ranges = [];
    const delimiterStack = [];
    const scanner = getScanner();
    scanner.ignoreComment = false;
    scanner.setSource(document.getText());
    let token = scanner.scan();
    let prevToken = null;
    done: while (true) {
        switch (token.type) {
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Indent:
            case _parser_sassScanner__WEBPACK_IMPORTED_MODULE_1__.InterpolationFunction: {
                delimiterStack.push({ line: getStartLine(token), type: "brace", isStart: true });
                break;
            }
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF:
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dedent:
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR: {
                // for indented EOF can fill the same role as CurlyR, but we don't want that to be the case for (S)CSS
                if (token.type === _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF && scanner.syntax !== "indented") {
                    break done;
                }
                if (delimiterStack.length !== 0) {
                    const prevDelimiter = popPrevStartDelimiterOfType(delimiterStack, "brace");
                    if (!prevDelimiter) {
                        if (token.type === _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) {
                            break done;
                        }
                        break;
                    }
                    let endLine = getEndLine(token);
                    if (prevDelimiter.type === "brace") {
                        /**
                         * Other than the case when curly brace is not on a new line by itself, for example
                         * .foo {
                         *   color: red; }
                         * Use endLine minus one to show ending curly brace
                         */
                        if (prevToken && getEndLine(prevToken) !== endLine) {
                            endLine--;
                        }
                        if (prevDelimiter.line !== endLine) {
                            ranges.push({
                                startLine: prevDelimiter.line,
                                endLine,
                                kind: undefined,
                            });
                        }
                    }
                }
                else {
                    // There might be several Indents we should create ranges from,
                    // so only break out here if the stack is empty.
                    if (token.type === _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) {
                        break done;
                    }
                }
                break;
            }
            /**
             * In CSS, there is no single line comment prefixed with //
             * All comments are marked as `Comment`
             */
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comment: {
                const commentRegionMarkerToDelimiter = (marker) => {
                    if (marker === "#region") {
                        return { line: getStartLine(token), type: "comment", isStart: true };
                    }
                    else {
                        return { line: getEndLine(token), type: "comment", isStart: false };
                    }
                };
                const getCurrDelimiter = (token) => {
                    const matches = token.text.match(/^\s*\/\*\s*(#region|#endregion)\b\s*(.*?)\s*\*\//);
                    if (matches) {
                        return commentRegionMarkerToDelimiter(matches[1]);
                    }
                    else if (document.languageId === "scss" || document.languageId === "sass") {
                        const matches = token.text.match(/^\s*\/\/\s*(#region|#endregion)\b\s*(.*?)\s*/);
                        if (matches) {
                            return commentRegionMarkerToDelimiter(matches[1]);
                        }
                    }
                    return null;
                };
                const currDelimiter = getCurrDelimiter(token);
                // /* */ comment region folding
                // All #region and #endregion cases
                if (currDelimiter) {
                    if (currDelimiter.isStart) {
                        delimiterStack.push(currDelimiter);
                    }
                    else {
                        const prevDelimiter = popPrevStartDelimiterOfType(delimiterStack, "comment");
                        if (!prevDelimiter) {
                            break;
                        }
                        if (prevDelimiter.type === "comment") {
                            if (prevDelimiter.line !== currDelimiter.line) {
                                ranges.push({
                                    startLine: prevDelimiter.line,
                                    endLine: currDelimiter.line,
                                    kind: "region",
                                });
                            }
                        }
                    }
                }
                // Multiline comment case
                else {
                    const range = tokenToRange(token, "comment");
                    if (range) {
                        ranges.push(range);
                    }
                }
                break;
            }
        }
        prevToken = token;
        token = scanner.scan();
    }
    return ranges;
}
function popPrevStartDelimiterOfType(stack, type) {
    if (stack.length === 0) {
        return null;
    }
    for (let i = stack.length - 1; i >= 0; i--) {
        if (stack[i].type === type && stack[i].isStart) {
            return stack.splice(i, 1)[0];
        }
    }
    return null;
}
/**
 * - Sort regions
 * - Remove invalid regions (intersections)
 * - If limit exceeds, only return `rangeLimit` amount of ranges
 */
function limitFoldingRanges(ranges, context) {
    const maxRanges = (context && context.rangeLimit) || Number.MAX_VALUE;
    const sortedRanges = ranges.sort((r1, r2) => {
        let diff = r1.startLine - r2.startLine;
        if (diff === 0) {
            diff = r1.endLine - r2.endLine;
        }
        return diff;
    });
    const validRanges = [];
    let prevEndLine = -1;
    sortedRanges.forEach((r) => {
        if (!(r.startLine < prevEndLine && prevEndLine < r.endLine)) {
            validRanges.push(r);
            prevEndLine = r.endLine;
        }
    });
    if (validRanges.length < maxRanges) {
        return validRanges;
    }
    else {
        return validRanges.slice(0, maxRanges);
    }
}
//# sourceMappingURL=cssFolding.js.map

}),
"../vscode-css-languageservice/lib/esm/services/cssHover.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSHover: function() { return CSSHover; }
});
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../languageFacts/facts */ "../vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* ESM import */var _selectorPrinting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectorPrinting */ "../vscode-css-languageservice/lib/esm/services/selectorPrinting.js");
/* ESM import */var _utils_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/strings */ "../vscode-css-languageservice/lib/esm/utils/strings.js");
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* ESM import */var _utils_objects__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/objects */ "../vscode-css-languageservice/lib/esm/utils/objects.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







class CSSHover {
    constructor(clientCapabilities, cssDataManager) {
        this.clientCapabilities = clientCapabilities;
        this.cssDataManager = cssDataManager;
        this.selectorPrinting = new _selectorPrinting__WEBPACK_IMPORTED_MODULE_2__.SelectorPrinting(cssDataManager);
    }
    configure(settings) {
        this.defaultSettings = settings;
    }
    doHover(document, position, stylesheet, settings = this.defaultSettings) {
        function getRange(node) {
            return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
        }
        const offset = document.offsetAt(position);
        const nodepath = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.getNodePath(stylesheet, offset);
        /**
         * nodepath is top-down
         * Build up the hover by appending inner node's information
         */
        let hover = null;
        let flagOpts;
        for (let i = 0; i < nodepath.length; i++) {
            const node = nodepath[i];
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Media) {
                const regex = document.languageId === "sass" ? /@media.+/ : /@media[^\{]+/g;
                const matches = node.getText().match(regex);
                flagOpts = {
                    isMedia: true,
                    // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
                    text: matches?.[0],
                };
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Selector) {
                hover = {
                    contents: this.selectorPrinting.selectorToMarkedString(node, flagOpts),
                    range: getRange(node),
                };
                break;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                /**
                 * Some sass specific at rules such as `@at-root` are parsed as `SimpleSelector`
                 */
                if (!(0,_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith)(node.getText(), "@")) {
                    hover = {
                        contents: this.selectorPrinting.simpleSelectorToMarkedString(node),
                        range: getRange(node),
                    };
                }
                break;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                const propertyName = node.getFullPropertyName();
                const entry = this.cssDataManager.getProperty(propertyName);
                if (entry) {
                    const contents = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown(), settings);
                    if (contents) {
                        hover = {
                            contents,
                            range: getRange(node),
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.UnknownAtRule) {
                const atRuleName = node.getText();
                const entry = this.cssDataManager.getAtDirective(atRuleName);
                if (entry) {
                    const contents = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown(), settings);
                    if (contents) {
                        hover = {
                            contents,
                            range: getRange(node),
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Node && node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector) {
                const selectorName = node.getText();
                const entry = selectorName.slice(0, 2) === "::"
                    ? this.cssDataManager.getPseudoElement(selectorName)
                    : this.cssDataManager.getPseudoClass(selectorName);
                if (entry) {
                    const contents = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown(), settings);
                    if (contents) {
                        hover = {
                            contents,
                            range: getRange(node),
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
        }
        if (hover) {
            hover.contents = this.convertContents(hover.contents);
        }
        return hover;
    }
    convertContents(contents) {
        if (!this.doesSupportMarkdown()) {
            if (typeof contents === "string") {
                return contents;
            }
            // MarkupContent
            else if ("kind" in contents) {
                return {
                    kind: "plaintext",
                    value: contents.value,
                };
            }
            // MarkedString[]
            else if (Array.isArray(contents)) {
                return contents.map((c) => {
                    return typeof c === "string" ? c : c.value;
                });
            }
            // MarkedString
            else {
                return contents.value;
            }
        }
        return contents;
    }
    doesSupportMarkdown() {
        if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.supportsMarkdown)) {
            if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.clientCapabilities)) {
                this.supportsMarkdown = true;
                return this.supportsMarkdown;
            }
            const hover = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.hover;
            this.supportsMarkdown =
                hover &&
                    hover.contentFormat &&
                    Array.isArray(hover.contentFormat) &&
                    hover.contentFormat.indexOf(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
}
//# sourceMappingURL=cssHover.js.map

}),
"../vscode-css-languageservice/lib/esm/services/cssNavigation.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSNavigation: function() { return CSSNavigation; },
  getModuleNameFromPath: function() { return getModuleNameFromPath; }
});
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_6__);
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/cssSymbolScope */ "../vscode-css-languageservice/lib/esm/parser/cssSymbolScope.js");
/* ESM import */var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languageFacts/facts */ "../vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* ESM import */var _utils_strings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/strings */ "../vscode-css-languageservice/lib/esm/utils/strings.js");
/* ESM import */var _utils_resources__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/resources */ "../vscode-css-languageservice/lib/esm/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/








const startsWithSchemeRegex = /^\w+:\/\//;
const startsWithData = /^data:/;
const startsWithSass = /^sass:/;
class CSSNavigation {
    constructor(fileSystemProvider, resolveModuleReferences) {
        this.fileSystemProvider = fileSystemProvider;
        this.resolveModuleReferences = resolveModuleReferences;
    }
    configure(settings, loadPaths) {
        this.defaultSettings = settings;
        this.loadPaths = loadPaths;
    }
    findDefinition(document, position, stylesheet) {
        const symbols = new _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_2__.Symbols(stylesheet);
        const offset = document.offsetAt(position);
        const node = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.getNodeAtOffset(stylesheet, offset);
        if (!node) {
            return null;
        }
        const symbol = symbols.findSymbolFromNode(node);
        if (!symbol) {
            return null;
        }
        return {
            uri: document.uri,
            range: getRange(symbol.node, document),
        };
    }
    findReferences(document, position, stylesheet) {
        const highlights = this.findDocumentHighlights(document, position, stylesheet);
        return highlights.map((h) => {
            return {
                uri: document.uri,
                range: h.range,
            };
        });
    }
    getHighlightNode(document, position, stylesheet) {
        const offset = document.offsetAt(position);
        let node = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.getNodeAtOffset(stylesheet, offset);
        if (!node ||
            node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Stylesheet ||
            node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declarations ||
            node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ModuleConfig) {
            return;
        }
        if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier && node.parent && node.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ClassSelector) {
            node = node.parent;
        }
        return node;
    }
    findDocumentHighlights(document, position, stylesheet) {
        const result = [];
        const node = this.getHighlightNode(document, position, stylesheet);
        if (!node) {
            return result;
        }
        const symbols = new _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_2__.Symbols(stylesheet);
        const symbol = symbols.findSymbolFromNode(node);
        const name = node.getText();
        stylesheet.accept((candidate) => {
            if (symbol) {
                if (symbols.matchesSymbol(candidate, symbol)) {
                    result.push({
                        kind: getHighlightKind(candidate),
                        range: getRange(candidate, document),
                    });
                    return false;
                }
            }
            else if (node && node.type === candidate.type && candidate.matches(name)) {
                // Same node type and data
                result.push({
                    kind: getHighlightKind(candidate),
                    range: getRange(candidate, document),
                });
            }
            return true;
        });
        return result;
    }
    isRawStringDocumentLinkNode(node) {
        return node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Import;
    }
    findDocumentLinks(document, stylesheet, documentContext) {
        const linkData = this.findUnresolvedLinks(document, stylesheet);
        const resolvedLinks = [];
        for (let data of linkData) {
            const link = data.link;
            const target = link.target;
            if (!target || startsWithData.test(target)) {
                // no links for data:
            }
            else if (startsWithSchemeRegex.test(target)) {
                resolvedLinks.push(link);
            }
            else if (startsWithSass.test(target)) {
                resolvedLinks.push(link);
            }
            else {
                const resolved = documentContext.resolveReference(target, document.uri);
                if (resolved) {
                    link.target = resolved;
                }
                resolvedLinks.push(link);
            }
        }
        return resolvedLinks;
    }
    async findDocumentLinks2(document, stylesheet, documentContext) {
        const linkData = this.findUnresolvedLinks(document, stylesheet);
        const resolvedLinks = [];
        for (let data of linkData) {
            const link = data.link;
            const target = link.target;
            if (!target || startsWithData.test(target)) {
                // no links for data:
            }
            else if (startsWithSchemeRegex.test(target)) {
                resolvedLinks.push(link);
            }
            else if (startsWithSass.test(target)) {
                const targetless = link;
                resolvedLinks.push(targetless);
            }
            else {
                const resolvedTarget = await this.resolveReference(target, document.uri, documentContext, data.isRawLink);
                if (resolvedTarget !== undefined) {
                    link.target = resolvedTarget;
                    resolvedLinks.push(link);
                }
            }
        }
        return resolvedLinks;
    }
    findUnresolvedLinks(document, stylesheet) {
        const result = [];
        const collect = (uriStringNode) => {
            const linkStatement = uriStringNode.parent;
            // There should always be a parent link statement
            if (!linkStatement) {
                return;
            }
            let rawUri = uriStringNode.getText();
            const range = getRange(uriStringNode, document);
            // Make sure the range is not empty
            if (range.start.line === range.end.line && range.start.character === range.end.character) {
                return;
            }
            if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawUri, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawUri, `"`)) {
                rawUri = rawUri.slice(1, -1);
            }
            const isRawLink = this.isRawStringDocumentLinkNode(linkStatement);
            const unresolved = { link: { target: rawUri, range }, isRawLink };
            if (isRawLink) {
                unresolved.link.type = linkStatement.type;
                if (linkStatement.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use) {
                    const alias = linkStatement
                        .getChildren()
                        .find((c) => c.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier || c.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Value);
                    const as = alias ? alias.getText() : undefined;
                    if (as) {
                        unresolved.link.as = as;
                    }
                    // Wildcard imports make symbols available in the document without a namespace,
                    // so mirror that by not having a namespace for the link.
                    if (as !== "*") {
                        const namespace = as || getNamespaceFromLink(rawUri);
                        unresolved.link.namespace = namespace;
                    }
                }
                else if (linkStatement.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward) {
                    const alias = linkStatement
                        .getChildren()
                        .find((c) => c.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier);
                    const as = alias ? alias.getText() : undefined;
                    if (as) {
                        unresolved.link.as = as;
                    }
                    const visibility = linkStatement
                        .getChildren()
                        .find((c) => c.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ForwardVisibility)
                        ?.getChildren();
                    if (visibility) {
                        const [showOrHide, ...toShowOrHide] = visibility;
                        const keyword = showOrHide.getText();
                        const values = toShowOrHide.map((n) => n.getText());
                        if (keyword === "show") {
                            unresolved.link.show = values;
                        }
                        else if (keyword === "hide") {
                            unresolved.link.hide = values;
                        }
                    }
                }
            }
            result.push(unresolved);
        };
        stylesheet.accept((candidate) => {
            if (candidate.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.URILiteral) {
                const first = candidate.getChild(0);
                if (first) {
                    collect(first);
                }
                return false;
            }
            /**
             * In @import, it is possible to include links that do not use `url()`
             * For example, `@import 'foo.css';`
             */
            if (candidate.parent && this.isRawStringDocumentLinkNode(candidate.parent)) {
                const rawText = candidate.getText();
                if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawText, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawText, `"`)) {
                    collect(candidate);
                }
                else if (document.languageId === "sass" && candidate.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.StringLiteral) {
                    // In the Sass indented syntax the string quotes are optional for @import
                    collect(candidate);
                }
                return false;
            }
            return true;
        });
        return result;
    }
    findSymbolInformations(document, stylesheet) {
        const result = [];
        const addSymbolInformation = (name, kind, symbolNodeOrRange) => {
            const range = symbolNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node ? getRange(symbolNodeOrRange, document) : symbolNodeOrRange;
            const entry = {
                name: name || _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t("<undefined>"),
                kind,
                location: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Location.create(document.uri, range),
            };
            result.push(entry);
        };
        this.collectDocumentSymbols(document, stylesheet, addSymbolInformation);
        return result;
    }
    findDocumentSymbols(document, stylesheet) {
        const result = [];
        const parents = [];
        const addDocumentSymbol = (name, kind, symbolNodeOrRange, nameNodeOrRange, bodyNode) => {
            const range = symbolNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node ? getRange(symbolNodeOrRange, document) : symbolNodeOrRange;
            let selectionRange = nameNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node ? getRange(nameNodeOrRange, document) : nameNodeOrRange;
            if (!selectionRange || !containsRange(range, selectionRange)) {
                selectionRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(range.start, range.start);
            }
            const entry = {
                name: name || _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t("<undefined>"),
                kind,
                range,
                selectionRange,
            };
            if (symbolNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MixinDeclaration ||
                symbolNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FunctionDeclaration) {
                const parameters = symbolNodeOrRange.getParameters().getChildren();
                if (parameters.length > 0) {
                    const signatureParts = [];
                    for (const parameter of parameters) {
                        if (parameter instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FunctionParameter) {
                            const name = parameter.getName();
                            const defaultValue = parameter.getDefaultValue();
                            if (defaultValue) {
                                signatureParts.push(`${name}: ${defaultValue.getText()}`);
                            }
                            else {
                                signatureParts.push(name);
                            }
                        }
                    }
                    entry.detail = `(${signatureParts.join(", ")})`;
                }
            }
            let top = parents.pop();
            while (top && !containsRange(top[1], range)) {
                top = parents.pop();
            }
            if (top) {
                const topSymbol = top[0];
                if (!topSymbol.children) {
                    topSymbol.children = [];
                }
                topSymbol.children.push(entry);
                parents.push(top); // put back top
            }
            else {
                result.push(entry);
            }
            if (bodyNode) {
                parents.push([entry, getRange(bodyNode, document)]);
            }
        };
        this.collectDocumentSymbols(document, stylesheet, addDocumentSymbol);
        return result;
    }
    collectDocumentSymbols(document, stylesheet, collect) {
        stylesheet.accept((node) => {
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.RuleSet) {
                for (const selector of node.getSelectors().getChildren()) {
                    if (selector instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Selector) {
                        const range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(selector.offset), document.positionAt(node.end));
                        collect(selector.getText(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class, range, selector, node.getDeclarations());
                    }
                }
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.VariableDeclaration) {
                collect(node.getName(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable, node, node.getVariable(), undefined);
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MixinDeclaration) {
                collect(node.getName(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method, node, node.getIdentifier(), node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FunctionDeclaration) {
                collect(node.getName(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function, node, node.getIdentifier(), node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Keyframe) {
                const name = _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t("@keyframes {0}", node.getName());
                collect(name, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class, node, node.getIdentifier(), node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FontFace) {
                const name = _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t("@font-face");
                collect(name, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class, node, undefined, node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Media) {
                const mediaList = node.getChild(0);
                if (mediaList instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Medialist) {
                    const name = "@media " + mediaList.getText();
                    collect(name, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Module, node, mediaList, node.getDeclarations());
                }
            }
            else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorPlaceholder) {
                const parent = node.getParent();
                // avoid duplicating when used as a selector
                if (parent && parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ExtendsReference) {
                    const range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
                    collect(node.getText(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class, range, node, undefined);
                }
            }
            return true;
        });
    }
    findDocumentColors(document, stylesheet) {
        const result = [];
        stylesheet.accept((node) => {
            const colorInfo = getColorInformation(node, document);
            if (colorInfo) {
                result.push(colorInfo);
            }
            return true;
        });
        return result;
    }
    getColorPresentations(document, stylesheet, color, range) {
        const result = [];
        const red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
        let label;
        if (color.alpha === 1) {
            label = `rgb(${red256}, ${green256}, ${blue256})`;
        }
        else {
            label = `rgba(${red256}, ${green256}, ${blue256}, ${color.alpha})`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        if (color.alpha === 1) {
            label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}`;
        }
        else {
            label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}${toTwoDigitHex(Math.round(color.alpha * 255))}`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        const hsl = (0,_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.hslFromColor)(color);
        if (hsl.a === 1) {
            label = `hsl(${hsl.h}, ${Math.round(hsl.s * 100)}%, ${Math.round(hsl.l * 100)}%)`;
        }
        else {
            label = `hsla(${hsl.h}, ${Math.round(hsl.s * 100)}%, ${Math.round(hsl.l * 100)}%, ${hsl.a})`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        const hwb = (0,_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.hwbFromColor)(color);
        if (hwb.a === 1) {
            label = `hwb(${hwb.h} ${Math.round(hwb.w * 100)}% ${Math.round(hwb.b * 100)}%)`;
        }
        else {
            label = `hwb(${hwb.h} ${Math.round(hwb.w * 100)}% ${Math.round(hwb.b * 100)}% / ${hwb.a})`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        return result;
    }
    prepareRename(document, position, stylesheet) {
        const node = this.getHighlightNode(document, position, stylesheet);
        if (node) {
            return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
        }
    }
    doRename(document, position, newName, stylesheet) {
        const highlights = this.findDocumentHighlights(document, position, stylesheet);
        const edits = highlights.map((h) => _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(h.range, newName));
        return {
            changes: { [document.uri]: edits },
        };
    }
    async resolveModuleReference(ref, documentUri, documentContext) {
        if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(documentUri, "file://")) {
            const moduleName = getModuleNameFromPath(ref);
            if (moduleName && moduleName !== "." && moduleName !== "..") {
                const rootFolderUri = documentContext.resolveReference("/", documentUri);
                const documentFolderUri = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.dirname)(documentUri);
                const modulePath = await this.resolvePathToModule(moduleName, documentFolderUri, rootFolderUri);
                if (modulePath) {
                    const pathWithinModule = ref.substring(moduleName.length + 1);
                    return (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(modulePath, pathWithinModule);
                }
            }
        }
        return undefined;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async mapReference(target, isRawLink) {
        return target;
    }
    async resolveReference(target, documentUri, documentContext, isRawLink = false, settings = this.defaultSettings) {
        // Following [css-loader](https://github.com/webpack-contrib/css-loader#url)
        // and [sass-loader's](https://github.com/webpack-contrib/sass-loader#imports)
        // convention, if an import path starts with ~ then use node module resolution
        // *unless* it starts with "~/" as this refers to the user's home directory.
        if (target[0] === "~" && target[1] !== "/" && this.fileSystemProvider) {
            target = target.substring(1);
            return this.mapReference(await this.resolveModuleReference(target, documentUri, documentContext), isRawLink);
        }
        const ref = await this.mapReference(documentContext.resolveReference(target, documentUri), isRawLink);
        // Following [less-loader](https://github.com/webpack-contrib/less-loader#imports)
        // and [sass-loader's](https://github.com/webpack-contrib/sass-loader#resolving-import-at-rules)
        // new resolving import at-rules (~ is deprecated). The loader will first try to resolve @import as a relative path. If it cannot be resolved,
        // then the loader will try to resolve @import inside node_modules.
        if (this.resolveModuleReferences) {
            if (ref && (await this.fileExists(ref))) {
                return ref;
            }
            const moduleReference = await this.mapReference(await this.resolveModuleReference(target, documentUri, documentContext), isRawLink);
            if (moduleReference) {
                return moduleReference;
            }
        }
        // Try resolving the reference from the language configuration alias settings or loadPaths
        if (ref && !(await this.fileExists(ref))) {
            const rootFolderUri = documentContext.resolveReference("/", documentUri);
            if (settings && rootFolderUri) {
                // Specific file reference
                if (target in settings) {
                    return this.mapReference((0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(rootFolderUri, settings[target]), isRawLink);
                }
                // Reference folder
                const firstSlash = target.indexOf("/");
                const prefix = `${target.substring(0, firstSlash)}/`;
                if (prefix in settings) {
                    const aliasPath = settings[prefix].slice(0, -1);
                    let newPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(rootFolderUri, aliasPath);
                    return this.mapReference((newPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(newPath, target.substring(prefix.length - 1))), isRawLink);
                }
            }
            if (this.loadPaths && rootFolderUri) {
                for (let loadPath of this.loadPaths) {
                    let newPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(rootFolderUri, loadPath, target);
                    let ref = await this.mapReference(newPath, isRawLink);
                    if (ref) {
                        let exists = await this.fileExists(ref);
                        if (exists) {
                            return ref;
                        }
                    }
                }
            }
        }
        // fall back. it might not exists
        return ref;
    }
    async resolvePathToModule(_moduleName, documentFolderUri, rootFolderUri) {
        // resolve the module relative to the document. We can't use `require` here as the code is webpacked.
        const packPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(documentFolderUri, "node_modules", _moduleName, "package.json");
        if (await this.fileExists(packPath)) {
            return (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.dirname)(packPath);
        }
        else if (rootFolderUri &&
            documentFolderUri.startsWith(rootFolderUri) &&
            documentFolderUri.length !== rootFolderUri.length) {
            return this.resolvePathToModule(_moduleName, (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.dirname)(documentFolderUri), rootFolderUri);
        }
        return undefined;
    }
    async fileExists(uri) {
        if (!this.fileSystemProvider) {
            return false;
        }
        try {
            const stat = await this.fileSystemProvider.stat(uri);
            if (stat.type === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown && stat.size === -1) {
                return false;
            }
            return true;
        }
        catch {
            return false;
        }
    }
    async getContent(uri) {
        if (!this.fileSystemProvider || !this.fileSystemProvider.getContent) {
            return null;
        }
        try {
            return await this.fileSystemProvider.getContent(uri);
        }
        catch {
            return null;
        }
    }
}
function getColorInformation(node, document) {
    const color = (0,_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.getColorValue)(node);
    if (color) {
        const range = getRange(node, document);
        return { color, range };
    }
    return null;
}
function getRange(node, document) {
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
}
/**
 * Test if `otherRange` is in `range`. If the ranges are equal, will return true.
 */
function containsRange(range, otherRange) {
    const otherStartLine = otherRange.start.line, otherEndLine = otherRange.end.line;
    const rangeStartLine = range.start.line, rangeEndLine = range.end.line;
    if (otherStartLine < rangeStartLine || otherEndLine < rangeStartLine) {
        return false;
    }
    if (otherStartLine > rangeEndLine || otherEndLine > rangeEndLine) {
        return false;
    }
    if (otherStartLine === rangeStartLine && otherRange.start.character < range.start.character) {
        return false;
    }
    if (otherEndLine === rangeEndLine && otherRange.end.character > range.end.character) {
        return false;
    }
    return true;
}
function getHighlightKind(node) {
    if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Selector) {
        return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
    }
    if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Identifier) {
        if (node.parent && node.parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Property) {
            if (node.isCustomProperty) {
                return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
            }
        }
    }
    if (node.parent) {
        switch (node.parent.type) {
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FunctionDeclaration:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinDeclaration:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Keyframe:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.VariableDeclaration:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FunctionParameter:
                return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
        }
    }
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Read;
}
function toTwoDigitHex(n) {
    const r = n.toString(16);
    return r.length !== 2 ? "0" + r : r;
}
function getModuleNameFromPath(path) {
    const firstSlash = path.indexOf("/");
    if (firstSlash === -1) {
        return "";
    }
    // If a scoped module (starts with @) then get up until second instance of '/', or to the end of the string for root-level imports.
    if (path[0] === "@") {
        const secondSlash = path.indexOf("/", firstSlash + 1);
        if (secondSlash === -1) {
            return path;
        }
        return path.substring(0, secondSlash);
    }
    // Otherwise get until first instance of '/'
    return path.substring(0, firstSlash);
}
function getNamespaceFromLink(target) {
    if (target.startsWith("sass")) {
        return target.split(":")[1];
    }
    const bareTarget = target.replace("pkg:", "").replace("./", "");
    let from = 0;
    let to = bareTarget.length;
    if (bareTarget.includes("/")) {
        from = bareTarget.lastIndexOf("/") + 1;
    }
    if (bareTarget.includes(".")) {
        to = bareTarget.lastIndexOf(".");
    }
    let namespace = bareTarget.substring(from, to);
    namespace = namespace.startsWith("_") ? namespace.slice(1) : namespace;
    if (namespace === "index") {
        // The link points to an index file. Use the folder name above as a namespace.
        const linkOmitIndex = bareTarget.slice(0, Math.max(0, bareTarget.lastIndexOf("/")));
        const newLastSlash = linkOmitIndex.lastIndexOf("/");
        namespace = linkOmitIndex.slice(Math.max(0, newLastSlash + 1));
    }
    return namespace;
}
//# sourceMappingURL=cssNavigation.js.map

}),
"../vscode-css-languageservice/lib/esm/services/cssSelectionRange.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getSelectionRanges: function() { return getSelectionRanges; }
});
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function getSelectionRanges(document, positions, stylesheet) {
    function getSelectionRange(position) {
        const applicableRanges = getApplicableRanges(position);
        let current = undefined;
        for (let index = applicableRanges.length - 1; index >= 0; index--) {
            current = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SelectionRange.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(applicableRanges[index][0]), document.positionAt(applicableRanges[index][1])), current);
        }
        if (!current) {
            current = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SelectionRange.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(position, position));
        }
        return current;
    }
    return positions.map(getSelectionRange);
    function getApplicableRanges(position) {
        const offset = document.offsetAt(position);
        let currNode = stylesheet.findChildAtOffset(offset, true);
        if (!currNode) {
            return [];
        }
        const result = [];
        while (currNode) {
            if (currNode.parent && currNode.offset === currNode.parent.offset && currNode.end === currNode.parent.end) {
                currNode = currNode.parent;
                continue;
            }
            // The `{ }` part of `.a { }`
            if (currNode.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declarations) {
                if (offset > currNode.offset && offset < currNode.end) {
                    // not sure there's a useful equivalent for indented that we can provide consistently (offset + depth could work, but Node doesn't have its depth)
                    if (document.languageId !== "sass") {
                        // Return `{ }` and the range inside `{` and `}`
                        result.push([currNode.offset + 1, currNode.end - 1]);
                    }
                }
            }
            result.push([currNode.offset, currNode.end]);
            currNode = currNode.parent;
        }
        return result;
    }
}
//# sourceMappingURL=cssSelectionRange.js.map

}),
"../vscode-css-languageservice/lib/esm/services/cssValidation.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSValidation: function() { return CSSValidation; }
});
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _lintRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lintRules */ "../vscode-css-languageservice/lib/esm/services/lintRules.js");
/* ESM import */var _lint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lint */ "../vscode-css-languageservice/lib/esm/services/lint.js");
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class CSSValidation {
    constructor(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    configure(settings) {
        this.settings = settings;
    }
    doValidation(document, stylesheet, settings = this.settings) {
        if (settings && settings.validate === false) {
            return [];
        }
        const entries = [];
        entries.push.apply(entries, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ParseErrorCollector.entries(stylesheet));
        if (settings && settings.lint !== false) {
            entries.push.apply(entries, _lint__WEBPACK_IMPORTED_MODULE_2__.LintVisitor.entries(stylesheet, document, new _lintRules__WEBPACK_IMPORTED_MODULE_1__.LintConfigurationSettings(settings.lint), this.cssDataManager));
        }
        const ruleIds = [];
        for (const r in _lintRules__WEBPACK_IMPORTED_MODULE_1__.Rules) {
            ruleIds.push(_lintRules__WEBPACK_IMPORTED_MODULE_1__.Rules[r].id);
        }
        function toDiagnostic(marker) {
            const range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.Range.create(document.positionAt(marker.getOffset()), document.positionAt(marker.getOffset() + marker.getLength()));
            const source = document.languageId;
            return {
                code: marker.getRule().id,
                source: source,
                message: marker.getMessage(),
                severity: marker.getLevel() === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Warning ? _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.DiagnosticSeverity.Warning : _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.DiagnosticSeverity.Error,
                range: range,
            };
        }
        return entries.filter((entry) => entry.getLevel() !== _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore).map(toDiagnostic);
    }
}
//# sourceMappingURL=cssValidation.js.map

}),
"../vscode-css-languageservice/lib/esm/services/lint.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  LintVisitor: function() { return LintVisitor; }
});
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_5__);
/* ESM import */var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languageFacts/facts */ "../vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _utils_arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arrays */ "../vscode-css-languageservice/lib/esm/utils/arrays.js");
/* ESM import */var _lintRules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lintRules */ "../vscode-css-languageservice/lib/esm/services/lintRules.js");
/* ESM import */var _lintUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lintUtil */ "../vscode-css-languageservice/lib/esm/services/lintUtil.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







class NodesByRootMap {
    constructor() {
        this.data = {};
    }
    add(root, name, node) {
        let entry = this.data[root];
        if (!entry) {
            entry = { nodes: [], names: [] };
            this.data[root] = entry;
        }
        entry.names.push(name);
        if (node) {
            entry.nodes.push(node);
        }
    }
}
class LintVisitor {
    static entries(node, document, settings, cssDataManager, entryFilter) {
        const visitor = new LintVisitor(document, settings, cssDataManager);
        node.acceptVisitor(visitor);
        visitor.completeValidations();
        return visitor.getEntries(entryFilter);
    }
    constructor(document, settings, cssDataManager) {
        this.cssDataManager = cssDataManager;
        this.warnings = [];
        this.settings = settings;
        this.documentText = document.getText();
        this.keyframes = new NodesByRootMap();
        this.validProperties = {};
        const properties = settings.getSetting(_lintRules__WEBPACK_IMPORTED_MODULE_3__.Settings.ValidProperties);
        if (Array.isArray(properties)) {
            properties.forEach((p) => {
                if (typeof p === "string") {
                    const name = p.trim().toLowerCase();
                    if (name.length) {
                        this.validProperties[name] = true;
                    }
                }
            });
        }
    }
    isValidPropertyDeclaration(element) {
        const propertyName = element.fullPropertyName;
        return this.validProperties[propertyName];
    }
    fetch(input, s) {
        const elements = [];
        for (const curr of input) {
            if (curr.fullPropertyName === s) {
                elements.push(curr);
            }
        }
        return elements;
    }
    fetchWithValue(input, s, v) {
        const elements = [];
        for (const inputElement of input) {
            if (inputElement.fullPropertyName === s) {
                const expression = inputElement.node.getValue();
                if (expression && this.findValueInExpression(expression, v)) {
                    elements.push(inputElement);
                }
            }
        }
        return elements;
    }
    findValueInExpression(expression, v) {
        let found = false;
        expression.accept((node) => {
            if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier && node.matches(v)) {
                found = true;
            }
            return !found;
        });
        return found;
    }
    getEntries(filter = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Level.Warning | _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Level.Error) {
        return this.warnings.filter((entry) => {
            return (entry.getLevel() & filter) !== 0;
        });
    }
    addEntry(node, rule, details) {
        const entry = new _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Marker(node, rule, this.settings.getRule(rule), details);
        this.warnings.push(entry);
    }
    getMissingNames(expected, actual) {
        const expectedClone = expected.slice(0); // clone
        for (let i = 0; i < actual.length; i++) {
            const k = expectedClone.indexOf(actual[i]);
            if (k !== -1) {
                expectedClone[k] = null;
            }
        }
        let result = null;
        for (let i = 0; i < expectedClone.length; i++) {
            const curr = expectedClone[i];
            if (curr) {
                if (result === null) {
                    result = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("'{0}'", curr);
                }
                else {
                    result = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("{0}, '{1}'", result, curr);
                }
            }
        }
        return result;
    }
    visitNode(node) {
        switch (node.type) {
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.UnknownAtRule:
                return this.visitUnknownAtRule(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Keyframe:
                return this.visitKeyframe(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FontFace:
                return this.visitFontFace(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Ruleset:
                return this.visitRuleSet(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SimpleSelector:
                return this.visitSimpleSelector(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Function:
                return this.visitFunction(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.NumericValue:
                return this.visitNumericValue(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Import:
                return this.visitImport(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.HexColorValue:
                return this.visitHexColorValue(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Prio:
                return this.visitPrio(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.IdentifierSelector:
                return this.visitIdentifierSelector(node);
        }
        return true;
    }
    completeValidations() {
        this.validateKeyframes();
    }
    visitUnknownAtRule(node) {
        const atRuleName = node.getChild(0);
        if (!atRuleName) {
            return false;
        }
        const atDirective = this.cssDataManager.getAtDirective(atRuleName.getText());
        if (atDirective) {
            return false;
        }
        this.addEntry(atRuleName, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UnknownAtRules, `Unknown at rule ${atRuleName.getText()}`);
        return true;
    }
    visitKeyframe(node) {
        const keyword = node.getKeyword();
        if (!keyword) {
            return false;
        }
        const text = keyword.getText();
        this.keyframes.add(node.getName(), text, text !== "@keyframes" ? keyword : null);
        return true;
    }
    validateKeyframes() {
        // @keyframe and it's vendor specific alternatives
        // @keyframe should be included
        const expected = ["@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes"];
        for (const name in this.keyframes.data) {
            const actual = this.keyframes.data[name].names;
            const needsStandard = actual.indexOf("@keyframes") === -1;
            if (!needsStandard && actual.length === 1) {
                continue; // only the non-vendor specific keyword is used, that's fine, no warning
            }
            const missingVendorSpecific = this.getMissingNames(expected, actual);
            if (missingVendorSpecific || needsStandard) {
                for (const node of this.keyframes.data[name].nodes) {
                    if (needsStandard) {
                        const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Always define standard rule '@keyframes' when defining keyframes.");
                        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);
                    }
                    if (missingVendorSpecific) {
                        const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Always include all vendor specific rules: Missing: {0}", missingVendorSpecific);
                        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AllVendorPrefixes, message);
                    }
                }
            }
        }
        return true;
    }
    visitSimpleSelector(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - The universal selector (*) is known to be slow.
        /////////////////////////////////////////////////////////////
        const firstChar = this.documentText.charAt(node.offset);
        if (node.length === 1 && firstChar === "*") {
            this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UniversalSelector);
        }
        return true;
    }
    visitIdentifierSelector(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Avoid id selectors
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AvoidIdSelector);
        return true;
    }
    visitImport(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Import statements shouldn't be used, because they aren't offering parallel downloads.
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.ImportStatemement);
        return true;
    }
    visitRuleSet(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Don't use empty rulesets.
        /////////////////////////////////////////////////////////////
        const declarations = node.getDeclarations();
        if (!declarations) {
            // syntax error
            return false;
        }
        if (!declarations.hasChildren()) {
            this.addEntry(node.getSelectors(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.EmptyRuleSet);
        }
        const propertyTable = [];
        for (const element of declarations.getChildren()) {
            if (element instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declaration) {
                propertyTable.push(new _lintUtil__WEBPACK_IMPORTED_MODULE_4__.Element(element));
            }
        }
        /////////////////////////////////////////////////////////////
        // the rule warns when it finds:
        // width being used with border, border-left, border-right, padding, padding-left, or padding-right
        // height being used with border, border-top, border-bottom, padding, padding-top, or padding-bottom
        // No error when box-sizing property is specified, as it assumes the user knows what he's doing.
        // see https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size
        /////////////////////////////////////////////////////////////
        const boxModel = (0,_lintUtil__WEBPACK_IMPORTED_MODULE_4__["default"])(propertyTable);
        if (boxModel.width) {
            let properties = [];
            if (boxModel.right.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.right.properties);
            }
            if (boxModel.left.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.left.properties);
            }
            if (properties.length !== 0) {
                for (const item of properties) {
                    this.addEntry(item.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
                }
                this.addEntry(boxModel.width.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
            }
        }
        if (boxModel.height) {
            let properties = [];
            if (boxModel.top.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.top.properties);
            }
            if (boxModel.bottom.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.bottom.properties);
            }
            if (properties.length !== 0) {
                for (const item of properties) {
                    this.addEntry(item.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
                }
                this.addEntry(boxModel.height.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
            }
        }
        /////////////////////////////////////////////////////////////
        //	Properties ignored due to display
        /////////////////////////////////////////////////////////////
        // With 'display: inline-block', 'float' has no effect
        let displayElems = this.fetchWithValue(propertyTable, "display", "inline-block");
        if (displayElems.length > 0) {
            const elem = this.fetch(propertyTable, "float");
            for (let index = 0; index < elem.length; index++) {
                const node = elem[index].node;
                const value = node.getValue();
                if (value && !value.matches("none")) {
                    this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.PropertyIgnoredDueToDisplay, _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("inline-block is ignored due to the float. If 'float' has a value other than 'none', the box is floated and 'display' is treated as 'block'"));
                }
            }
        }
        // With 'display: block', 'vertical-align' has no effect
        displayElems = this.fetchWithValue(propertyTable, "display", "block");
        if (displayElems.length > 0) {
            const elem = this.fetch(propertyTable, "vertical-align");
            for (let index = 0; index < elem.length; index++) {
                this.addEntry(elem[index].node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.PropertyIgnoredDueToDisplay, _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Property is ignored due to the display. With 'display: block', vertical-align should not be used."));
            }
        }
        /////////////////////////////////////////////////////////////
        //	Avoid 'float'
        /////////////////////////////////////////////////////////////
        const elements = this.fetch(propertyTable, "float");
        for (let index = 0; index < elements.length; index++) {
            const element = elements[index];
            if (!this.isValidPropertyDeclaration(element)) {
                this.addEntry(element.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AvoidFloat);
            }
        }
        /////////////////////////////////////////////////////////////
        //	Don't use duplicate declarations.
        /////////////////////////////////////////////////////////////
        for (let i = 0; i < propertyTable.length; i++) {
            const element = propertyTable[i];
            if (element.fullPropertyName !== "background" && !this.validProperties[element.fullPropertyName]) {
                const value = element.node.getValue();
                if (value && this.documentText.charAt(value.offset) !== "-") {
                    const elements = this.fetch(propertyTable, element.fullPropertyName);
                    if (elements.length > 1) {
                        for (let k = 0; k < elements.length; k++) {
                            const value = elements[k].node.getValue();
                            if (value && this.documentText.charAt(value.offset) !== "-" && elements[k] !== element) {
                                this.addEntry(element.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.DuplicateDeclarations);
                            }
                        }
                    }
                }
            }
        }
        /////////////////////////////////////////////////////////////
        //	Unknown propery & When using a vendor-prefixed gradient, make sure to use them all.
        /////////////////////////////////////////////////////////////
        const isExportBlock = node.getSelectors().matches(":export");
        if (!isExportBlock) {
            const propertiesBySuffix = new NodesByRootMap();
            let containsUnknowns = false;
            for (const element of propertyTable) {
                const decl = element.node;
                if (this.isCSSDeclaration(decl)) {
                    let name = element.fullPropertyName;
                    const firstChar = name.charAt(0);
                    if (firstChar === "-") {
                        if (name.charAt(1) !== "-") {
                            // avoid css variables
                            if (!this.cssDataManager.isKnownProperty(name) && !this.validProperties[name]) {
                                this.addEntry(decl.getProperty(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UnknownVendorSpecificProperty);
                            }
                            const nonPrefixedName = decl.getNonPrefixedPropertyName();
                            propertiesBySuffix.add(nonPrefixedName, name, decl.getProperty());
                        }
                    }
                    else {
                        const fullName = name;
                        if (firstChar === "*" || firstChar === "_") {
                            this.addEntry(decl.getProperty(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.IEStarHack);
                            name = name.substr(1);
                        }
                        // _property and *property might be contributed via custom data
                        if (!this.cssDataManager.isKnownProperty(fullName) && !this.cssDataManager.isKnownProperty(name)) {
                            if (!this.validProperties[name]) {
                                this.addEntry(decl.getProperty(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UnknownProperty, _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Unknown property: '{0}'", decl.getFullPropertyName()));
                            }
                        }
                        propertiesBySuffix.add(name, name, null); // don't pass the node as we don't show errors on the standard
                    }
                }
                else {
                    containsUnknowns = true;
                }
            }
            if (!containsUnknowns) {
                // don't perform this test if there are
                for (const suffix in propertiesBySuffix.data) {
                    const entry = propertiesBySuffix.data[suffix];
                    const actual = entry.names;
                    const needsStandard = this.cssDataManager.isStandardProperty(suffix) && actual.indexOf(suffix) === -1;
                    if (!needsStandard && actual.length === 1) {
                        continue; // only the non-vendor specific rule is used, that's fine, no warning
                    }
                    /**
                     * We should ignore missing standard properties, if there's an explicit contextual reference to a
                     * vendor specific pseudo-element selector with the same vendor (prefix)
                     *
                     * (See https://github.com/microsoft/vscode/issues/164350)
                     */
                    const entriesThatNeedStandard = new Set(needsStandard ? entry.nodes : []);
                    if (needsStandard) {
                        const pseudoElements = this.getContextualVendorSpecificPseudoElements(node);
                        for (const node of entry.nodes) {
                            const propertyName = node.getName();
                            const prefix = propertyName.substring(0, propertyName.length - suffix.length);
                            if (pseudoElements.some((x) => x.startsWith(prefix))) {
                                entriesThatNeedStandard.delete(node);
                            }
                        }
                    }
                    const expected = [];
                    for (let i = 0, len = LintVisitor.prefixes.length; i < len; i++) {
                        const prefix = LintVisitor.prefixes[i];
                        if (this.cssDataManager.isStandardProperty(prefix + suffix)) {
                            expected.push(prefix + suffix);
                        }
                    }
                    const missingVendorSpecific = this.getMissingNames(expected, actual);
                    if (missingVendorSpecific || needsStandard) {
                        for (const node of entry.nodes) {
                            if (needsStandard && entriesThatNeedStandard.has(node)) {
                                const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Also define the standard property '{0}' for compatibility", suffix);
                                this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);
                            }
                            if (missingVendorSpecific) {
                                const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Always include all vendor specific properties: Missing: {0}", missingVendorSpecific);
                                this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AllVendorPrefixes, message);
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
    /**
     * Walks up the syntax tree (starting from given `node`) and captures vendor
     * specific pseudo-element selectors.
     * @returns An array of vendor specific pseudo-elements; or empty if none
     * was found.
     */
    getContextualVendorSpecificPseudoElements(node) {
        function walkDown(s, n) {
            for (const child of n.getChildren()) {
                if (child.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.PseudoSelector) {
                    const pseudoElement = child.getChildren()[0]?.getText();
                    if (pseudoElement) {
                        s.add(pseudoElement);
                    }
                }
                walkDown(s, child);
            }
        }
        function walkUp(s, n) {
            if (n.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Ruleset) {
                for (const selector of n.getSelectors().getChildren()) {
                    walkDown(s, selector);
                }
            }
            return n.parent ? walkUp(s, n.parent) : undefined;
        }
        const result = new Set();
        walkUp(result, node);
        return Array.from(result);
    }
    visitPrio(node) {
        /////////////////////////////////////////////////////////////
        //	Don't use !important
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AvoidImportant);
        return true;
    }
    visitNumericValue(node) {
        /////////////////////////////////////////////////////////////
        //	0 has no following unit
        /////////////////////////////////////////////////////////////
        const funcDecl = node.findParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Function);
        if (funcDecl && funcDecl.getName() === "calc") {
            return true;
        }
        const decl = node.findParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declaration);
        if (decl) {
            const declValue = decl.getValue();
            if (declValue) {
                const value = node.getValue();
                if (!value.unit || _languageFacts_facts__WEBPACK_IMPORTED_MODULE_0__.units.length.indexOf(value.unit.toLowerCase()) === -1) {
                    return true;
                }
                if (parseFloat(value.value) === 0.0 && !!value.unit && !this.validProperties[decl.getFullPropertyName()]) {
                    this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.ZeroWithUnit);
                }
            }
        }
        return true;
    }
    visitFontFace(node) {
        const declarations = node.getDeclarations();
        if (!declarations) {
            // syntax error
            return false;
        }
        let definesSrc = false, definesFontFamily = false;
        let containsUnknowns = false;
        for (const node of declarations.getChildren()) {
            if (this.isCSSDeclaration(node)) {
                const name = node.getProperty().getName().toLowerCase();
                if (name === "src") {
                    definesSrc = true;
                }
                if (name === "font-family") {
                    definesFontFamily = true;
                }
            }
            else {
                containsUnknowns = true;
            }
        }
        if (!containsUnknowns && (!definesSrc || !definesFontFamily)) {
            this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.RequiredPropertiesForFontFace);
        }
        return true;
    }
    isCSSDeclaration(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declaration) {
            if (!node.getValue()) {
                return false;
            }
            const property = node.getProperty();
            if (!property) {
                return false;
            }
            const identifier = property.getIdentifier();
            if (!identifier || identifier.containsInterpolation()) {
                return false;
            }
            return true;
        }
        return false;
    }
    visitHexColorValue(node) {
        // Rule: #eeff0011 or #eeff00 or #ef01 or #ef0
        const length = node.length;
        if (length !== 9 && length !== 7 && length !== 5 && length !== 4) {
            this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.HexColorLength);
        }
        return false;
    }
    visitFunction(node) {
        const fnName = node.getName().toLowerCase();
        let expectedAttrCount = -1;
        let actualAttrCount = 0;
        switch (fnName) {
            case "rgb(":
            case "hsl(":
                expectedAttrCount = 3;
                break;
            case "rgba(":
            case "hsla(":
                expectedAttrCount = 4;
                break;
        }
        if (expectedAttrCount !== -1) {
            node.getArguments().accept((n) => {
                if (n instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.BinaryExpression) {
                    actualAttrCount += 1;
                    return false;
                }
                return true;
            });
            if (actualAttrCount !== expectedAttrCount) {
                this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.ArgsInColorFunction);
            }
        }
        return true;
    }
}
LintVisitor.prefixes = [
    "-ms-",
    "-moz-",
    "-o-",
    "-webkit-", // Quite common
    //		'-xv-', '-atsc-', '-wap-', '-khtml-', 'mso-', 'prince-', '-ah-', '-hp-', '-ro-', '-rim-', '-tc-' // Quite un-common
];
//# sourceMappingURL=lint.js.map

}),
"../vscode-css-languageservice/lib/esm/services/lintRules.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  LintConfigurationSettings: function() { return LintConfigurationSettings; },
  Rule: function() { return Rule; },
  Rules: function() { return Rules; },
  Setting: function() { return Setting; },
  Settings: function() { return Settings; }
});
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_1__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



const Warning = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Warning;
const Error = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Error;
const Ignore = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore;
class Rule {
    constructor(id, message, defaultValue) {
        this.id = id;
        this.message = message;
        this.defaultValue = defaultValue;
        // nothing to do
    }
}
class Setting {
    constructor(id, message, defaultValue) {
        this.id = id;
        this.message = message;
        this.defaultValue = defaultValue;
        // nothing to do
    }
}
const Rules = {
    AllVendorPrefixes: new Rule("compatibleVendorPrefixes", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("When using a vendor-specific prefix make sure to also include all other vendor-specific properties"), Ignore),
    IncludeStandardPropertyWhenUsingVendorPrefix: new Rule("vendorPrefix", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("When using a vendor-specific prefix also include the standard property"), Warning),
    DuplicateDeclarations: new Rule("duplicateProperties", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Do not use duplicate style definitions"), Ignore),
    EmptyRuleSet: new Rule("emptyRules", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Do not use empty rulesets"), Warning),
    ImportStatemement: new Rule("importStatement", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Import statements can lead to sequential loading of CSS"), Ignore),
    BewareOfBoxModelSize: new Rule("boxModel", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Do not use width or height when using padding or border"), Ignore),
    UniversalSelector: new Rule("universalSelector", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("The universal selector (*) is known to be slow"), Ignore),
    ZeroWithUnit: new Rule("zeroUnits", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("No unit for zero needed"), Ignore),
    RequiredPropertiesForFontFace: new Rule("fontFaceProperties", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("@font-face rule must define 'src' and 'font-family' properties"), Warning),
    HexColorLength: new Rule("hexColorLength", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Hex colors must consist of three, four, six or eight hex numbers"), Error),
    ArgsInColorFunction: new Rule("argumentsInColorFunction", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Invalid number of parameters"), Error),
    UnknownProperty: new Rule("unknownProperties", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Unknown property."), Warning),
    UnknownAtRules: new Rule("unknownAtRules", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Unknown at-rule."), Warning),
    IEStarHack: new Rule("ieHack", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("IE hacks are only necessary when supporting IE7 and older"), Ignore),
    UnknownVendorSpecificProperty: new Rule("unknownVendorSpecificProperties", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Unknown vendor specific property."), Ignore),
    PropertyIgnoredDueToDisplay: new Rule("propertyIgnoredDueToDisplay", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Property is ignored due to the display."), Warning),
    AvoidImportant: new Rule("important", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."), Ignore),
    AvoidFloat: new Rule("float", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."), Ignore),
    AvoidIdSelector: new Rule("idSelector", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Selectors should not contain IDs because these rules are too tightly coupled with the HTML."), Ignore),
};
const Settings = {
    ValidProperties: new Setting("validProperties", _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("A list of properties that are not validated against the `unknownProperties` rule."), []),
};
class LintConfigurationSettings {
    constructor(conf = {}) {
        this.conf = conf;
    }
    getRule(rule) {
        if (this.conf.hasOwnProperty(rule.id)) {
            const level = toLevel(this.conf[rule.id]);
            if (level) {
                return level;
            }
        }
        return rule.defaultValue;
    }
    getSetting(setting) {
        return this.conf[setting.id];
    }
}
function toLevel(level) {
    switch (level) {
        case "ignore":
            return _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore;
        case "warning":
            return _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Warning;
        case "error":
            return _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Error;
    }
    return null;
}
//# sourceMappingURL=lintRules.js.map

}),
"../vscode-css-languageservice/lib/esm/services/lintUtil.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Element: function() { return Element; },
  "default": function() { return calculateBoxModel; }
});
/* ESM import */var _utils_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arrays */ "../vscode-css-languageservice/lib/esm/utils/arrays.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class Element {
    constructor(decl) {
        this.fullPropertyName = decl.getFullPropertyName().toLowerCase();
        this.node = decl;
    }
}
function setSide(model, side, value, property) {
    const state = model[side];
    state.value = value;
    if (value) {
        if (!(0,_utils_arrays__WEBPACK_IMPORTED_MODULE_0__.includes)(state.properties, property)) {
            state.properties.push(property);
        }
    }
}
function setAllSides(model, value, property) {
    setSide(model, "top", value, property);
    setSide(model, "right", value, property);
    setSide(model, "bottom", value, property);
    setSide(model, "left", value, property);
}
function updateModelWithValue(model, side, value, property) {
    if (side === "top" || side === "right" || side === "bottom" || side === "left") {
        setSide(model, side, value, property);
    }
    else {
        setAllSides(model, value, property);
    }
}
function updateModelWithList(model, values, property) {
    switch (values.length) {
        case 1:
            updateModelWithValue(model, undefined, values[0], property);
            break;
        case 2:
            updateModelWithValue(model, "top", values[0], property);
            updateModelWithValue(model, "bottom", values[0], property);
            updateModelWithValue(model, "right", values[1], property);
            updateModelWithValue(model, "left", values[1], property);
            break;
        case 3:
            updateModelWithValue(model, "top", values[0], property);
            updateModelWithValue(model, "right", values[1], property);
            updateModelWithValue(model, "left", values[1], property);
            updateModelWithValue(model, "bottom", values[2], property);
            break;
        case 4:
            updateModelWithValue(model, "top", values[0], property);
            updateModelWithValue(model, "right", values[1], property);
            updateModelWithValue(model, "bottom", values[2], property);
            updateModelWithValue(model, "left", values[3], property);
            break;
    }
}
function matches(value, candidates) {
    for (let candidate of candidates) {
        if (value.matches(candidate)) {
            return true;
        }
    }
    return false;
}
/**
 * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero
 * @return `true` if this node represents a non-zero border; otherwise, `false`
 */
function checkLineWidth(value, allowsKeywords = true) {
    if (allowsKeywords && matches(value, ["initial", "unset"])) {
        return false;
    }
    // a <length> is a value and a unit
    // so use `parseFloat` to strip the unit
    return parseFloat(value.getText()) !== 0;
}
function checkLineWidthList(nodes, allowsKeywords = true) {
    return nodes.map((node) => checkLineWidth(node, allowsKeywords));
}
/**
 * @param allowsKeywords whether keywords `initial` and `unset` count as zero
 * @return `true` if this node represents a non-zero border; otherwise, `false`
 */
function checkLineStyle(valueNode, allowsKeywords = true) {
    if (matches(valueNode, ["none", "hidden"])) {
        return false;
    }
    if (allowsKeywords && matches(valueNode, ["initial", "unset"])) {
        return false;
    }
    return true;
}
function checkLineStyleList(nodes, allowsKeywords = true) {
    return nodes.map((node) => checkLineStyle(node, allowsKeywords));
}
function checkBorderShorthand(node) {
    const children = node.getChildren();
    // the only child can be a keyword, a <line-width>, or a <line-style>
    // if either check returns false, the result is no border
    if (children.length === 1) {
        const value = children[0];
        return checkLineWidth(value) && checkLineStyle(value);
    }
    // multiple children can't contain keywords
    // if any child means no border, the result is no border
    for (const child of children) {
        const value = child;
        if (!checkLineWidth(value, /* allowsKeywords: */ false) || !checkLineStyle(value, /* allowsKeywords: */ false)) {
            return false;
        }
    }
    return true;
}
function calculateBoxModel(propertyTable) {
    const model = {
        top: { value: false, properties: [] },
        right: { value: false, properties: [] },
        bottom: { value: false, properties: [] },
        left: { value: false, properties: [] },
    };
    for (const property of propertyTable) {
        const value = property.node.value;
        if (typeof value === "undefined") {
            continue;
        }
        switch (property.fullPropertyName) {
            case "box-sizing":
                // has `box-sizing`, bail out
                return {
                    top: { value: false, properties: [] },
                    right: { value: false, properties: [] },
                    bottom: { value: false, properties: [] },
                    left: { value: false, properties: [] },
                };
            case "width":
                model.width = property;
                break;
            case "height":
                model.height = property;
                break;
            default:
                const segments = property.fullPropertyName.split("-");
                switch (segments[0]) {
                    case "border":
                        switch (segments[1]) {
                            case undefined:
                            case "top":
                            case "right":
                            case "bottom":
                            case "left":
                                switch (segments[2]) {
                                    case undefined:
                                        updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);
                                        break;
                                    case "width":
                                        // the initial value of `border-width` is `medium`, not zero
                                        updateModelWithValue(model, segments[1], checkLineWidth(value, false), property);
                                        break;
                                    case "style":
                                        // the initial value of `border-style` is `none`
                                        updateModelWithValue(model, segments[1], checkLineStyle(value, true), property);
                                        break;
                                }
                                break;
                            case "width":
                                // the initial value of `border-width` is `medium`, not zero
                                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);
                                break;
                            case "style":
                                // the initial value of `border-style` is `none`
                                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);
                                break;
                        }
                        break;
                    case "padding":
                        if (segments.length === 1) {
                            // the initial value of `padding` is zero
                            updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);
                        }
                        else {
                            // the initial value of `padding` is zero
                            updateModelWithValue(model, segments[1], checkLineWidth(value, true), property);
                        }
                        break;
                }
                break;
        }
    }
    return model;
}
//# sourceMappingURL=lintUtil.js.map

}),
"../vscode-css-languageservice/lib/esm/services/pathCompletion.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  PathCompletionParticipant: function() { return PathCompletionParticipant; }
});
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* ESM import */var _utils_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/strings */ "../vscode-css-languageservice/lib/esm/utils/strings.js");
/* ESM import */var _utils_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/resources */ "../vscode-css-languageservice/lib/esm/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



class PathCompletionParticipant {
    constructor(readDirectory) {
        this.readDirectory = readDirectory;
        this.literalCompletions = [];
        this.importCompletions = [];
    }
    onCssURILiteralValue(context) {
        this.literalCompletions.push(context);
    }
    onCssImportPath(context) {
        this.importCompletions.push(context);
    }
    async computeCompletions(document, documentContext) {
        const result = { items: [], isIncomplete: false };
        for (const literalCompletion of this.literalCompletions) {
            const uriValue = literalCompletion.uriValue;
            const fullValue = stripQuotes(uriValue);
            if (fullValue === "." || fullValue === "..") {
                result.isIncomplete = true;
            }
            else {
                const items = await this.providePathSuggestions(uriValue, literalCompletion.position, literalCompletion.range, document, documentContext);
                for (let item of items) {
                    result.items.push(item);
                }
            }
        }
        for (const importCompletion of this.importCompletions) {
            const pathValue = importCompletion.pathValue;
            const fullValue = stripQuotes(pathValue);
            if (fullValue === "." || fullValue === "..") {
                result.isIncomplete = true;
            }
            else {
                let suggestions = await this.providePathSuggestions(pathValue, importCompletion.position, importCompletion.range, document, documentContext);
                if (document.languageId === "scss" || document.languageId === "sass") {
                    suggestions.forEach((s) => {
                        if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(s.label, "_") && ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.endsWith)(s.label, ".scss") || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.endsWith)(s.label, ".sass"))) {
                            if (s.textEdit) {
                                s.textEdit.newText = s.label.slice(1, -5);
                            }
                            else {
                                s.label = s.label.slice(1, -5);
                            }
                        }
                    });
                }
                for (let item of suggestions) {
                    result.items.push(item);
                }
            }
        }
        return result;
    }
    async providePathSuggestions(pathValue, position, range, document, documentContext) {
        const fullValue = stripQuotes(pathValue);
        const isValueQuoted = (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(pathValue, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(pathValue, `"`);
        const valueBeforeCursor = isValueQuoted
            ? fullValue.slice(0, position.character - (range.start.character + 1))
            : fullValue.slice(0, position.character - range.start.character);
        const currentDocUri = document.uri;
        const fullValueRange = isValueQuoted ? shiftRange(range, 1, -1) : range;
        const replaceRange = pathToReplaceRange(valueBeforeCursor, fullValue, fullValueRange);
        const valueBeforeLastSlash = valueBeforeCursor.substring(0, valueBeforeCursor.lastIndexOf("/") + 1); // keep the last slash
        let parentDir = documentContext.resolveReference(valueBeforeLastSlash || ".", currentDocUri);
        if (parentDir) {
            try {
                const result = [];
                const infos = await this.readDirectory(parentDir);
                for (const [name, type] of infos) {
                    // Exclude paths that start with `.`
                    if (name.charCodeAt(0) !== CharCode_dot &&
                        (type === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.FileType.Directory || (0,_utils_resources__WEBPACK_IMPORTED_MODULE_2__.joinPath)(parentDir, name) !== currentDocUri)) {
                        result.push(createCompletionItem(name, type === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.FileType.Directory, replaceRange));
                    }
                }
                return result;
            }
            catch {
                // ignore
            }
        }
        return [];
    }
}
const CharCode_dot = ".".charCodeAt(0);
function stripQuotes(fullValue) {
    if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(fullValue, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(fullValue, `"`)) {
        return fullValue.slice(1, -1);
    }
    else {
        return fullValue;
    }
}
function pathToReplaceRange(valueBeforeCursor, fullValue, fullValueRange) {
    let replaceRange;
    const lastIndexOfSlash = valueBeforeCursor.lastIndexOf("/");
    if (lastIndexOfSlash === -1) {
        replaceRange = fullValueRange;
    }
    else {
        // For cases where cursor is in the middle of attribute value, like <script src="./s|rc/test.js">
        // Find the last slash before cursor, and calculate the start of replace range from there
        const valueAfterLastSlash = fullValue.slice(lastIndexOfSlash + 1);
        const startPos = shiftPosition(fullValueRange.end, -valueAfterLastSlash.length);
        // If whitespace exists, replace until it
        const whitespaceIndex = valueAfterLastSlash.indexOf(" ");
        let endPos;
        if (whitespaceIndex !== -1) {
            endPos = shiftPosition(startPos, whitespaceIndex);
        }
        else {
            endPos = fullValueRange.end;
        }
        replaceRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(startPos, endPos);
    }
    return replaceRange;
}
function createCompletionItem(name, isDir, replaceRange) {
    if (isDir) {
        name = name + "/";
        return {
            label: escapePath(name),
            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Folder,
            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(replaceRange, escapePath(name)),
            command: {
                title: "Suggest",
                command: "editor.action.triggerSuggest",
            },
        };
    }
    else {
        return {
            label: escapePath(name),
            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.File,
            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(replaceRange, escapePath(name)),
        };
    }
}
// Escape https://www.w3.org/TR/CSS1/#url
function escapePath(p) {
    return p.replace(/(\s|\(|\)|,|"|')/g, "\\$1");
}
function shiftPosition(pos, offset) {
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Position.create(pos.line, pos.character + offset);
}
function shiftRange(range, startOffset, endOffset) {
    const start = shiftPosition(range.start, startOffset);
    const end = shiftPosition(range.end, endOffset);
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end);
}
//# sourceMappingURL=pathCompletion.js.map

}),
"../vscode-css-languageservice/lib/esm/services/sassCompletion.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SassCompletion: function() { return SassCompletion; }
});
/* ESM import */var _cssCompletion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssCompletion */ "../vscode-css-languageservice/lib/esm/services/cssCompletion.js");
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cssLanguageTypes */ "../vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_3__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





const sassDocumentationName = _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Sass documentation");
class SassCompletion extends _cssCompletion__WEBPACK_IMPORTED_MODULE_0__.CSSCompletion {
    constructor(lsServiceOptions, cssDataManager) {
        super("$", lsServiceOptions, cssDataManager);
        addReferencesToDocumentation(SassCompletion.scssModuleLoaders);
        addReferencesToDocumentation(SassCompletion.scssModuleBuiltIns);
    }
    isImportPathParent(type) {
        return type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward || type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use || super.isImportPathParent(type);
    }
    getCompletionForImportPath(importPathNode, result) {
        const parentType = importPathNode.getParent().type;
        if (parentType === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward || parentType === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use) {
            for (let p of SassCompletion.scssModuleBuiltIns) {
                const item = {
                    label: p.label,
                    documentation: p.documentation,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(importPathNode), `'${p.label}'`),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Module,
                };
                result.items.push(item);
            }
        }
        return super.getCompletionForImportPath(importPathNode, result);
    }
    createReplaceFunction() {
        let tabStopCounter = 1;
        return (_match, p1) => {
            return "\\" + p1 + ": ${" + tabStopCounter++ + ":" + (SassCompletion.variableDefaults[p1] || "") + "}";
        };
    }
    createFunctionProposals(proposals, existingNode, sortToEnd, result) {
        for (const p of proposals) {
            if (this.documentSettings?.suggestFromUseOnly) {
                // If the user has a preference to avoid globals, exclude
                // the proposal unless it has no equivalent in the module
                // system. This affects older color functions like
                // adjust-hue https://sass-lang.com/documentation/modules/color/#adjust-hue
                if (!p.noModule) {
                    continue;
                }
            }
            const insertText = p.func.replace(/\[?(\$\w+)\]?/g, this.createReplaceFunction());
            const label = p.func.substr(0, p.func.indexOf("("));
            const item = {
                label: label,
                detail: p.func,
                documentation: p.desc,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Function,
            };
            if (sortToEnd) {
                item.sortText = "z";
            }
            result.items.push(item);
        }
        return result;
    }
    getCompletionsForSelector(ruleSet, isNested, result) {
        this.createFunctionProposals(SassCompletion.selectorFuncs, null, true, result);
        return super.getCompletionsForSelector(ruleSet, isNested, result);
    }
    getTermProposals(entry, existingNode, result) {
        let functions = SassCompletion.builtInFuncs;
        if (entry) {
            functions = functions.filter((f) => !f.type || !entry.restrictions || entry.restrictions.indexOf(f.type) !== -1);
        }
        this.createFunctionProposals(functions, existingNode, true, result);
        return super.getTermProposals(entry, existingNode, result);
    }
    getColorProposals(entry, existingNode, result) {
        this.createFunctionProposals(SassCompletion.colorProposals, existingNode, false, result);
        return super.getColorProposals(entry, existingNode, result);
    }
    getCompletionsForDeclarationProperty(declaration, result) {
        this.getCompletionForAtDirectives(result);
        this.getCompletionsForSelector(null, true, result);
        return super.getCompletionsForDeclarationProperty(declaration, result);
    }
    getCompletionsForExtendsReference(_extendsRef, existingNode, result) {
        const symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Rule);
        for (const symbol of symbols) {
            const suggest = {
                label: symbol.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(existingNode), symbol.name),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Function,
            };
            result.items.push(suggest);
        }
        return result;
    }
    getCompletionForAtDirectives(result) {
        result.items.push(...SassCompletion.scssAtDirectives);
        return result;
    }
    getCompletionForTopLevel(result) {
        this.getCompletionForAtDirectives(result);
        this.getCompletionForModuleLoaders(result);
        super.getCompletionForTopLevel(result);
        return result;
    }
    getCompletionForModuleLoaders(result) {
        result.items.push(...SassCompletion.scssModuleLoaders);
        return result;
    }
}
SassCompletion.variableDefaults = {
    $red: "1",
    $green: "2",
    $blue: "3",
    $alpha: "1.0",
    $color: "#000000",
    $weight: "0.5",
    $hue: "0",
    $saturation: "0%",
    $lightness: "0%",
    $degrees: "0",
    $amount: "0",
    $string: '""',
    $substring: '"s"',
    $number: "0",
    $limit: "1",
};
SassCompletion.colorProposals = [
    {
        func: "red($color)",
        desc: "Gets the red component of a color.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#red) for how to migrate.",
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "green($color)",
        desc: "Gets the green component of a color.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#green) for how to migrate.",
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "blue($color)",
        desc: "Gets the blue component of a color.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#blue) for how to migrate.",
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    { func: "mix($color, $color, [$weight])", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Mixes two colors together.") },
    {
        func: "hue($color)",
        desc: "Gets the hue component of a color.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#hue) for how to migrate.",
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "saturation($color)",
        desc: "Gets the saturation component of a color.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#saturation) for how to migrate.",
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "lightness($color)",
        desc: "Gets the lightness component of a color.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#lightness) for how to migrate.",
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "adjust-hue($color, $degrees)",
        desc: "Changes the hue of a color.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#adjust-hue) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "lighten($color, $amount)",
        desc: "Makes a color lighter.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#lighten) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "darken($color, $amount)",
        desc: "Makes a color darker.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#darken) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "saturate($color, $amount)",
        desc: "Makes a color more saturated.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#saturate) for how to migrate.",
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "desaturate($color, $amount)",
        desc: "Makes a color less saturated.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#desaturate) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    { func: "grayscale($color)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Converts a color to grayscale.") },
    { func: "complement($color)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the complement of a color.") },
    { func: "invert($color)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the inverse of a color.") },
    { func: "alpha($color)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Gets the opacity component of a color.") },
    { func: "opacity($color)", desc: "Gets the alpha component (opacity) of a color." },
    {
        func: "opacify($color, $amount)",
        desc: "Makes a color more opaque.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#opacity) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "fade-in($color, $amount)",
        desc: "Makes a color more opaque.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#opacity) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "transparentize($color, $amount)",
        desc: "Makes a color more transparent.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#transparentize) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "fade-out($color, $amount)",
        desc: "Makes a color more transparent.\n\nThis function is deprecated in favor of color-space-friendly functions. See [the announcement post](https://sass-lang.com/blog/wide-gamut-colors-in-sass/#deprecated-functions) and [documentation](https://sass-lang.com/documentation/modules/color/#transparentize) for how to migrate.",
        noModule: true,
        deprecated: "This function is deprecated in favor of color-space-friendly functions.",
    },
    {
        func: "adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Increases or decreases one or more components of a color."),
    },
    {
        func: "scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Fluidly scales one or more properties of a color."),
    },
    {
        func: "change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Changes one or more properties of a color."),
    },
    { func: "ie-hex-str($color)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Converts a color into the format understood by IE filters.") },
];
SassCompletion.selectorFuncs = [
    {
        func: "selector-nest($selectors…)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Nests selector beneath one another like they would be nested in the stylesheet."),
    },
    {
        func: "selector-append($selectors…)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Appends selectors to one another without spaces in between."),
    },
    {
        func: "selector-extend($selector, $extendee, $extender)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Extends $extendee with $extender within $selector."),
    },
    {
        func: "selector-replace($selector, $original, $replacement)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Replaces $original with $replacement within $selector."),
    },
    {
        func: "selector-unify($selector1, $selector2)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Unifies two selectors to produce a selector that matches elements matched by both."),
    },
    {
        func: "is-superselector($super, $sub)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether $super matches all the elements $sub does, and possibly more."),
    },
    {
        func: "simple-selectors($selector)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the simple selectors that comprise a compound selector."),
    },
    { func: "selector-parse($selector)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Parses a selector into the format returned by &.") },
];
SassCompletion.builtInFuncs = [
    { func: "unquote($string)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Removes quotes from a string.") },
    { func: "quote($string)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Adds quotes to a string.") },
    { func: "str-length($string)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the number of characters in a string.") },
    { func: "str-insert($string, $insert, $index)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Inserts $insert into $string at $index.") },
    {
        func: "str-index($string, $substring)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the index of the first occurance of $substring in $string."),
    },
    { func: "str-slice($string, $start-at, [$end-at])", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Extracts a substring from $string.") },
    { func: "to-upper-case($string)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Converts a string to upper case.") },
    { func: "to-lower-case($string)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Converts a string to lower case.") },
    { func: "percentage($number)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Converts a unitless number to a percentage."), type: "percentage" },
    { func: "round($number)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Rounds a number to the nearest whole number.") },
    { func: "ceil($number)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Rounds a number up to the next whole number.") },
    { func: "floor($number)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Rounds a number down to the previous whole number.") },
    { func: "abs($number)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the absolute value of a number.") },
    { func: "min($numbers)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Finds the minimum of several numbers.") },
    { func: "max($numbers)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Finds the maximum of several numbers.") },
    { func: "random([$limit])", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns a random number.") },
    { func: "length($list)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the length of a list.") },
    { func: "nth($list, $n)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns a specific item in a list.") },
    { func: "set-nth($list, $n, $value)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Replaces the nth item in a list.") },
    { func: "join($list1, $list2, [$separator])", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Joins together two lists into one.") },
    { func: "append($list1, $val, [$separator])", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Appends a single value onto the end of a list.") },
    { func: "zip($lists)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Combines several lists into a single multidimensional list.") },
    { func: "index($list, $value)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the position of a value within a list.") },
    { func: "list-separator(#list)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the separator of a list.") },
    { func: "map-get($map, $key)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the value in a map associated with a given key.") },
    { func: "map-merge($map1, $map2)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Merges two maps together into a new map.") },
    { func: "map-remove($map, $keys)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns a new map with keys removed.") },
    { func: "map-keys($map)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns a list of all keys in a map.") },
    { func: "map-values($map)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns a list of all values in a map.") },
    { func: "map-has-key($map, $key)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether a map has a value associated with a given key.") },
    {
        func: "keywords($args)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the keywords passed to a function that takes variable arguments."),
    },
    { func: "feature-exists($feature)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether a feature exists in the current Sass runtime.") },
    {
        func: "variable-exists($name)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether a variable with the given name exists in the current scope."),
    },
    {
        func: "global-variable-exists($name)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether a variable with the given name exists in the global scope."),
    },
    { func: "function-exists($name)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether a function with the given name exists.") },
    { func: "mixin-exists($name)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether a mixin with the given name exists.") },
    {
        func: "inspect($value)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the string representation of a value as it would be represented in Sass."),
    },
    { func: "type-of($value)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the type of a value.") },
    { func: "unit($number)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns the unit(s) associated with a number.") },
    { func: "unitless($number)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether a number has units.") },
    {
        func: "comparable($number1, $number2)",
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Returns whether two numbers can be added, subtracted, or compared."),
    },
    { func: "call($name, $args…)", desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Dynamically calls a Sass function.") },
];
SassCompletion.scssAtDirectives = [
    {
        label: "@extend",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Inherits the styles of another selector."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@at-root",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Causes one or more rules to be emitted at the root of the document."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@debug",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Prints the value of an expression to the standard error output stream. Useful for debugging complicated Sass files."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@warn",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Prints the value of an expression to the standard error output stream. Useful for libraries that need to warn users of deprecations or recovering from minor mixin usage mistakes. Warnings can be turned off with the `--quiet` command-line option or the `:quiet` Sass option."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@error",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Throws the value of an expression as a fatal error with stack trace. Useful for validating arguments to mixins and functions."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@if",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Includes the body if the expression does not evaluate to `false` or `null`."),
        insertText: "@if ${1:expr} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@for",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("For loop that repeatedly outputs a set of styles for each `$var` in the `from/through` or `from/to` clause."),
        insertText: "@for \\$${1:var} from ${2:start} ${3|to,through|} ${4:end} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@each",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Each loop that sets `$var` to each item in the list or map, then outputs the styles it contains using that value of `$var`."),
        insertText: "@each \\$${1:var} in ${2:list} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@while",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("While loop that takes an expression and repeatedly outputs the nested styles until the statement evaluates to `false`."),
        insertText: "@while ${1:condition} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@mixin",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Defines styles that can be re-used throughout the stylesheet with `@include`."),
        insertText: "@mixin ${1:name} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@include",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Includes the styles defined by another mixin into the current rule."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@function",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Defines complex operations that can be re-used throughout stylesheets."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
];
SassCompletion.scssModuleLoaders = [
    {
        label: "@use",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Loads mixins, functions, and variables from other Sass stylesheets as 'modules', and combines CSS from multiple stylesheets together."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/at-rules/use" }],
        insertText: "@use $0;",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
    {
        label: "@forward",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Loads a Sass stylesheet and makes its mixins, functions, and variables available when this stylesheet is loaded with the @use rule."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/at-rules/forward" }],
        insertText: "@forward $0;",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword,
    },
];
SassCompletion.scssModuleBuiltIns = [
    {
        label: "sass:math",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Provides functions that operate on numbers."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/modules/math" }],
    },
    {
        label: "sass:string",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Makes it easy to combine, search, or split apart strings."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/modules/string" }],
    },
    {
        label: "sass:color",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Generates new colors based on existing ones, making it easy to build color themes."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/modules/color" }],
    },
    {
        label: "sass:list",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Lets you access and modify values in lists."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/modules/list" }],
    },
    {
        label: "sass:map",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Makes it possible to look up the value associated with a key in a map, and much more."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/modules/map" }],
    },
    {
        label: "sass:selector",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Provides access to Sass’s powerful selector engine."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/modules/selector" }],
    },
    {
        label: "sass:meta",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Exposes the details of Sass’s inner workings."),
        references: [{ name: sassDocumentationName, url: "https://sass-lang.com/documentation/modules/meta" }],
    },
];
/**
 * Todo @Pine: Remove this and do it through custom data
 */
function addReferencesToDocumentation(items) {
    items.forEach((i) => {
        if (i.documentation && i.references && i.references.length > 0) {
            const markdownDoc = typeof i.documentation === "string"
                ? { kind: "markdown", value: i.documentation }
                : { kind: "markdown", value: i.documentation.value };
            markdownDoc.value += "\n\n";
            markdownDoc.value += i.references
                .map((r) => {
                return `[${r.name}](${r.url})`;
            })
                .join(" | ");
            i.documentation = markdownDoc;
        }
    });
}
//# sourceMappingURL=sassCompletion.js.map

}),
"../vscode-css-languageservice/lib/esm/services/sassNavigation.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SassNavigation: function() { return SassNavigation; }
});
/* ESM import */var _cssNavigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssNavigation */ "../vscode-css-languageservice/lib/esm/services/cssNavigation.js");
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var vscode_uri__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* ESM import */var _utils_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/strings */ "../vscode-css-languageservice/lib/esm/utils/strings.js");
/* ESM import */var _utils_resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/resources */ "../vscode-css-languageservice/lib/esm/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






const sassExt = /\.s[ac]ss$/;
class SassNavigation extends _cssNavigation__WEBPACK_IMPORTED_MODULE_0__.CSSNavigation {
    constructor(fileSystemProvider) {
        super(fileSystemProvider, true);
    }
    isRawStringDocumentLinkNode(node) {
        return (super.isRawStringDocumentLinkNode(node) ||
            node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use ||
            node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward);
    }
    async mapReference(target, isRawLink) {
        if (this.fileSystemProvider && target && isRawLink) {
            const pathVariations = toPathVariations(target);
            for (const variation of pathVariations) {
                if (await this.fileExists(variation)) {
                    return variation;
                }
            }
        }
        return target;
    }
    async resolveReference(target, documentUri, documentContext, isRawLink = false) {
        if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_2__.startsWith)(target, "sass:")) {
            return undefined; // sass library
        }
        // Following the [sass package importer](https://github.com/sass/sass/blob/f6832f974c61e35c42ff08b3640ff155071a02dd/js-api-doc/importer.d.ts#L349),
        // look for the `exports` field of the module and any `sass`, `style` or `default` that matches the import.
        // If it's only `pkg:module`, also look for `sass` and `style` on the root of package.json.
        if (target.startsWith("pkg:")) {
            return this.resolvePkgModulePath(target, documentUri, documentContext);
        }
        return super.resolveReference(target, documentUri, documentContext, isRawLink);
    }
    async resolvePkgModulePath(target, documentUri, documentContext) {
        const bareTarget = target.replace("pkg:", "");
        const moduleName = bareTarget.includes("/") ? (0,_cssNavigation__WEBPACK_IMPORTED_MODULE_0__.getModuleNameFromPath)(bareTarget) : bareTarget;
        const rootFolderUri = documentContext.resolveReference("/", documentUri);
        const documentFolderUri = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_3__.dirname)(documentUri);
        const modulePath = await this.resolvePathToModule(moduleName, documentFolderUri, rootFolderUri);
        if (!modulePath) {
            return undefined;
        }
        // Since submodule exports import strings don't match the file system,
        // we need the contents of `package.json` to look up the correct path.
        let packageJsonContent = await this.getContent((0,_utils_resources__WEBPACK_IMPORTED_MODULE_3__.joinPath)(modulePath, "package.json"));
        if (!packageJsonContent) {
            return undefined;
        }
        let packageJson;
        try {
            packageJson = JSON.parse(packageJsonContent);
        }
        catch {
            // problems parsing package.json
            return undefined;
        }
        const subpath = bareTarget.substring(moduleName.length + 1);
        if (packageJson.exports) {
            if (!subpath) {
                // exports may look like { "sass": "./_index.scss" } or { ".": { "sass": "./_index.scss" } }
                const rootExport = packageJson.exports["."] || packageJson.exports;
                // look for the default/index export
                // @ts-expect-error If ['.'] is a string this just produces undefined
                const entry = rootExport && (rootExport["sass"] || rootExport["style"] || rootExport["default"]);
                // the 'default' entry can be whatever, typically .js – confirm it looks like `scss`
                if (entry && entry.match(sassExt)) {
                    const entryPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_3__.joinPath)(modulePath, entry);
                    return entryPath;
                }
            }
            else {
                // The import string may be with or without a file extension.
                // Likewise the exports entry. Look up both paths.
                // However, they need to be relative (start with ./).
                const lookupSubpath = subpath.match(sassExt) ? `./${subpath.replace(sassExt, "")}` : `./${subpath}`;
                const lookupSubpathScss = subpath.match(sassExt) ? `./${subpath}` : `./${subpath}.scss`;
                const lookupSubpathSass = subpath.match(sassExt) ? `./${subpath}` : `./${subpath}.sass`;
                const subpathObject = packageJson.exports[lookupSubpathScss] ||
                    packageJson.exports[lookupSubpathSass] ||
                    packageJson.exports[lookupSubpath];
                if (subpathObject) {
                    // @ts-expect-error If subpathObject is a string this just produces undefined
                    const entry = subpathObject["sass"] || subpathObject["styles"] || subpathObject["default"];
                    // the 'default' entry can be whatever, typically .js – confirm it looks like `scss` or `sass`
                    if (entry && entry.match(sassExt)) {
                        const entryPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_3__.joinPath)(modulePath, entry);
                        return entryPath;
                    }
                }
                else {
                    // We have a subpath, but found no matches on direct lookup.
                    // It may be a [subpath pattern](https://nodejs.org/api/packages.html#subpath-patterns).
                    for (const [maybePattern, subpathObject] of Object.entries(packageJson.exports)) {
                        if (!maybePattern.includes("*")) {
                            continue;
                        }
                        // Patterns may also be without `.scss` on the left side, so compare without on both sides
                        const re = new RegExp((0,_utils_strings__WEBPACK_IMPORTED_MODULE_2__.convertSimple2RegExpPattern)(maybePattern.replace(sassExt, "")).replace(/\.\*/g, "(.*)"));
                        const match = re.exec(lookupSubpath);
                        if (match) {
                            // @ts-expect-error If subpathObject is a string this just produces undefined
                            const entry = subpathObject["sass"] || subpathObject["styles"] || subpathObject["default"];
                            // the 'default' entry can be whatever, typically .js – confirm it looks like `scss` or `sass`
                            if (entry && entry.match(sassExt)) {
                                // The right-hand side of a subpath pattern is also a pattern.
                                // Replace the pattern with the match from our regexp capture group above.
                                const expandedPattern = entry.replace("*", match[1]);
                                const entryPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_3__.joinPath)(modulePath, expandedPattern);
                                return entryPath;
                            }
                        }
                    }
                }
            }
        }
        else if (!subpath && (packageJson.sass || packageJson.style)) {
            // Fall back to a direct lookup on `sass` and `style` on package root
            const entry = packageJson.sass || packageJson.style;
            if (entry) {
                const entryPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_3__.joinPath)(modulePath, entry);
                return entryPath;
            }
        }
        return undefined;
    }
}
function toPathVariations(target) {
    // No variation for links that ends with .css suffix
    if (target.endsWith(".css")) {
        return [target];
    }
    // If a link is like a/, try resolving a/index.scss and a/_index.scss, and likewise for .sass
    if (target.endsWith("/")) {
        return [target + "index.scss", target + "_index.scss", target + "index.sass", target + "_index.sass"];
    }
    const targetUri = vscode_uri__WEBPACK_IMPORTED_MODULE_4__.URI.parse(target.replace(/\.s[ac]ss$/, ""));
    const basename = vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.basename(targetUri);
    const dirname = vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.dirname(targetUri);
    if (basename.startsWith("_")) {
        // No variation for links such as _a
        return [
            vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(dirname, basename + ".scss").toString(true),
            vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(dirname, basename + ".sass").toString(true),
        ];
    }
    return [
        vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(dirname, basename + ".scss").toString(true),
        vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(dirname, "_" + basename + ".scss").toString(true),
        target + "/index.scss",
        target + "/_index.scss",
        vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(dirname, basename + ".sass").toString(true),
        vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(dirname, "_" + basename + ".sass").toString(true),
        target + "/index.sass",
        target + "/_index.sass",
        vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(dirname, basename + ".css").toString(true),
    ];
}
//# sourceMappingURL=sassNavigation.js.map

}),
"../vscode-css-languageservice/lib/esm/services/selectorPrinting.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Element: function() { return Element; },
  LabelElement: function() { return LabelElement; },
  RootElement: function() { return RootElement; },
  SelectorPrinting: function() { return SelectorPrinting; },
  selectorToElement: function() { return selectorToElement; },
  toElement: function() { return toElement; }
});
/* ESM import */var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* ESM import */var _parser_cssScanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssScanner */ "../vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* ESM import */var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var _parser_cssParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/cssParser */ "../vscode-css-languageservice/lib/esm/parser/cssParser.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class Element {
    constructor() {
        this.parent = null;
        this.children = null;
        this.attributes = null;
    }
    findAttribute(name) {
        if (this.attributes) {
            for (const attribute of this.attributes) {
                if (attribute.name === name) {
                    return attribute.value;
                }
            }
        }
        return null;
    }
    addChild(child) {
        if (child instanceof Element) {
            child.parent = this;
        }
        if (!this.children) {
            this.children = [];
        }
        this.children.push(child);
    }
    append(text) {
        if (this.attributes) {
            const last = this.attributes[this.attributes.length - 1];
            last.value = last.value + text;
        }
    }
    prepend(text) {
        if (this.attributes) {
            const first = this.attributes[0];
            first.value = text + first.value;
        }
    }
    findRoot() {
        let curr = this;
        while (curr.parent && !(curr.parent instanceof RootElement)) {
            curr = curr.parent;
        }
        return curr;
    }
    removeChild(child) {
        if (this.children) {
            const index = this.children.indexOf(child);
            if (index !== -1) {
                this.children.splice(index, 1);
                return true;
            }
        }
        return false;
    }
    addAttr(name, value) {
        if (!this.attributes) {
            this.attributes = [];
        }
        for (const attribute of this.attributes) {
            if (attribute.name === name) {
                attribute.value += " " + value;
                return;
            }
        }
        this.attributes.push({ name, value });
    }
    clone(cloneChildren = true) {
        const elem = new Element();
        if (this.attributes) {
            elem.attributes = [];
            for (const attribute of this.attributes) {
                elem.addAttr(attribute.name, attribute.value);
            }
        }
        if (cloneChildren && this.children) {
            elem.children = [];
            for (let index = 0; index < this.children.length; index++) {
                elem.addChild(this.children[index].clone());
            }
        }
        return elem;
    }
    cloneWithParent() {
        const clone = this.clone(false);
        if (this.parent && !(this.parent instanceof RootElement)) {
            const parentClone = this.parent.cloneWithParent();
            parentClone.addChild(clone);
        }
        return clone;
    }
}
class RootElement extends Element {
}
class LabelElement extends Element {
    constructor(label) {
        super();
        this.addAttr("name", label);
    }
}
class MarkedStringPrinter {
    constructor(quote) {
        this.quote = quote;
        this.result = [];
        // empty
    }
    print(element, flagOpts) {
        this.result = [];
        if (element instanceof RootElement) {
            if (element.children) {
                this.doPrint(element.children, 0);
            }
        }
        else {
            this.doPrint([element], 0);
        }
        let value;
        if (flagOpts) {
            value = `${flagOpts.text}\n … ` + this.result.join("\n");
        }
        else {
            value = this.result.join("\n");
        }
        return [{ language: "html", value }];
    }
    doPrint(elements, indent) {
        for (const element of elements) {
            this.doPrintElement(element, indent);
            if (element.children) {
                this.doPrint(element.children, indent + 1);
            }
        }
    }
    writeLine(level, content) {
        const indent = new Array(level + 1).join("  ");
        this.result.push(indent + content);
    }
    doPrintElement(element, indent) {
        const name = element.findAttribute("name");
        // special case: a simple label
        if (element instanceof LabelElement || name === "\u2026") {
            this.writeLine(indent, name);
            return;
        }
        // the real deal
        const content = ["<"];
        // element name
        if (name) {
            content.push(name);
        }
        else {
            content.push("element");
        }
        // attributes
        if (element.attributes) {
            for (const attr of element.attributes) {
                if (attr.name !== "name") {
                    content.push(" ");
                    content.push(attr.name);
                    const value = attr.value;
                    if (value) {
                        content.push("=");
                        content.push(quotes.ensure(value, this.quote));
                    }
                }
            }
        }
        content.push(">");
        this.writeLine(indent, content.join(""));
    }
}
var quotes;
(function (quotes) {
    function ensure(value, which) {
        return which + remove(value) + which;
    }
    quotes.ensure = ensure;
    function remove(value) {
        const match = value.match(/^['"](.*)["']$/);
        if (match) {
            return match[1];
        }
        return value;
    }
    quotes.remove = remove;
})(quotes || (quotes = {}));
class Specificity {
    constructor() {
        /** Count of identifiers (e.g., `#app`) */
        this.id = 0;
        /** Count of attributes (`[type="number"]`), classes (`.container-fluid`), and pseudo-classes (`:hover`) */
        this.attr = 0;
        /** Count of tag names (`div`), and pseudo-elements (`::before`) */
        this.tag = 0;
    }
}
function toElement(node, parentElement) {
    let result = new Element();
    for (const child of node.getChildren()) {
        switch (child.type) {
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinator:
                if (parentElement) {
                    const segments = child.getText().split("&");
                    if (segments.length === 1) {
                        // should not happen
                        result.addAttr("name", segments[0]);
                        break;
                    }
                    result = parentElement.cloneWithParent();
                    if (segments[0]) {
                        const root = result.findRoot();
                        root.prepend(segments[0]);
                    }
                    for (let i = 1; i < segments.length; i++) {
                        if (i > 1) {
                            const clone = parentElement.cloneWithParent();
                            result.addChild(clone.findRoot());
                            result = clone;
                        }
                        result.append(segments[i]);
                    }
                }
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorPlaceholder:
                if (child.matches("@at-root")) {
                    return result;
                }
            // fall through
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector:
                const text = child.getText();
                result.addAttr("name", text === "*" ? "element" : unescape(text));
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector:
                result.addAttr("class", unescape(child.getText().substring(1)));
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector:
                result.addAttr("id", unescape(child.getText().substring(1)));
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
                result.addAttr("class", child.getName());
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector:
                result.addAttr(unescape(child.getText()), "");
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.AttributeSelector:
                const selector = child;
                const identifier = selector.getIdentifier();
                if (identifier) {
                    const expression = selector.getValue();
                    const operator = selector.getOperator();
                    let value;
                    if (expression && operator) {
                        switch (unescape(operator.getText())) {
                            case "|=":
                                // excatly or followed by -words
                                value = `${quotes.remove(unescape(expression.getText()))}-\u2026`;
                                break;
                            case "^=":
                                // prefix
                                value = `${quotes.remove(unescape(expression.getText()))}\u2026`;
                                break;
                            case "$=":
                                // suffix
                                value = `\u2026${quotes.remove(unescape(expression.getText()))}`;
                                break;
                            case "~=":
                                // one of a list of words
                                value = ` \u2026 ${quotes.remove(unescape(expression.getText()))} \u2026 `;
                                break;
                            case "*=":
                                // substring
                                value = `\u2026${quotes.remove(unescape(expression.getText()))}\u2026`;
                                break;
                            default:
                                value = quotes.remove(unescape(expression.getText()));
                                break;
                        }
                    }
                    result.addAttr(unescape(identifier.getText()), value);
                }
                break;
        }
    }
    return result;
}
function unescape(content) {
    const scanner = new _parser_cssScanner__WEBPACK_IMPORTED_MODULE_1__.Scanner();
    scanner.setSource(content);
    const token = scanner.scanUnquotedString();
    if (token) {
        return token.text;
    }
    return content;
}
class SelectorPrinting {
    constructor(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    selectorToMarkedString(node, flagOpts) {
        const root = selectorToElement(node);
        if (root) {
            const markedStrings = new MarkedStringPrinter('"').print(root, flagOpts);
            markedStrings.push(this.selectorToSpecificityMarkedString(node));
            return markedStrings;
        }
        else {
            return [];
        }
    }
    simpleSelectorToMarkedString(node) {
        const element = toElement(node);
        const markedStrings = new MarkedStringPrinter('"').print(element);
        markedStrings.push(this.selectorToSpecificityMarkedString(node));
        return markedStrings;
    }
    isPseudoElementIdentifier(text) {
        const match = text.match(/^::?([\w-]+)/);
        if (!match) {
            return false;
        }
        return !!this.cssDataManager.getPseudoElement("::" + match[1]);
    }
    selectorToSpecificityMarkedString(node) {
        const calculateMostSpecificListItem = (childElements) => {
            const specificity = new Specificity();
            let mostSpecificListItem = new Specificity();
            for (const containerElement of childElements) {
                for (const childElement of containerElement.getChildren()) {
                    const itemSpecificity = calculateScore(childElement);
                    if (itemSpecificity.id > mostSpecificListItem.id) {
                        mostSpecificListItem = itemSpecificity;
                        continue;
                    }
                    else if (itemSpecificity.id < mostSpecificListItem.id) {
                        continue;
                    }
                    if (itemSpecificity.attr > mostSpecificListItem.attr) {
                        mostSpecificListItem = itemSpecificity;
                        continue;
                    }
                    else if (itemSpecificity.attr < mostSpecificListItem.attr) {
                        continue;
                    }
                    if (itemSpecificity.tag > mostSpecificListItem.tag) {
                        mostSpecificListItem = itemSpecificity;
                        continue;
                    }
                }
            }
            specificity.id += mostSpecificListItem.id;
            specificity.attr += mostSpecificListItem.attr;
            specificity.tag += mostSpecificListItem.tag;
            return specificity;
        };
        //https://www.w3.org/TR/selectors-3/#specificity
        const calculateScore = (node) => {
            const specificity = new Specificity();
            elementLoop: for (const element of node.getChildren()) {
                switch (element.type) {
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector:
                        specificity.id++;
                        break;
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector:
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.AttributeSelector:
                        specificity.attr++;
                        break;
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector:
                        //ignore universal selector
                        if (element.matches("*")) {
                            break;
                        }
                        specificity.tag++;
                        break;
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector:
                        const text = element.getText();
                        const childElements = element.getChildren();
                        if (this.isPseudoElementIdentifier(text)) {
                            if (text.match(/^::slotted/i) && childElements.length > 0) {
                                // The specificity of ::slotted() is that of a pseudo-element, plus the specificity of its argument.
                                // ::slotted() does not allow a selector list as its argument, but this isn't the right place to give feedback on validity.
                                // Reporting the most specific child will be correct for correct CSS and will be forgiving in case of mistakes.
                                specificity.tag++;
                                let mostSpecificListItem = calculateMostSpecificListItem(childElements);
                                specificity.id += mostSpecificListItem.id;
                                specificity.attr += mostSpecificListItem.attr;
                                specificity.tag += mostSpecificListItem.tag;
                                continue elementLoop;
                            }
                            specificity.tag++; // pseudo element
                            continue elementLoop;
                        }
                        // where and child selectors have zero specificity
                        if (text.match(/^:where/i)) {
                            continue elementLoop;
                        }
                        // the most specific child selector
                        if (text.match(/^:(?:not|has|is)/i) && childElements.length > 0) {
                            let mostSpecificListItem = calculateMostSpecificListItem(childElements);
                            specificity.id += mostSpecificListItem.id;
                            specificity.attr += mostSpecificListItem.attr;
                            specificity.tag += mostSpecificListItem.tag;
                            continue elementLoop;
                        }
                        if (text.match(/^:(?:host|host-context)/i) && childElements.length > 0) {
                            // The specificity of :host() is that of a pseudo-class, plus the specificity of its argument.
                            // The specificity of :host-context() is that of a pseudo-class, plus the specificity of its argument.
                            specificity.attr++;
                            let mostSpecificListItem = calculateMostSpecificListItem(childElements);
                            specificity.id += mostSpecificListItem.id;
                            specificity.attr += mostSpecificListItem.attr;
                            specificity.tag += mostSpecificListItem.tag;
                            continue elementLoop;
                        }
                        if (text.match(/^:(?:nth-child|nth-last-child)/i) && childElements.length > 0) {
                            /* The specificity of the :nth-child(An+B [of S]?) pseudo-class is the specificity of a single pseudo-class plus, if S is specified, the specificity of the most specific complex selector in S */
                            // https://www.w3.org/TR/selectors-4/#the-nth-child-pseudo
                            specificity.attr++;
                            // 23 = Binary Expression.
                            if (childElements.length === 3 && childElements[1].type === 23) {
                                let mostSpecificListItem = calculateMostSpecificListItem(childElements[2].getChildren());
                                specificity.id += mostSpecificListItem.id;
                                specificity.attr += mostSpecificListItem.attr;
                                specificity.tag += mostSpecificListItem.tag;
                                continue elementLoop;
                            }
                            // Edge case: 'n' without integer prefix A, with B integer non-existent, is not regarded as a binary expression token.
                            const parser = new _parser_cssParser__WEBPACK_IMPORTED_MODULE_2__.Parser();
                            const pseudoSelectorText = childElements[1].getText();
                            parser.scanner.setSource(pseudoSelectorText);
                            const firstToken = parser.scanner.scan();
                            const secondToken = parser.scanner.scan();
                            if (firstToken.text === "n" || (firstToken.text === "-n" && secondToken.text === "of")) {
                                const complexSelectorListNodes = [];
                                const complexSelectorText = pseudoSelectorText.slice(secondToken.offset + 2);
                                const complexSelectorArray = complexSelectorText.split(",");
                                for (const selector of complexSelectorArray) {
                                    const node = parser.internalParse(selector, parser._parseSelector);
                                    if (node) {
                                        complexSelectorListNodes.push(node);
                                    }
                                }
                                let mostSpecificListItem = calculateMostSpecificListItem(complexSelectorListNodes);
                                specificity.id += mostSpecificListItem.id;
                                specificity.attr += mostSpecificListItem.attr;
                                specificity.tag += mostSpecificListItem.tag;
                                continue elementLoop;
                            }
                            continue elementLoop;
                        }
                        specificity.attr++; //pseudo class
                        continue elementLoop;
                }
                if (element.getChildren().length > 0) {
                    const itemSpecificity = calculateScore(element);
                    specificity.id += itemSpecificity.id;
                    specificity.attr += itemSpecificity.attr;
                    specificity.tag += itemSpecificity.tag;
                }
            }
            return specificity;
        };
        const specificity = calculateScore(node);
        return `[${_vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Selector Specificity")}](https://developer.mozilla.org/docs/Web/CSS/Specificity): (${specificity.id}, ${specificity.attr}, ${specificity.tag})`;
    }
}
class SelectorElementBuilder {
    constructor(element) {
        this.prev = null;
        this.element = element;
    }
    processSelector(selector) {
        let parentElement = null;
        if (!(this.element instanceof RootElement)) {
            if (selector.getChildren().some((c) => c.hasChildren() && c.getChild(0).type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinator)) {
                const curr = this.element.findRoot();
                if (curr.parent instanceof RootElement) {
                    parentElement = this.element;
                    this.element = curr.parent;
                    this.element.removeChild(curr);
                    this.prev = null;
                }
            }
        }
        for (const selectorChild of selector.getChildren()) {
            if (selectorChild instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                if (this.prev instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                    const labelElement = new LabelElement("\u2026");
                    this.element.addChild(labelElement);
                    this.element = labelElement;
                }
                else if (this.prev && (this.prev.matches("+") || this.prev.matches("~")) && this.element.parent) {
                    this.element = this.element.parent;
                }
                if (this.prev && this.prev.matches("~")) {
                    this.element.addChild(new LabelElement("\u22EE"));
                }
                const thisElement = toElement(selectorChild, parentElement);
                const root = thisElement.findRoot();
                this.element.addChild(root);
                this.element = thisElement;
            }
            if (selectorChild instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorParent ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorShadowPiercingDescendant ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorSibling ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorAllSiblings) {
                this.prev = selectorChild;
            }
        }
    }
}
function isNewSelectorContext(node) {
    switch (node.type) {
        case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
        case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Stylesheet:
            return true;
    }
    return false;
}
function selectorToElement(node) {
    if (node.matches("@at-root")) {
        return null;
    }
    const root = new RootElement();
    const parentRuleSets = [];
    const ruleSet = node.getParent();
    if (ruleSet instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
        let parent = ruleSet.getParent(); // parent of the selector's ruleset
        while (parent && !isNewSelectorContext(parent)) {
            if (parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
                if (parent.getSelectors().matches("@at-root")) {
                    break;
                }
                parentRuleSets.push(parent);
            }
            parent = parent.getParent();
        }
    }
    const builder = new SelectorElementBuilder(root);
    for (let i = parentRuleSets.length - 1; i >= 0; i--) {
        const selector = parentRuleSets[i].getSelectors().getChild(0);
        if (selector) {
            builder.processSelector(selector);
        }
    }
    builder.processSelector(node);
    return root;
}
//# sourceMappingURL=selectorPrinting.js.map

}),
"../vscode-css-languageservice/lib/esm/utils/arrays.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  findFirst: function() { return findFirst; },
  includes: function() { return includes; },
  union: function() { return union; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false
 * are located before all elements where p(x) is true.
 * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.
 */
function findFirst(array, p) {
    let low = 0, high = array.length;
    if (high === 0) {
        return 0; // no children
    }
    while (low < high) {
        let mid = Math.floor((low + high) / 2);
        if (p(array[mid])) {
            high = mid;
        }
        else {
            low = mid + 1;
        }
    }
    return low;
}
function includes(array, item) {
    return array.indexOf(item) !== -1;
}
function union(...arrays) {
    const result = [];
    for (const array of arrays) {
        for (const item of array) {
            if (!includes(result, item)) {
                result.push(item);
            }
        }
    }
    return result;
}
//# sourceMappingURL=arrays.js.map

}),
"../vscode-css-languageservice/lib/esm/utils/objects.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isDefined: function() { return isDefined; },
  values: function() { return values; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function values(obj) {
    return Object.keys(obj).map((key) => obj[key]);
}
function isDefined(obj) {
    return typeof obj !== "undefined";
}
//# sourceMappingURL=objects.js.map

}),
"../vscode-css-languageservice/lib/esm/utils/resources.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  dirname: function() { return dirname; },
  joinPath: function() { return joinPath; }
});
/* ESM import */var vscode_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function dirname(uriString) {
    return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.dirname(vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uriString)).toString(true);
}
function joinPath(uriString, ...paths) {
    return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.joinPath(vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uriString), ...paths).toString(true);
}
//# sourceMappingURL=resources.js.map

}),
"../vscode-css-languageservice/lib/esm/utils/strings.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  convertSimple2RegExpPattern: function() { return convertSimple2RegExpPattern; },
  difference: function() { return difference; },
  endsWith: function() { return endsWith; },
  getLimitedString: function() { return getLimitedString; },
  startsWith: function() { return startsWith; }
});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
        return false;
    }
    for (let i = 0; i < needle.length; i++) {
        if (haystack[i] !== needle[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Determines if haystack ends with needle.
 */
function endsWith(haystack, needle) {
    let diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.lastIndexOf(needle) === diff;
    }
    else if (diff === 0) {
        return haystack === needle;
    }
    else {
        return false;
    }
}
/**
 * Computes the difference score for two strings. More similar strings have a higher score.
 * We use largest common subsequence dynamic programming approach but penalize in the end for length differences.
 * Strings that have a large length difference will get a bad default score 0.
 * Complexity - both time and space O(first.length * second.length)
 * Dynamic programming LCS computation http://en.wikipedia.org/wiki/Longest_common_subsequence_problem
 *
 * @param first a string
 * @param second a string
 */
function difference(first, second, maxLenDelta = 4) {
    let lengthDifference = Math.abs(first.length - second.length);
    // We only compute score if length of the currentWord and length of entry.name are similar.
    if (lengthDifference > maxLenDelta) {
        return 0;
    }
    // Initialize LCS (largest common subsequence) matrix.
    let LCS = [];
    let zeroArray = [];
    let i, j;
    for (i = 0; i < second.length + 1; ++i) {
        zeroArray.push(0);
    }
    for (i = 0; i < first.length + 1; ++i) {
        LCS.push(zeroArray);
    }
    for (i = 1; i < first.length + 1; ++i) {
        for (j = 1; j < second.length + 1; ++j) {
            if (first[i - 1] === second[j - 1]) {
                LCS[i][j] = LCS[i - 1][j - 1] + 1;
            }
            else {
                LCS[i][j] = Math.max(LCS[i - 1][j], LCS[i][j - 1]);
            }
        }
    }
    return LCS[first.length][second.length] - Math.sqrt(lengthDifference);
}
/**
 * Limit of string length.
 */
function getLimitedString(str, ellipsis = true) {
    if (!str) {
        return "";
    }
    if (str.length < 140) {
        return str;
    }
    return str.slice(0, 140) + (ellipsis ? "\u2026" : "");
}
function convertSimple2RegExpPattern(pattern) {
    return pattern.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, "\\$&").replace(/[\*]/g, ".*");
}
//# sourceMappingURL=strings.js.map

}),
"./src/configuration.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isOldConfiguration: function() { return isOldConfiguration; },
  toNewConfiguration: function() { return toNewConfiguration; }
});
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @somesass/language-services */ "../language-services/dist/language-services.js");
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_somesass_language_services__WEBPACK_IMPORTED_MODULE_0__);

function toNewConfiguration(v1, log) {
    const newSettings = Object.assign({}, _somesass_language_services__WEBPACK_IMPORTED_MODULE_0__.defaultConfiguration, v1);
    if (v1.loadPaths) {
        log.info("somesass.loadPaths is now somesass.workspace.loadPaths");
        newSettings.workspace.loadPaths = v1.loadPaths;
    }
    if (v1.scannerExclude) {
        log.info("somesass.scannerExclude is now somesass.workspace.exclude");
        newSettings.workspace.exclude = v1.scannerExclude;
    }
    if (typeof v1.suggestAllFromOpenDocument !== "undefined") {
        newSettings.css.completion.includeFromCurrentDocument = v1.suggestAllFromOpenDocument;
    }
    if (typeof v1.triggerPropertyValueCompletion !== "undefined") {
        newSettings.css.completion.triggerPropertyValueCompletion = v1.triggerPropertyValueCompletion;
    }
    if (typeof v1.suggestAllFromOpenDocument !== "undefined") {
        newSettings.sass.completion.includeFromCurrentDocument = v1.suggestAllFromOpenDocument;
    }
    if (typeof v1.suggestionStyle !== "undefined") {
        newSettings.sass.completion.mixinStyle = v1.suggestionStyle;
    }
    if (typeof v1.suggestFromUseOnly !== "undefined") {
        newSettings.sass.completion.suggestFromUseOnly = v1.suggestFromUseOnly;
    }
    if (typeof v1.triggerPropertyValueCompletion !== "undefined") {
        newSettings.sass.completion.triggerPropertyValueCompletion = v1.triggerPropertyValueCompletion;
    }
    if (typeof v1.suggestAllFromOpenDocument !== "undefined") {
        log.info("somesass.suggestAllFromOpenDocument is now somesass.scss.completion.includeFromCurrentDocument and somesass.sass.completion.includeFromCurrentDocument");
        newSettings.scss.completion.includeFromCurrentDocument = v1.suggestAllFromOpenDocument;
    }
    if (typeof v1.suggestionStyle !== "undefined") {
        log.info("somesass.suggestionStyle is now somesass.scss.completion.mixinStyle and somesass.sass.completion.mixinStyle");
        newSettings.scss.completion.mixinStyle = v1.suggestionStyle;
    }
    if (typeof v1.suggestFromUseOnly !== "undefined") {
        log.info("somesass.suggestFromUseOnly is now somesass.scss.completion.suggestFromUseOnly and somesass.sass.completion.suggestFromUseOnly");
        newSettings.scss.completion.suggestFromUseOnly = v1.suggestFromUseOnly;
    }
    if (typeof v1.triggerPropertyValueCompletion !== "undefined") {
        log.info("somesass.triggerPropertyValueCompletion is now somesass.scss.completion.triggerPropertyValueCompletion and somesass.sass.completion.triggerPropertyValueCompletion");
        newSettings.scss.completion.triggerPropertyValueCompletion = v1.triggerPropertyValueCompletion;
    }
    return newSettings;
}
function isOldConfiguration(maybeV1) {
    const asV1 = maybeV1;
    if (typeof asV1.loadPaths !== "undefined") return true;
    if (typeof asV1.scannerExclude !== "undefined") return true;
    if (typeof asV1.scannerDepth !== "undefined") return true;
    if (typeof asV1.scanImportedFiles !== "undefined") return true;
    if (typeof asV1.suggestionStyle !== "undefined") return true;
    if (typeof asV1.suggestAllFromOpenDocument !== "undefined") return true;
    if (typeof asV1.suggestFromUseOnly !== "undefined") return true;
    if (typeof asV1.suggestFunctionsInStringContextAfterSymbols !== "undefined") return true;
    if (typeof asV1.triggerPropertyValueCompletion !== "undefined") return true;
    return false;
}


}),
"./src/constants.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  EXTENSION_ID: function() { return EXTENSION_ID; },
  REQUEST_FS_FIND_FILES: function() { return REQUEST_FS_FIND_FILES; },
  REQUEST_FS_READ_DIRECTORY: function() { return REQUEST_FS_READ_DIRECTORY; },
  REQUEST_FS_READ_FILE: function() { return REQUEST_FS_READ_FILE; },
  REQUEST_FS_STAT: function() { return REQUEST_FS_STAT; }
});
const EXTENSION_ID = "some-sass";
const REQUEST_FS_STAT = `${EXTENSION_ID}/stat`;
const REQUEST_FS_FIND_FILES = `${EXTENSION_ID}/find-files`;
const REQUEST_FS_READ_FILE = `${EXTENSION_ID}/read-file`;
const REQUEST_FS_READ_DIRECTORY = `${EXTENSION_ID}/read-directory`;


}),
"./src/embedded.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getSassContent: function() { return getSassContent; },
  getSassRegions: function() { return getSassRegions; },
  getSassRegionsDocument: function() { return getSassRegionsDocument; },
  isFileWhereScssCanBeEmbedded: function() { return isFileWhereScssCanBeEmbedded; }
});
/* ESM import */var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");

function isFileWhereScssCanBeEmbedded(path) {
    if (path.endsWith(".scss") || path.endsWith(".sass") || path.endsWith(".css")) {
        return false;
    }
    return true;
}
function getSassRegions(content) {
    const regions = [];
    const startRe = /<style[\w\t\n "'=]+(lang|type)=["'](text\/)?(?<type>s(a|c)ss)["'][\w\t\n "'=]*>/g;
    const endRe = /<\/style>/g;
    let start;
    let end;
    while((start = startRe.exec(content)) !== null && (end = endRe.exec(content)) !== null){
        if (start[0] !== undefined) {
            regions.push({
                type: start.groups?.type || "scss",
                range: [
                    start.index + start[0].length,
                    end.index
                ]
            });
        }
    }
    return regions;
}
function getSassContent(content, regions = getSassRegions(content)) {
    const oldContent = content;
    let newContent = oldContent.split("\n").map((line)=>" ".repeat(line.length)).join("\n");
    for (const { range } of regions){
        newContent = newContent.slice(0, range[0]) + oldContent.slice(range[0], range[1]) + newContent.slice(range[1]);
    }
    return newContent;
}
/**
 * Function that extracts only the Sass region of a template
 * language such as Vue, Svelte or Astro. This is not the correct
 * approach for embedded languages, compared to say the HTML language
 * server.
 *
 * @todo Look into how to do this properly with a goal to unship this custom handling.
 */ function getSassRegionsDocument(document = null, position) {
    if (!document) return document;
    const offset = position ? document.offsetAt(position) : 0;
    if (!isFileWhereScssCanBeEmbedded(document.uri)) {
        return document;
    }
    const text = document.getText();
    const regions = getSassRegions(text);
    if (typeof position === "undefined" || regions.some(({ range })=>range[0] <= offset && range[1] >= offset) && regions.every(({ type })=>type === regions[0].type)) {
        const uri = document.uri;
        const version = document.version;
        return vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument.create(uri, regions[0].type, version, getSassContent(text, regions));
    }
    return null;
}


}),
"./src/file-system-provider.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  FsFindFilesRequest: function() { return FsFindFilesRequest; },
  FsReadDirectoryRequest: function() { return FsReadDirectoryRequest; },
  FsReadFileRequest: function() { return FsReadFileRequest; },
  FsStatRequest: function() { return FsStatRequest; },
  getFileSystemProvider: function() { return getFileSystemProvider; }
});
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @somesass/language-services */ "../language-services/dist/language-services.js");
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_somesass_language_services__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* ESM import */var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");




(function(FsFindFilesRequest) {
    FsFindFilesRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_FIND_FILES);
})(FsFindFilesRequest || (FsFindFilesRequest = {}));
(function(FsReadFileRequest) {
    FsReadFileRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_READ_FILE);
})(FsReadFileRequest || (FsReadFileRequest = {}));
(function(FsReadDirectoryRequest) {
    FsReadDirectoryRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_READ_DIRECTORY);
})(FsReadDirectoryRequest || (FsReadDirectoryRequest = {}));
(function(FsStatRequest) {
    FsStatRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_STAT);
})(FsStatRequest || (FsStatRequest = {}));
function getFileSystemProvider(connection, runtime) {
    return {
        async stat (uri) {
            const handler = runtime.file;
            if (handler) {
                return handler.stat(uri);
            }
            try {
                const params = uri.toString();
                const res = await connection.sendRequest(FsStatRequest.type, params);
                return res;
            } catch  {
                return {
                    type: _somesass_language_services__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown,
                    mtime: -1,
                    ctime: -1,
                    size: -1
                };
            }
        },
        async readFile (uri, encoding = "utf-8") {
            const handler = runtime.file;
            if (handler) {
                return await handler.readFile(uri);
            }
            const params = uri.toString();
            const res = await connection.sendRequest(FsReadFileRequest.type, {
                uri: params,
                encoding
            });
            return res;
        },
        async readDirectory (uri) {
            const handler = runtime.file;
            if (handler) {
                return await handler.readDirectory(uri);
            }
            const res = await connection.sendRequest(FsReadDirectoryRequest.type, uri.toString());
            return res;
        },
        async findFiles (pattern, exclude) {
            const handler = runtime.file;
            if (handler) {
                return handler.findFiles(pattern, exclude);
            }
            try {
                const res = await connection.sendRequest(FsFindFilesRequest.type, {
                    pattern,
                    exclude
                });
                return res.map((stringUri)=>vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(stringUri));
            } catch (e) {
                console.error(e.message);
                return [];
            }
        },
        async exists (uri) {
            const handler = runtime.file;
            if (handler) {
                return handler.exists(uri);
            }
            try {
                const params = uri.toString();
                const res = await connection.sendRequest(FsStatRequest.type, params);
                const exists = res.type !== _somesass_language_services__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown;
                return exists;
            } catch  {
                return false;
            }
        },
        realPath (uri) {
            try {
                const handler = runtime.file;
                if (handler) {
                    return handler.realPath(uri);
                }
                return Promise.resolve(uri);
            } catch  {
                return Promise.resolve(uri);
            }
        }
    };
}
var FsFindFilesRequest, FsReadFileRequest, FsReadDirectoryRequest, FsStatRequest;


}),
"./src/logger.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createLogger: function() { return createLogger; }
});
const fatal = 1;
const error = 2;
const warn = 3;
const info = 4;
const debug = 5;
const trace = 6;
const silent = 0;
function levelToRank(level) {
    switch(level){
        case "fatal":
            return fatal;
        case "error":
            return error;
        case "warn":
            return warn;
        case "debug":
            return debug;
        case "trace":
            return trace;
        case "silent":
            return silent;
        case "info":
        default:
            return info;
    }
}
class LoggerImpl {
    #remoteConsole;
    #level = levelToRank("info");
    constructor(remoteConsole){
        this.#remoteConsole = remoteConsole;
        try {
            const levelArg = process.argv.indexOf("--loglevel");
            if (levelArg !== -1) {
                this.#level = levelToRank(process.argv[levelArg + 1]);
            }
        } catch  {}
    }
    setLogLevel(level) {
        this.#level = levelToRank(level);
    }
    fatal(message) {
        if (this.#level >= fatal) {
            this.#remoteConsole.error(message);
        }
    }
    error(message) {
        if (this.#level >= error) {
            this.#remoteConsole.error(message);
        }
    }
    warn(message) {
        if (this.#level >= warn) {
            this.#remoteConsole.warn(message);
        }
    }
    info(message) {
        if (this.#level >= info) {
            this.#remoteConsole.info(message);
        }
    }
    debug(message) {
        if (this.#level >= debug) {
            this.#remoteConsole.debug(message);
        }
    }
    trace(message) {
        if (this.#level >= trace) {
            this.#remoteConsole.debug(message);
        }
    }
}
function createLogger(remoteConsole) {
    return new LoggerImpl(remoteConsole);
}


}),
"./src/node-file-system.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NodeFileSystem: function() { return NodeFileSystem; }
});
/* ESM import */var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ "fs");
/* ESM import */var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @somesass/language-services */ "../language-services/dist/language-services.js");
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_somesass_language_services__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var fast_glob__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-glob */ "../../node_modules/fast-glob/out/index.js");
/* ESM import */var fast_glob__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fast_glob__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");




class NodeFileSystem {
    async findFiles(pattern, exclude) {
        const matches = await fast_glob__WEBPACK_IMPORTED_MODULE_2__(pattern, {
            absolute: true,
            dot: true,
            suppressErrors: true,
            ignore: exclude ? Array.isArray(exclude) ? exclude : [
                exclude
            ] : undefined
        });
        const result = matches.map((fsPath)=>vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.file(fsPath));
        return result;
    }
    async exists(uri) {
        try {
            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.access(uri.fsPath, fs__WEBPACK_IMPORTED_MODULE_0__.constants.R_OK | fs__WEBPACK_IMPORTED_MODULE_0__.constants.W_OK);
            return true;
        } catch  {
            return false;
        }
    }
    existsSync(path) {
        return (0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(path);
    }
    readFile(uri, encoding = "utf-8") {
        return fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(uri.fsPath, encoding);
    }
    async readDirectory(uri) {
        const dir = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readdir(uri.fsPath);
        const result = [];
        for (const name of dir){
            try {
                const stats = await this.stat(vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.joinPath(uri, name));
                result.push([
                    name,
                    stats.type
                ]);
            } catch  {
                result.push([
                    name,
                    _somesass_language_services__WEBPACK_IMPORTED_MODULE_1__.FileType.Unknown
                ]);
            }
        }
        return result;
    }
    async realPath(uri) {
        try {
            const fsPath = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.realpath(uri.fsPath);
            return vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.file(fsPath);
        } catch  {
            // Not all links we get here point to real files or symlinks on disk.
            // Fall back to returning the same URI (#184).
            return uri;
        }
    }
    async stat(uri) {
        try {
            const stats = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.stat(uri.fsPath);
            let type = _somesass_language_services__WEBPACK_IMPORTED_MODULE_1__.FileType.Unknown;
            if (stats.isFile()) {
                type = _somesass_language_services__WEBPACK_IMPORTED_MODULE_1__.FileType.File;
            } else if (stats.isDirectory()) {
                type = _somesass_language_services__WEBPACK_IMPORTED_MODULE_1__.FileType.Directory;
            } else if (stats.isSymbolicLink()) {
                type = _somesass_language_services__WEBPACK_IMPORTED_MODULE_1__.FileType.SymbolicLink;
            }
            return {
                type,
                ctime: stats.ctime.getTime(),
                mtime: stats.mtime.getTime(),
                size: stats.size
            };
        } catch  {
            return {
                type: _somesass_language_services__WEBPACK_IMPORTED_MODULE_1__.FileType.Unknown,
                ctime: -1,
                mtime: -1,
                size: -1
            };
        }
    }
}


}),
"./src/node-server.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
/* ESM import */var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver/node */ "../../node_modules/vscode-languageserver/node.js");
/* ESM import */var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _node_file_system__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node-file-system */ "./src/node-file-system.ts");
/* ESM import */var _server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./server */ "./src/server.ts");



const connection = (0,vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__.createConnection)(vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__.ProposedFeatures.all);
console.log = connection.console.log.bind(connection.console);
console.error = connection.console.error.bind(connection.console);
const runtime = {
    file: new _node_file_system__WEBPACK_IMPORTED_MODULE_1__.NodeFileSystem()
};
const server = new _server__WEBPACK_IMPORTED_MODULE_2__.SomeSassServer(connection, runtime);
server.listen();


}),
"./src/server.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SomeSassServer: function() { return SomeSassServer; }
});
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @somesass/language-services */ "../language-services/dist/language-services.js");
/* ESM import */var _somesass_language_services__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_somesass_language_services__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* ESM import */var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode-languageserver/node */ "../../node_modules/vscode-languageserver/node.js");
/* ESM import */var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
/* ESM import */var vscode_uri__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* ESM import */var _file_system_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./file-system-provider */ "./src/file-system-provider.ts");
/* ESM import */var _configuration__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./configuration */ "./src/configuration.ts");
/* ESM import */var _embedded__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./embedded */ "./src/embedded.ts");
/* ESM import */var _workspace_scanner__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./workspace-scanner */ "./src/workspace-scanner.ts");
/* ESM import */var _logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./logger */ "./src/logger.ts");
/* ESM import */var lodash_merge__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash.merge */ "../../node_modules/lodash.merge/index.js");
/* ESM import */var lodash_merge__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_9__);
/* ESM import */var _somesass_vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @somesass/vscode-css-languageservice */ "../vscode-css-languageservice/lib/esm/cssLanguageService.js");












class SomeSassServer {
    connection;
    runtime;
    log;
    configuration = _somesass_language_services__WEBPACK_IMPORTED_MODULE_0__.defaultConfiguration;
    constructor(connection, runtime){
        this.connection = connection;
        this.runtime = runtime;
        this.log = (0,_logger__WEBPACK_IMPORTED_MODULE_8__.createLogger)(connection.console);
        this.log.trace(`Process ID ${process.pid}`);
    }
    listen() {
        let ls = undefined;
        let workspaceRoot = undefined;
        let workspaceScanner = undefined;
        let fileSystemProvider = undefined;
        let clientCapabilities = undefined;
        let initialScan = null;
        const documents = new vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_2__.TextDocuments(vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_3__.TextDocument);
        documents.listen(this.connection);
        this.connection.onInitialize((params)=>{
            clientCapabilities = params.capabilities;
            fileSystemProvider = (0,_file_system_provider__WEBPACK_IMPORTED_MODULE_4__.getFileSystemProvider)(this.connection, this.runtime);
            ls = (0,_somesass_language_services__WEBPACK_IMPORTED_MODULE_0__.getLanguageService)({
                clientCapabilities,
                fileSystemProvider,
                logger: this.log
            });
            workspaceRoot = vscode_uri__WEBPACK_IMPORTED_MODULE_11__.URI.parse(params.rootUri);
            this.log.info(`Workspace root ${workspaceRoot}`);
            return {
                capabilities: {
                    textDocumentSync: vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_2__.TextDocumentSyncKind.Incremental,
                    documentLinkProvider: {
                        resolveProvider: false
                    },
                    documentSymbolProvider: true,
                    referencesProvider: true,
                    completionProvider: {
                        resolveProvider: false,
                        triggerCharacters: [
                            // For SassDoc annotation completion
                            "@",
                            "/",
                            // For @use completion
                            '"',
                            "'",
                            // For placeholder completion
                            "%",
                            // For namespaced completions
                            ".",
                            // For property values
                            ":",
                            // For custom properties
                            "-"
                        ]
                    },
                    signatureHelpProvider: {
                        triggerCharacters: [
                            "(",
                            ",",
                            ";"
                        ]
                    },
                    hoverProvider: true,
                    definitionProvider: true,
                    documentHighlightProvider: true,
                    workspaceSymbolProvider: true,
                    codeActionProvider: {
                        codeActionKinds: [
                            vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.CodeActionKind.RefactorExtract,
                            vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.CodeActionKind.RefactorExtract + ".function",
                            vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.CodeActionKind.RefactorExtract + ".constant"
                        ],
                        resolveProvider: false
                    },
                    renameProvider: {
                        prepareProvider: true
                    },
                    colorProvider: {},
                    foldingRangeProvider: true,
                    selectionRangeProvider: true
                }
            };
        });
        const applyConfiguration = (somesass, editor)=>{
            if ((0,_configuration__WEBPACK_IMPORTED_MODULE_5__.isOldConfiguration)(somesass)) {
                this.log.warn(`Your somesass configuration uses old setting names. They will continue to work for some time, but it's recommended you change your settings to the new names. For all the available settings see https://wkillerud.github.io/some-sass/user-guide/settings.html`);
                somesass = (0,_configuration__WEBPACK_IMPORTED_MODULE_5__.toNewConfiguration)(somesass, this.log);
                this.log.info("Replace old setting IDs with new ones to remove these messages");
            }
            const settings = lodash_merge__WEBPACK_IMPORTED_MODULE_9___default()(_somesass_language_services__WEBPACK_IMPORTED_MODULE_0__.defaultConfiguration, somesass, {
                editor: {
                    ...editor
                }
            });
            settings.workspace.workspaceRoot = workspaceRoot;
            this.configuration = settings;
            if (ls) {
                ls.configure(settings);
            }
            this.log.setLogLevel(settings.workspace.logLevel);
            this.log.debug("Applied user configuration");
            this.log.trace(JSON.stringify(this.configuration, null, 2));
            return settings;
        };
        const applyCustomData = async (configuration)=>{
            const paths = [];
            if (configuration.css.customData) {
                paths.push(...configuration.css.customData);
            }
            if (configuration.sass.customData) {
                paths.push(...configuration.sass.customData);
            }
            if (configuration.scss.customData) {
                paths.push(...configuration.scss.customData);
            }
            const customDataProviders = await Promise.all(paths.map(async (path)=>{
                try {
                    let uri = path.startsWith("/") ? vscode_uri__WEBPACK_IMPORTED_MODULE_11__.URI.parse(path) : vscode_uri__WEBPACK_IMPORTED_MODULE_11__.Utils.joinPath(workspaceRoot, path);
                    const content = await fileSystemProvider.readFile(uri, "utf-8");
                    const rawData = JSON.parse(content);
                    return (0,_somesass_vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_10__.newCSSDataProvider)({
                        version: rawData.version || 1,
                        properties: rawData.properties || [],
                        atDirectives: rawData.atDirectives || [],
                        pseudoClasses: rawData.pseudoClasses || [],
                        pseudoElements: rawData.pseudoElements || []
                    });
                } catch (error) {
                    this.log.debug(String(error));
                    return (0,_somesass_vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_10__.newCSSDataProvider)({
                        version: 1
                    });
                }
            }));
            ls.setDataProviders(customDataProviders);
        };
        this.connection.onInitialized(async ()=>{
            try {
                // Let other methods await the result of the initial scan before proceeding
                initialScan = new Promise((resolveInitialScan, rejectInitialScan)=>{
                    const configurationRequests = [
                        this.connection.workspace.getConfiguration("somesass"),
                        this.connection.workspace.getConfiguration("editor")
                    ];
                    Promise.all(configurationRequests).then((configs)=>{
                        if (!ls || !clientCapabilities || !workspaceRoot || !fileSystemProvider) {
                            throw new Error("Got onInitialized without onInitialize readying up all required globals");
                        }
                        let [somesass, editor] = configs;
                        const configuration = applyConfiguration(somesass, editor);
                        return applyCustomData(configuration).then(()=>fileSystemProvider.findFiles("**/*.{css,scss,sass,svelte,astro,vue}", configuration.workspace.exclude)).then((files)=>{
                            this.log.debug(`Found ${files.length} files, starting parse`);
                            workspaceScanner = new _workspace_scanner__WEBPACK_IMPORTED_MODULE_7__["default"](ls, fileSystemProvider);
                            return workspaceScanner.scan(files);
                        }).then((promises)=>{
                            this.log.debug(`Initial scan finished, parsed ${promises.length} files`);
                            resolveInitialScan();
                        }).catch((reason)=>rejectInitialScan(reason));
                    }).catch((reason)=>rejectInitialScan(reason));
                });
                await initialScan;
            } catch (error) {
                this.log.fatal(String(error));
            }
        });
        this.connection.onDidChangeConfiguration((params)=>{
            applyConfiguration(params.settings.somesass, params.settings.editor);
        });
        const doDiagnostics = async (params)=>{
            if (!ls) return;
            const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.document.uri));
            if (!document) return;
            const config = this.languageConfiguration(document);
            if (config.diagnostics.enabled) {
                let latest = documents.get(params.document.uri);
                if (!latest || latest.version !== params.document.version) return;
                const diagnostics = await ls.doDiagnostics(document);
                // Check that no new version has been made while we waited,
                // in which case the diagnostics may no longer be valid.
                latest = documents.get(params.document.uri);
                if (!latest || latest.version !== params.document.version) return;
                this.connection.sendDiagnostics({
                    uri: latest.uri,
                    diagnostics
                });
            }
        };
        documents.onDidOpen(async (params)=>{
            try {
                if (initialScan) {
                    await initialScan;
                }
                await doDiagnostics(params);
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
            }
        });
        documents.onDidChangeContent(async (params)=>{
            if (!workspaceScanner || !ls) return;
            try {
                ls.onDocumentChanged(params.document);
                await doDiagnostics(params);
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
            }
        });
        this.connection.onDidChangeWatchedFiles(async (event)=>{
            if (!workspaceScanner || !fileSystemProvider || !ls) return;
            try {
                const newFiles = [];
                for (const change of event.changes){
                    const uri = await fileSystemProvider.realPath(vscode_uri__WEBPACK_IMPORTED_MODULE_11__.URI.parse(change.uri));
                    if (change.type === vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.FileChangeType.Deleted) {
                        ls.onDocumentRemoved(uri.toString());
                    } else if (change.type === vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.FileChangeType.Changed) {
                        const document = documents.get(uri.toString());
                        if (!document) {
                            // New to us anyway
                            newFiles.push(uri);
                        } else {
                            ls.onDocumentChanged(document);
                        }
                    } else {
                        newFiles.push(uri);
                    }
                }
                await workspaceScanner.scan(newFiles);
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
            }
        });
        this.connection.onCompletion(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.completion.enabled) {
                    const result = await ls.doComplete(document, params.position);
                    if (result.items.length === 0) {
                        result.isIncomplete = true;
                    }
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onDocumentSymbol(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri));
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.documentSymbols.enabled) {
                    const result = ls.findDocumentSymbols(document);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onHover(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.hover.enabled) {
                    const result = await ls.doHover(document, params.position);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onSignatureHelp(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.signatureHelp.enabled) {
                    const result = await ls.doSignatureHelp(document, params.position);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onDefinition(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.definition.enabled) {
                    const result = await ls.findDefinition(document, params.position);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onDocumentHighlight(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.highlights.enabled) {
                    if (initialScan) {
                        await initialScan;
                    }
                    const result = ls.findDocumentHighlights(document, params.position);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onDocumentLinks(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri));
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.links.enabled) {
                    if (initialScan) {
                        await initialScan;
                    }
                    const result = await ls.findDocumentLinks(document);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onReferences(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.references.enabled) {
                    const references = await ls.findReferences(document, params.position, params.context);
                    return references;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onWorkspaceSymbol((params)=>{
            if (!ls) return null;
            try {
                const result = ls.findWorkspaceSymbols(params.query);
                return result;
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onCodeAction(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri));
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (!config.codeAction.enabled) {
                    return null;
                }
                const result = [];
                const actions = await ls.getCodeActions(document, params.range, params.context);
                for (const action of actions){
                    if (action.kind?.startsWith("refactor.extract")) {
                        // TODO: can we detect support for the custom command here before we do this?
                        // Replace with a custom command that immediately starts a rename after applying the edit.
                        // If this causes problems for other clients, look into passing some kind of client identifier (optional)
                        // with initOptions that indicate this command exists in the client.
                        const edit = action.edit?.documentChanges?.[0];
                        const command = vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.Command.create(action.title, "_somesass.applyExtractCodeAction", document.uri, document.version, edit && edit.edits[0]);
                        result.push(vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.CodeAction.create(action.title, command, action.kind));
                    } else {
                        result.push(action);
                    }
                }
                return result;
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onPrepareRename(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.rename.enabled) {
                    const preparations = await ls.prepareRename(document, params.position);
                    return preparations;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onRenameRequest(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri), params.position);
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.rename.enabled) {
                    const edits = await ls.doRename(document, params.position, params.newName);
                    return edits;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onDocumentColor(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri));
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.colors.enabled) {
                    if (initialScan) {
                        await initialScan;
                    }
                    const information = await ls.findColors(document);
                    return information;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onColorPresentation((params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri));
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.colors.enabled) {
                    const result = ls.getColorPresentations(document, params.color, params.range);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onFoldingRanges(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri));
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.foldingRanges.enabled) {
                    const result = await ls.getFoldingRanges(document);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onSelectionRanges(async (params)=>{
            if (!ls) return null;
            try {
                const document = (0,_embedded__WEBPACK_IMPORTED_MODULE_6__.getSassRegionsDocument)(documents.get(params.textDocument.uri));
                if (!document) return null;
                const config = this.languageConfiguration(document);
                if (config.selectionRanges.enabled) {
                    const result = await ls.getSelectionRanges(document, params.positions);
                    return result;
                } else {
                    return null;
                }
            } catch (e) {
                const error = e;
                this.log.debug(String(error));
                if (error.stack) this.log.debug(error.stack);
                return null;
            }
        });
        this.connection.onShutdown(()=>{
            if (!ls) return;
            ls.clearCache();
        });
        this.connection.listen();
        this.log.debug(`Some Sass language server is running`);
    }
    languageConfiguration(document) {
        switch(document.languageId){
            case "css":
                {
                    return this.configuration.css;
                }
            case "sass":
                {
                    return this.configuration.sass;
                }
            case "scss":
                {
                    return this.configuration.scss;
                }
        }
        throw new Error(`Unsupported language ${document.languageId}`);
    }
}


}),
"./src/workspace-scanner.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return WorkspaceScanner; }
});
/* ESM import */var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
/* ESM import */var vscode_uri__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* ESM import */var _embedded__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embedded */ "./src/embedded.ts");



class WorkspaceScanner {
    #ls;
    #fs;
    constructor(ls, fs){
        this.#ls = ls;
        this.#fs = fs;
    }
    async scan(files) {
        // Populate the cache for the new language services
        return Promise.all(files.map((uri)=>{
            if (uri.path.includes("/_") || uri.path.includes("\\_")) {
                // If we scan imported files (which we do by default), don't include partials in the initial scan.
                // This way we can be reasonably sure that we scan whatever index files there are _before_ we scan
                // partials which may or may not have been forwarded with a prefix.
                return Promise.resolve();
            }
            return this.parse(uri);
        }));
    }
    async parse(file, depth = 0) {
        const maxDepth = 256;
        if (depth > maxDepth) {
            return;
        }
        let uri = file;
        if (file.scheme === "vscode-test-web") {
            // TODO: test-web paths includes /static/extensions/fs which causes issues.
            // The URI ends up being vscode-test-web://mount/static/extensions/fs/file.scss when it should only be vscode-test-web://mount/file.scss.
            // This should probably be landed as a bugfix somewhere upstream.
            uri = vscode_uri__WEBPACK_IMPORTED_MODULE_2__.URI.parse(file.toString().replace("/static/extensions/fs", ""));
        }
        try {
            let document = this.#ls.getCachedTextDocument(uri);
            if (!document) {
                const content = await this.#fs.readFile(uri);
                const uriString = uri.toString();
                document = (0,_embedded__WEBPACK_IMPORTED_MODULE_1__.getSassRegionsDocument)(vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument.create(uriString, uriString.endsWith(".sass") ? "sass" : uriString.endsWith(".css") ? "css" : "scss", 1, content));
                if (!document) return;
                this.#ls.parseStylesheet(document);
            }
            const links = await this.#ls.findDocumentLinks(document);
            for (const link of links){
                if (!link.target || link.target.endsWith(".css") || // we'll get to it via our glob
                link.target.includes("#{") || link.target.startsWith("sass:")) {
                    continue;
                }
                let uri = vscode_uri__WEBPACK_IMPORTED_MODULE_2__.URI.parse(link.target);
                let visited = this.#ls.getCachedTextDocument(uri);
                if (visited) {
                    continue;
                }
                try {
                    await this.parse(uri, depth + 1);
                } catch  {
                // do nothing
                }
            }
        } catch  {
        // Something went wrong parsing this file, try parsing the others
        }
    }
}


}),

};
;
//# sourceMappingURL=src_node-server_ts.js.map